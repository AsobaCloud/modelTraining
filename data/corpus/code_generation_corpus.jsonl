{"domain": "code_generation", "category": "api_development", "prompt": "### Code Generation Request (CLAUDE.md):\nCreate a Python function for API development that handles add\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def add():\n    a = request.form.get(\"a\", 0, type=float)\n    b = request.form.get(\"b\", 0, type=float)\n    return jsonify(result=a + b)\n", "metadata": {"source": "github.com/pallets/flask/examples/javascript/js_example/views.py", "language": "python", "complexity": "simple", "type": "function", "lines": 5, "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "code_generation", "category": "api_development", "prompt": "### Code Generation Request (CLAUDE.md):\nCreate a Python function for API development that handles client\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def client(app):\n    return app.test_client()\n", "metadata": {"source": "github.com/pallets/flask/examples/javascript/tests/conftest.py", "language": "python", "complexity": "simple", "type": "function", "lines": 3, "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "code_generation", "category": "api_development", "prompt": "### Code Generation Request (CLAUDE.md):\nCreate a Python function for API development that handles test_add\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def test_add(client, a, b, result):\n    response = client.post(\"/add\", data={\"a\": a, \"b\": b})\n    assert response.get_json()[\"result\"] == result\n", "metadata": {"source": "github.com/pallets/flask/examples/javascript/tests/test_js_example.py", "language": "python", "complexity": "simple", "type": "function", "lines": 4, "authentic": true}, "validation": {"overall_quality": 0.86, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.9}}
{"domain": "code_generation", "category": "api_development", "prompt": "### Code Generation Request (CLAUDE.md):\nCreate a Python function for API development that handles create_app\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def create_app(test_config=None):\n    \"\"\"Create and configure an instance of the Flask application.\"\"\"\n    app = Flask(__name__, instance_relative_config=True)\n    app.config.from_mapping(\n        # a default secret that should be overridden by instance config\n        SECRET_KEY=\"dev\",\n        # store the database in the instance folder\n        DATABASE=os.path.join(app.instance_path, \"flaskr.sqlite\"),\n    )\n\n    if test_config is None:\n        # load the instance config, if it exists, when not testing\n        app.config.from_pyfile(\"config.py\", silent=True)\n    else:\n        # load the test config if passed in\n        app.config.update(test_config)\n\n    # ensure the instance folder exists\n    try:\n        os.makedirs(app.instance_path)\n    except OSError:\n        pass\n\n    @app.route(\"/hello\")\n    def hello():\n        return \"Hello, World!\"\n\n    # register the database commands\n    from . import db\n\n    db.init_app(app)\n\n    # apply the blueprints to the app\n    from . import auth\n    from . import blog\n\n    app.register_blueprint(auth.bp)\n    app.register_blueprint(blog.bp)\n\n    # make url_for('index') == url_for('blog.index')\n    # in another app, you might define a separate main index here with\n    # app.route, while giving the blog blueprint a url_prefix, but for\n    # the tutorial the blog will be the main index\n    app.add_url_rule(\"/\", endpoint=\"index\")\n\n    return app\n", "metadata": {"source": "github.com/pallets/flask/examples/tutorial/flaskr/__init__.py", "language": "python", "complexity": "medium", "type": "function", "lines": 47, "authentic": true}, "validation": {"overall_quality": 0.8674999999999999, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "api_development", "prompt": "### Code Generation Request (CLAUDE.md):\nCreate a Python function for API development that handles logout\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def logout():\n    \"\"\"Clear the current session, including the stored user id.\"\"\"\n    session.clear()\n    return redirect(url_for(\"index\"))\n", "metadata": {"source": "github.com/pallets/flask/examples/tutorial/flaskr/auth.py", "language": "python", "complexity": "simple", "type": "function", "lines": 5, "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "code_generation", "category": "api_development", "prompt": "### Code Generation Request (CLAUDE.md):\nCreate a Python function for API development that handles index\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def index():\n    \"\"\"Show all the posts, most recent first.\"\"\"\n    db = get_db()\n    posts = db.execute(\n        \"SELECT p.id, title, body, created, author_id, username\"\n        \" FROM post p JOIN user u ON p.author_id = u.id\"\n        \" ORDER BY created DESC\"\n    ).fetchall()\n    return render_template(\"blog/index.html\", posts=posts)\n\n", "metadata": {"source": "github.com/pallets/flask/examples/tutorial/flaskr/blog.py", "language": "python", "complexity": "simple", "type": "function", "lines": 11, "authentic": true}, "validation": {"overall_quality": 0.8700000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "code_generation", "category": "api_development", "prompt": "### Code Generation Request (CLAUDE.md):\nCreate a Python function for API development that handles delete\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def delete(id):\n    \"\"\"Delete a post.\n\n    Ensures that the post exists and that the logged in user is the\n    author of the post.\n    \"\"\"\n    get_post(id)\n    db = get_db()\n    db.execute(\"DELETE FROM post WHERE id = ?\", (id,))\n    db.commit()\n    return redirect(url_for(\"blog.index\"))\n", "metadata": {"source": "github.com/pallets/flask/examples/tutorial/flaskr/blog.py", "language": "python", "complexity": "simple", "type": "function", "lines": 12, "authentic": true}, "validation": {"overall_quality": 0.8825000000000002, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "code_generation", "category": "api_development", "prompt": "### Code Generation Request (CLAUDE.md):\nCreate a Python function for API development that handles get_db\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def get_db():\n    \"\"\"Connect to the application's configured database. The connection\n    is unique for each request and will be reused if this is called\n    again.\n    \"\"\"\n    if \"db\" not in g:\n        g.db = sqlite3.connect(\n            current_app.config[\"DATABASE\"], detect_types=sqlite3.PARSE_DECLTYPES\n        )\n        g.db.row_factory = sqlite3.Row\n\n    return g.db\n\n", "metadata": {"source": "github.com/pallets/flask/examples/tutorial/flaskr/db.py", "language": "python", "complexity": "simple", "type": "function", "lines": 14, "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "code_generation", "category": "api_development", "prompt": "### Code Generation Request (CLAUDE.md):\nCreate a Python function for API development that handles close_db\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def close_db(e=None):\n    \"\"\"If this request connected to the database, close the\n    connection.\n    \"\"\"\n    db = g.pop(\"db\", None)\n\n    if db is not None:\n        db.close()\n\n", "metadata": {"source": "github.com/pallets/flask/examples/tutorial/flaskr/db.py", "language": "python", "complexity": "simple", "type": "function", "lines": 10, "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "code_generation", "category": "api_development", "prompt": "### Code Generation Request (CLAUDE.md):\nCreate a Python function for API development that handles init_db_command\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def init_db_command():\n    \"\"\"Clear existing data and create new tables.\"\"\"\n    init_db()\n    click.echo(\"Initialized the database.\")\n\n", "metadata": {"source": "github.com/pallets/flask/examples/tutorial/flaskr/db.py", "language": "python", "complexity": "simple", "type": "function", "lines": 6, "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "code_generation", "category": "api_development", "prompt": "### Code Generation Request (CLAUDE.md):\nCreate a Python function for API development that handles init_app\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def init_app(app):\n    \"\"\"Register database functions with the Flask app. This is called by\n    the application factory.\n    \"\"\"\n    app.teardown_appcontext(close_db)\n    app.cli.add_command(init_db_command)\n", "metadata": {"source": "github.com/pallets/flask/examples/tutorial/flaskr/db.py", "language": "python", "complexity": "simple", "type": "function", "lines": 7, "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "code_generation", "category": "api_development", "prompt": "### Code Generation Request (CLAUDE.md):\nCreate a Python function for API development that handles runner\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def runner(app):\n    \"\"\"A test runner for the app's Click commands.\"\"\"\n    return app.test_cli_runner()\n\n", "metadata": {"source": "github.com/pallets/flask/examples/tutorial/tests/conftest.py", "language": "python", "complexity": "simple", "type": "function", "lines": 5, "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "code_generation", "category": "api_development", "prompt": "### Code Generation Request (CLAUDE.md):\nCreate a Python function for API development that handles auth\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def auth(client):\n    return AuthActions(client)\n", "metadata": {"source": "github.com/pallets/flask/examples/tutorial/tests/conftest.py", "language": "python", "complexity": "simple", "type": "function", "lines": 3, "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "code_generation", "category": "api_development", "prompt": "### Code Generation Request (CLAUDE.md):\nCreate a Python function for API development that handles test_register_validate_input\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def test_register_validate_input(client, username, password, message):\n    response = client.post(\n        \"/auth/register\", data={\"username\": username, \"password\": password}\n    )\n    assert message in response.data\n\n", "metadata": {"source": "github.com/pallets/flask/examples/tutorial/tests/test_auth.py", "language": "python", "complexity": "simple", "type": "function", "lines": 7, "authentic": true}, "validation": {"overall_quality": 0.86, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.9}}
{"domain": "code_generation", "category": "api_development", "prompt": "### Code Generation Request (CLAUDE.md):\nCreate a Python function for API development that handles test_login_validate_input\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def test_login_validate_input(auth, username, password, message):\n    response = auth.login(username, password)\n    assert message in response.data\n\n", "metadata": {"source": "github.com/pallets/flask/examples/tutorial/tests/test_auth.py", "language": "python", "complexity": "simple", "type": "function", "lines": 5, "authentic": true}, "validation": {"overall_quality": 0.86, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.9}}
{"domain": "code_generation", "category": "api_development", "prompt": "### Code Generation Request (CLAUDE.md):\nCreate a Python function for API development that handles test_logout\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def test_logout(client, auth):\n    auth.login()\n\n    with client:\n        auth.logout()\n        assert \"user_id\" not in session\n", "metadata": {"source": "github.com/pallets/flask/examples/tutorial/tests/test_auth.py", "language": "python", "complexity": "simple", "type": "function", "lines": 7, "authentic": true}, "validation": {"overall_quality": 0.86, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.9}}
{"domain": "code_generation", "category": "api_development", "prompt": "### Code Generation Request (CLAUDE.md):\nCreate a Python function for API development that handles test_login_required\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def test_login_required(client, path):\n    response = client.post(path)\n    assert response.headers[\"Location\"] == \"/auth/login\"\n\n", "metadata": {"source": "github.com/pallets/flask/examples/tutorial/tests/test_blog.py", "language": "python", "complexity": "simple", "type": "function", "lines": 5, "authentic": true}, "validation": {"overall_quality": 0.86, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.9}}
{"domain": "code_generation", "category": "api_development", "prompt": "### Code Generation Request (CLAUDE.md):\nCreate a Python function for API development that handles test_exists_required\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def test_exists_required(client, auth, path):\n    auth.login()\n    assert client.post(path).status_code == 404\n\n", "metadata": {"source": "github.com/pallets/flask/examples/tutorial/tests/test_blog.py", "language": "python", "complexity": "simple", "type": "function", "lines": 5, "authentic": true}, "validation": {"overall_quality": 0.86, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.9}}
{"domain": "code_generation", "category": "api_development", "prompt": "### Code Generation Request (CLAUDE.md):\nCreate a Python function for API development that handles test_create\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def test_create(client, auth, app):\n    auth.login()\n    assert client.get(\"/create\").status_code == 200\n    client.post(\"/create\", data={\"title\": \"created\", \"body\": \"\"})\n\n    with app.app_context():\n        db = get_db()\n        count = db.execute(\"SELECT COUNT(id) FROM post\").fetchone()[0]\n        assert count == 2\n\n", "metadata": {"source": "github.com/pallets/flask/examples/tutorial/tests/test_blog.py", "language": "python", "complexity": "simple", "type": "function", "lines": 11, "authentic": true}, "validation": {"overall_quality": 0.845, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.9}}
{"domain": "code_generation", "category": "api_development", "prompt": "### Code Generation Request (CLAUDE.md):\nCreate a Python function for API development that handles test_create_update_validate\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def test_create_update_validate(client, auth, path):\n    auth.login()\n    response = client.post(path, data={\"title\": \"\", \"body\": \"\"})\n    assert b\"Title is required.\" in response.data\n\n", "metadata": {"source": "github.com/pallets/flask/examples/tutorial/tests/test_blog.py", "language": "python", "complexity": "simple", "type": "function", "lines": 6, "authentic": true}, "validation": {"overall_quality": 0.86, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.9}}
{"domain": "code_generation", "category": "api_development", "prompt": "### Code Generation Request (CLAUDE.md):\nCreate a Python function for API development that handles test_delete\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def test_delete(client, auth, app):\n    auth.login()\n    response = client.post(\"/1/delete\")\n    assert response.headers[\"Location\"] == \"/\"\n\n    with app.app_context():\n        db = get_db()\n        post = db.execute(\"SELECT * FROM post WHERE id = 1\").fetchone()\n        assert post is None\n", "metadata": {"source": "github.com/pallets/flask/examples/tutorial/tests/test_blog.py", "language": "python", "complexity": "simple", "type": "function", "lines": 10, "authentic": true}, "validation": {"overall_quality": 0.845, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.9}}
{"domain": "code_generation", "category": "api_development", "prompt": "### Code Generation Request (CLAUDE.md):\nCreate a Python function for API development that handles test_get_close_db\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def test_get_close_db(app):\n    with app.app_context():\n        db = get_db()\n        assert db is get_db()\n\n    with pytest.raises(sqlite3.ProgrammingError) as e:\n        db.execute(\"SELECT 1\")\n\n    assert \"closed\" in str(e.value)\n\n", "metadata": {"source": "github.com/pallets/flask/examples/tutorial/tests/test_db.py", "language": "python", "complexity": "simple", "type": "function", "lines": 11, "authentic": true}, "validation": {"overall_quality": 0.845, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.9}}
{"domain": "code_generation", "category": "api_development", "prompt": "### Code Generation Request (CLAUDE.md):\nCreate a Python function for API development that handles test_init_db_command\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def test_init_db_command(runner, monkeypatch):\n    class Recorder:\n        called = False\n\n    def fake_init_db():\n        Recorder.called = True\n\n    monkeypatch.setattr(\"flaskr.db.init_db\", fake_init_db)\n    result = runner.invoke(args=[\"init-db\"])\n    assert \"Initialized\" in result.output\n    assert Recorder.called\n", "metadata": {"source": "github.com/pallets/flask/examples/tutorial/tests/test_db.py", "language": "python", "complexity": "simple", "type": "function", "lines": 12, "authentic": true}, "validation": {"overall_quality": 0.845, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.9}}
{"domain": "code_generation", "category": "api_development", "prompt": "### Code Generation Request (CLAUDE.md):\nCreate a Python function for API development that handles test_config\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def test_config():\n    \"\"\"Test create_app without passing test config.\"\"\"\n    assert not create_app().testing\n    assert create_app({\"TESTING\": True}).testing\n\n", "metadata": {"source": "github.com/pallets/flask/examples/tutorial/tests/test_factory.py", "language": "python", "complexity": "simple", "type": "function", "lines": 6, "authentic": true}, "validation": {"overall_quality": 0.8525, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.9500000000000001}}
{"domain": "code_generation", "category": "api_development", "prompt": "### Code Generation Request (CLAUDE.md):\nCreate a Python function for API development that handles test_hello\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def test_hello(client):\n    response = client.get(\"/hello\")\n    assert response.data == b\"Hello, World!\"\n", "metadata": {"source": "github.com/pallets/flask/examples/tutorial/tests/test_factory.py", "language": "python", "complexity": "simple", "type": "function", "lines": 4, "authentic": true}, "validation": {"overall_quality": 0.86, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.9}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class TreeNode(MappedAsDataclass, Base):\n    __tablename__ = \"tree\"\n\n    id: Mapped[int] = mapped_column(primary_key=True, init=False)\n    parent_id: Mapped[Optional[int]] = mapped_column(\n        ForeignKey(\"tree.id\"), init=False\n    )\n    name: Mapped[str]\n\n    children: Mapped[Dict[str, TreeNode]] = relationship(\n        cascade=\"all, delete-orphan\",\n        back_populates=\"parent\",\n        collection_class=attribute_keyed_dict(\"name\"),\n        init=False,\n        repr=False,\n    )\n\n    parent: Mapped[Optional[TreeNode]] = relationship(\n        back_populates=\"children\", remote_side=id, default=None\n    )\n\n    def dump(self, _indent: int = 0) -> str:\n        return (\n            \"   \" * _indent\n            + repr(self)\n            + \"\\n\"\n            + \"\".join([c.dump(_indent + 1) for c in self.children.values()])\n        )\n\n", "metadata": {"source": "github.com/sqlalchemy/sqlalchemy/examples/adjacency_list/adjacency_list.py", "language": "python", "complexity": "simple", "type": "class", "lines": 30, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class Order(Base):\n    __tablename__ = \"order\"\n\n    order_id: Mapped[int] = mapped_column(primary_key=True)\n    customer_name: Mapped[str] = mapped_column(String(30))\n    order_date: Mapped[datetime] = mapped_column(default=datetime.now())\n    order_items: Mapped[list[OrderItem]] = relationship(\n        cascade=\"all, delete-orphan\", backref=\"order\"\n    )\n\n    def __init__(self, customer_name: str) -> None:\n        self.customer_name = customer_name\n\n", "metadata": {"source": "github.com/sqlalchemy/sqlalchemy/examples/association/basic_association.py", "language": "python", "complexity": "simple", "type": "class", "lines": 14, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class Item(Base):\n    __tablename__ = \"item\"\n    item_id: Mapped[int] = mapped_column(primary_key=True)\n    description: Mapped[str] = mapped_column(String(30))\n    price: Mapped[float]\n\n    def __init__(self, description: str, price: float) -> None:\n        self.description = description\n        self.price = price\n\n    def __repr__(self) -> str:\n        return \"Item({!r}, {!r})\".format(self.description, self.price)\n\n", "metadata": {"source": "github.com/sqlalchemy/sqlalchemy/examples/association/basic_association.py", "language": "python", "complexity": "simple", "type": "class", "lines": 14, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class OrderItem(Base):\n    __tablename__ = \"orderitem\"\n    order_id: Mapped[int] = mapped_column(\n        ForeignKey(\"order.order_id\"), primary_key=True\n    )\n    item_id: Mapped[int] = mapped_column(\n        ForeignKey(\"item.item_id\"), primary_key=True\n    )\n    price: Mapped[float]\n\n    def __init__(self, item: Item, price: float | None = None) -> None:\n        self.item = item\n        self.price = price or item.price\n\n    item: Mapped[Item] = relationship(lazy=\"joined\")\n\n", "metadata": {"source": "github.com/sqlalchemy/sqlalchemy/examples/association/basic_association.py", "language": "python", "complexity": "simple", "type": "class", "lines": 17, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class GenDefaultCollection(KeyFuncDict[str, \"B\"]):\n    def __missing__(self, key: str) -> B:\n        self[key] = b = B(key)\n        return b\n\n", "metadata": {"source": "github.com/sqlalchemy/sqlalchemy/examples/association/dict_of_sets_with_default.py", "language": "python", "complexity": "simple", "type": "class", "lines": 6, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class A(Base):\n    __tablename__ = \"a\"\n    associations: Mapped[Mapping[str, B]] = relationship(\n        \"B\",\n        collection_class=lambda: GenDefaultCollection(\n            operator.attrgetter(\"key\")\n        ),\n    )\n\n    collections: AssociationProxy[dict[str, set[int]]] = association_proxy(\n        \"associations\", \"values\"\n    )\n    \"\"\"Bridge the association from 'associations' over to the 'values'\n    association proxy of B.\n    \"\"\"\n\n", "metadata": {"source": "github.com/sqlalchemy/sqlalchemy/examples/association/dict_of_sets_with_default.py", "language": "python", "complexity": "simple", "type": "class", "lines": 17, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class B(Base):\n    __tablename__ = \"b\"\n    a_id: Mapped[int] = mapped_column(ForeignKey(\"a.id\"))\n    elements: Mapped[set[C]] = relationship(\"C\", collection_class=set)\n    key: Mapped[str]\n\n    values: AssociationProxy[set[int]] = association_proxy(\"elements\", \"value\")\n    \"\"\"Bridge the association from 'elements' over to the\n    'value' element of C.\"\"\"\n\n    def __init__(self, key: str, values: set[int] | None = None) -> None:\n        self.key = key\n        if values:\n            self.values = values\n\n", "metadata": {"source": "github.com/sqlalchemy/sqlalchemy/examples/association/dict_of_sets_with_default.py", "language": "python", "complexity": "simple", "type": "class", "lines": 16, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class C(Base):\n    __tablename__ = \"c\"\n    b_id: Mapped[int] = mapped_column(ForeignKey(\"b.id\"))\n    value: Mapped[int]\n\n    def __init__(self, value: int) -> None:\n        self.value = value\n\n", "metadata": {"source": "github.com/sqlalchemy/sqlalchemy/examples/association/dict_of_sets_with_default.py", "language": "python", "complexity": "simple", "type": "class", "lines": 9, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database function that __init__\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def __init__(self, item: Item, price: float | None = None):\n        self.item = item\n        self.price = price or item.price\n\n", "metadata": {"source": "github.com/sqlalchemy/sqlalchemy/examples/association/proxied_association.py", "language": "python", "complexity": "simple", "type": "function", "lines": 5, "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class Order(Base):\n    __tablename__ = \"order\"\n\n    order_id: Mapped[int] = mapped_column(primary_key=True)\n    customer_name: Mapped[str] = mapped_column(String(30))\n    order_date: Mapped[datetime] = mapped_column(default=datetime.now())\n    order_items: Mapped[list[OrderItem]] = relationship(\n        cascade=\"all, delete-orphan\", backref=\"order\"\n    )\n    items: AssociationProxy[list[Item]] = association_proxy(\n        \"order_items\", \"item\"\n    )\n\n    def __init__(self, customer_name: str) -> None:\n        self.customer_name = customer_name\n\n", "metadata": {"source": "github.com/sqlalchemy/sqlalchemy/examples/association/proxied_association.py", "language": "python", "complexity": "simple", "type": "class", "lines": 17, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class Item(Base):\n    __tablename__ = \"item\"\n    item_id: Mapped[int] = mapped_column(primary_key=True)\n    description: Mapped[str] = mapped_column(String(30))\n    price: Mapped[float]\n\n    def __init__(self, description: str, price: float) -> None:\n        self.description = description\n        self.price = price\n\n    def __repr__(self) -> str:\n        return \"Item({!r}, {!r})\".format(self.description, self.price)\n\n", "metadata": {"source": "github.com/sqlalchemy/sqlalchemy/examples/association/proxied_association.py", "language": "python", "complexity": "simple", "type": "class", "lines": 14, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 1 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class OrderItem(Base):\n    __tablename__ = \"orderitem\"\n    order_id: Mapped[int] = mapped_column(\n        ForeignKey(\"order.order_id\"), primary_key=True\n    )\n    item_id: Mapped[int] = mapped_column(\n        ForeignKey(\"item.item_id\"), primary_key=True\n    )\n    price: Mapped[float]\n\n    item: Mapped[Item] = relationship(lazy=\"joined\")\n\n    def __init__(self, item: Item, price: float | None = None):\n        self.item = item\n        self.price = price or item.price\n\n", "metadata": {"source": "github.com/sqlalchemy/sqlalchemy/examples/association/proxied_association.py", "language": "python", "complexity": "simple", "type": "class", "lines": 17, "methods": 1, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database function that async_main\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def async_main():\n    \"\"\"Main program function.\"\"\"\n\n    engine = create_async_engine(\n        \"postgresql+asyncpg://scott:tiger@localhost/test\",\n        echo=True,\n    )\n\n    async with engine.begin() as conn:\n        await conn.run_sync(Base.metadata.drop_all)\n    async with engine.begin() as conn:\n        await conn.run_sync(Base.metadata.create_all)\n\n    # expire_on_commit=False will prevent attributes from being expired\n    # after commit.\n    async_session = async_sessionmaker(engine, expire_on_commit=False)\n\n    async with async_session() as session:\n        async with session.begin():\n            session.add_all(\n                [\n                    A(bs=[B(), B()], data=\"a1\"),\n                    A(bs=[B()], data=\"a2\"),\n                    A(bs=[B(), B()], data=\"a3\"),\n                ]\n            )\n\n        # for relationship loading, eager loading should be applied.\n        stmt = select(A).options(selectinload(A.bs))\n\n        # AsyncSession.execute() is used for 2.0 style ORM execution\n        # (same as the synchronous API).\n        result = await session.scalars(stmt)\n\n        # result is a buffered Result object.\n        for a1 in result:\n            print(a1)\n            print(f\"created at: {a1.create_date}\")\n            for b1 in a1.bs:\n                print(b1)\n\n        # for streaming ORM results, AsyncSession.stream() may be used.\n        result = await session.stream(stmt)\n\n        # result is a streaming AsyncResult object.\n        async for a1 in result.scalars():\n            print(a1)\n            for b1 in a1.bs:\n                print(b1)\n\n        result = await session.scalars(select(A).order_by(A.id))\n\n        a1 = result.first()\n\n        a1.data = \"new data\"\n\n        await session.commit()\n\n        # use the AsyncAttrs interface to accommodate for a lazy load\n        for b1 in await a1.awaitable_attrs.bs:\n            print(b1)\n\n", "metadata": {"source": "github.com/sqlalchemy/sqlalchemy/examples/asyncio/async_orm.py", "language": "python", "complexity": "complex", "type": "function", "lines": 63, "authentic": true}, "validation": {"overall_quality": 0.9025000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class A(Base):\n    __tablename__ = \"a\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    data: Mapped[Optional[str]]\n    create_date: Mapped[datetime.datetime] = mapped_column(\n        server_default=func.now()\n    )\n    bs: Mapped[List[B]] = relationship()\n\n", "metadata": {"source": "github.com/sqlalchemy/sqlalchemy/examples/asyncio/async_orm.py", "language": "python", "complexity": "simple", "type": "class", "lines": 11, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class B(Base):\n    __tablename__ = \"b\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    a_id: Mapped[int] = mapped_column(ForeignKey(\"a.id\"))\n    data: Mapped[Optional[str]]\n\n", "metadata": {"source": "github.com/sqlalchemy/sqlalchemy/examples/asyncio/async_orm.py", "language": "python", "complexity": "simple", "type": "class", "lines": 7, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database function that async_main\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def async_main():\n    \"\"\"Main program function.\"\"\"\n\n    engine = create_async_engine(\n        \"postgresql+asyncpg://scott:tiger@localhost/test\",\n        echo=True,\n    )\n\n    async with engine.begin() as conn:\n        await conn.run_sync(Base.metadata.drop_all)\n    async with engine.begin() as conn:\n        await conn.run_sync(Base.metadata.create_all)\n\n    async_session = async_sessionmaker(engine, expire_on_commit=False)\n\n    async with async_session() as session:\n        async with session.begin():\n            # WriteOnlyMapped may be populated using any iterable,\n            # e.g. lists, sets, etc.\n            session.add_all(\n                [\n                    A(bs=[B(), B()], data=\"a1\"),\n                    A(bs=[B()], data=\"a2\"),\n                    A(bs=[B(), B()], data=\"a3\"),\n                ]\n            )\n\n        stmt = select(A)\n\n        result = await session.scalars(stmt)\n\n        for a1 in result:\n            print(a1)\n            print(f\"created at: {a1.create_date}\")\n\n            # to iterate a collection, emit a SELECT statement\n            for b1 in await session.scalars(a1.bs.select()):\n                print(b1)\n\n        result = await session.stream(stmt)\n\n        async for a1 in result.scalars():\n            print(a1)\n\n            # similar using \"streaming\" (server side cursors)\n            async for b1 in (await session.stream(a1.bs.select())).scalars():\n                print(b1)\n\n        await session.commit()\n        result = await session.scalars(select(A).order_by(A.id))\n\n        a1 = result.first()\n\n        a1.data = \"new data\"\n\n", "metadata": {"source": "github.com/sqlalchemy/sqlalchemy/examples/asyncio/async_orm_writeonly.py", "language": "python", "complexity": "complex", "type": "function", "lines": 56, "authentic": true}, "validation": {"overall_quality": 0.9025000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class A(Base):\n    __tablename__ = \"a\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    data: Mapped[Optional[str]]\n    create_date: Mapped[datetime.datetime] = mapped_column(\n        server_default=func.now()\n    )\n\n    # collection relationships are declared with WriteOnlyMapped.  There\n    # is no separate collection type\n    bs: WriteOnlyMapped[B] = relationship()\n\n", "metadata": {"source": "github.com/sqlalchemy/sqlalchemy/examples/asyncio/async_orm_writeonly.py", "language": "python", "complexity": "simple", "type": "class", "lines": 14, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class B(Base):\n    __tablename__ = \"b\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    a_id: Mapped[int] = mapped_column(ForeignKey(\"a.id\"))\n    data: Mapped[Optional[str]]\n\n", "metadata": {"source": "github.com/sqlalchemy/sqlalchemy/examples/asyncio/async_orm_writeonly.py", "language": "python", "complexity": "simple", "type": "class", "lines": 7, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database function that async_main\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def async_main():\n    # engine is an instance of AsyncEngine\n    engine = create_async_engine(\n        \"postgresql+asyncpg://scott:tiger@localhost/test\",\n        echo=True,\n    )\n\n    # conn is an instance of AsyncConnection\n    async with engine.begin() as conn:\n        # to support SQLAlchemy DDL methods as well as legacy functions, the\n        # AsyncConnection.run_sync() awaitable method will pass a \"sync\"\n        # version of the AsyncConnection object to any synchronous method,\n        # where synchronous IO calls will be transparently translated for\n        # await.\n        await conn.run_sync(meta.drop_all)\n        await conn.run_sync(meta.create_all)\n\n        # for normal statement execution, a traditional \"await execute()\"\n        # pattern is used.\n        await conn.execute(\n            t1.insert(), [{\"name\": \"some name 1\"}, {\"name\": \"some name 2\"}]\n        )\n\n    async with engine.connect() as conn:\n        # the default result object is the\n        # sqlalchemy.engine.Result object\n        result = await conn.execute(t1.select())\n\n        # the results are buffered so no await call is necessary\n        # for this case.\n        print(result.fetchall())\n\n        # for a streaming result that buffers only segments of the\n        # result at time, the AsyncConnection.stream() method is used.\n        # this returns a sqlalchemy.ext.asyncio.AsyncResult object.\n        async_result = await conn.stream(t1.select())\n\n        # this object supports async iteration and awaitable\n        # versions of methods like .all(), fetchmany(), etc.\n        async for row in async_result:\n            print(row)\n\n", "metadata": {"source": "github.com/sqlalchemy/sqlalchemy/examples/asyncio/basic.py", "language": "python", "complexity": "complex", "type": "function", "lines": 43, "authentic": true}, "validation": {"overall_quality": 0.875, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database function that __repr__\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def __repr__(self):\n        id_, data = self.id, self.data\n        return f\"A({id_=}, {data=})\"\n\n", "metadata": {"source": "github.com/sqlalchemy/sqlalchemy/examples/asyncio/gather_orm_statements.py", "language": "python", "complexity": "simple", "type": "function", "lines": 5, "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database function that run_out_of_band\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def run_out_of_band(async_sessionmaker, statement, merge_results=True):\n    \"\"\"run an ORM statement in a distinct session,\n    returning the frozen results\n    \"\"\"\n\n    async with async_sessionmaker() as oob_session:\n        # use AUTOCOMMIT for each connection to reduce transaction\n        # overhead / contention\n        await oob_session.connection(\n            execution_options={\"isolation_level\": \"AUTOCOMMIT\"}\n        )\n\n        result = await oob_session.execute(statement)\n\n        if merge_results:\n            return result.freeze()\n        else:\n            await result.close()\n\n", "metadata": {"source": "github.com/sqlalchemy/sqlalchemy/examples/asyncio/gather_orm_statements.py", "language": "python", "complexity": "complex", "type": "function", "lines": 20, "authentic": true}, "validation": {"overall_quality": 0.8825000000000002, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database function that async_main\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def async_main():\n    engine = create_async_engine(\n        \"postgresql+asyncpg://scott:tiger@localhost/test\",\n        echo=True,\n    )\n\n    async with engine.begin() as conn:\n        await conn.run_sync(Base.metadata.drop_all)\n        await conn.run_sync(Base.metadata.create_all)\n\n    async_session = async_sessionmaker(engine, expire_on_commit=False)\n\n    async with async_session() as session, session.begin():\n        session.add_all([A(data=\"a_%d\" % i) for i in range(100)])\n\n    statements = [\n        select(A).where(A.data == \"a_%d\" % random.choice(range(100)))\n        for i in range(30)\n    ]\n\n    frozen_results = await asyncio.gather(\n        *(\n            run_out_of_band(async_session, statement)\n            for statement in statements\n        )\n    )\n    results = [\n        # merge_results means the ORM objects from the result\n        # will be merged back into the original session.\n        # load=False means we can use the objects directly without\n        # re-selecting them.  however this merge operation is still\n        # more expensive CPU-wise than a regular ORM load because the\n        # objects are copied into new instances\n        (\n            await session.run_sync(\n                merge_frozen_result, statement, result, load=False\n            )\n        )()\n        for statement, result in zip(statements, frozen_results)\n    ]\n\n    print(f\"results: {[r.all() for r in results]}\")\n\n", "metadata": {"source": "github.com/sqlalchemy/sqlalchemy/examples/asyncio/gather_orm_statements.py", "language": "python", "complexity": "complex", "type": "function", "lines": 44, "authentic": true}, "validation": {"overall_quality": 0.8775000000000002, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 1 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class A(Base):\n    __tablename__ = \"a\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    data: Mapped[str]\n\n    def __repr__(self):\n        id_, data = self.id, self.data\n        return f\"A({id_=}, {data=})\"\n\n", "metadata": {"source": "github.com/sqlalchemy/sqlalchemy/examples/asyncio/gather_orm_statements.py", "language": "python", "complexity": "simple", "type": "class", "lines": 11, "methods": 1, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database function that run_queries\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def run_queries(session):\n    \"\"\"A function written in \"synchronous\" style that will be invoked\n    within the asyncio event loop.\n\n    The session object passed is a traditional orm.Session object with\n    synchronous interface.\n\n    \"\"\"\n\n    stmt = select(A)\n\n    result = session.execute(stmt)\n\n    for a1 in result.scalars():\n        print(a1)\n        # lazy loads\n        for b1 in a1.bs:\n            print(b1)\n\n    result = session.execute(select(A).order_by(A.id))\n\n    a1 = result.scalars().first()\n\n    a1.data = \"new data\"\n\n", "metadata": {"source": "github.com/sqlalchemy/sqlalchemy/examples/asyncio/greenlet_orm.py", "language": "python", "complexity": "simple", "type": "function", "lines": 26, "authentic": true}, "validation": {"overall_quality": 0.8700000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database function that async_main\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def async_main():\n    \"\"\"Main program function.\"\"\"\n\n    engine = create_async_engine(\n        \"postgresql+asyncpg://scott:tiger@localhost/test\",\n        echo=True,\n    )\n    async with engine.begin() as conn:\n        await conn.run_sync(Base.metadata.drop_all)\n        await conn.run_sync(Base.metadata.create_all)\n\n    async with AsyncSession(engine) as session:\n        async with session.begin():\n            session.add_all(\n                [\n                    A(bs=[B(), B()], data=\"a1\"),\n                    A(bs=[B()], data=\"a2\"),\n                    A(bs=[B(), B()], data=\"a3\"),\n                ]\n            )\n\n        # we have the option to run a function written in sync style\n        # within the AsyncSession.run_sync() method.  The function will\n        # be passed a synchronous-style Session object and the function\n        # can use traditional ORM patterns.\n        await session.run_sync(run_queries)\n\n        await session.commit()\n\n", "metadata": {"source": "github.com/sqlalchemy/sqlalchemy/examples/asyncio/greenlet_orm.py", "language": "python", "complexity": "complex", "type": "function", "lines": 30, "authentic": true}, "validation": {"overall_quality": 0.8875000000000002, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class A(Base):\n    __tablename__ = \"a\"\n\n    id = Column(Integer, primary_key=True)\n    data = Column(String)\n    bs = relationship(\"B\")\n\n", "metadata": {"source": "github.com/sqlalchemy/sqlalchemy/examples/asyncio/greenlet_orm.py", "language": "python", "complexity": "simple", "type": "class", "lines": 8, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class B(Base):\n    __tablename__ = \"b\"\n    id = Column(Integer, primary_key=True)\n    a_id = Column(ForeignKey(\"a.id\"))\n    data = Column(String)\n\n", "metadata": {"source": "github.com/sqlalchemy/sqlalchemy/examples/asyncio/greenlet_orm.py", "language": "python", "complexity": "simple", "type": "class", "lines": 7, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database function that configure_listener\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def configure_listener(mapper, class_):\n    \"\"\"Establish attribute setters for every default-holding column on the\n    given mapper.\"\"\"\n\n    # iterate through ColumnProperty objects\n    for col_attr in mapper.column_attrs:\n        # look at the Column mapped by the ColumnProperty\n        # (we look at the first column in the less common case\n        # of a property mapped to multiple columns at once)\n        column = col_attr.columns[0]\n\n        # if the Column has a \"default\", set up a listener\n        if column.default is not None:\n            default_listener(col_attr, column.default)\n\n", "metadata": {"source": "github.com/sqlalchemy/sqlalchemy/examples/custom_attributes/active_column_defaults.py", "language": "python", "complexity": "medium", "type": "function", "lines": 16, "authentic": true}, "validation": {"overall_quality": 0.8700000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database function that default_listener\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def default_listener(col_attr, default):\n    \"\"\"Establish a default-setting listener.\n\n    Given a class attribute and a :class:`.DefaultGenerator` instance.\n    The default generator should be a :class:`.ColumnDefault` object with a\n    plain Python value or callable default; otherwise, the appropriate behavior\n    for SQL functions and defaults should be determined here by the\n    user integrating this feature.\n\n    \"\"\"\n\n    @event.listens_for(col_attr, \"init_scalar\", retval=True, propagate=True)\n    def init_scalar(target, value, dict_):\n        if default.is_callable:\n            # the callable of ColumnDefault always accepts a context\n            # argument; we can pass it as None here.\n            value = default.arg(None)\n        elif default.is_scalar:\n            value = default.arg\n        else:\n            # default is a Sequence, a SQL expression, server\n            # side default generator, or other non-Python-evaluable\n            # object.  The feature here can't easily support this.   This\n            # can be made to return None, rather than raising,\n            # or can procure a connection from an Engine\n            # or Session and actually run the SQL, if desired.\n            raise NotImplementedError(\n                \"Can't invoke pre-default for a SQL-level column default\"\n            )\n\n        # set the value in the given dict_; this won't emit any further\n        # attribute set events or create attribute \"history\", but the value\n        # will be used in the INSERT statement\n        dict_[col_attr.key] = value\n\n        # return the value as well\n        return value\n\n", "metadata": {"source": "github.com/sqlalchemy/sqlalchemy/examples/custom_attributes/active_column_defaults.py", "language": "python", "complexity": "complex", "type": "function", "lines": 39, "authentic": true}, "validation": {"overall_quality": 0.8775, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 1 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class MyClassState(InstrumentationManager):\n    def get_instance_dict(self, class_, instance):\n        return instance._goofy_dict\n\n    def initialize_instance_dict(self, class_, instance):\n        instance.__dict__[\"_goofy_dict\"] = {}\n\n    def install_state(self, class_, instance, state):\n        instance.__dict__[\"_goofy_dict\"][\"state\"] = state\n\n    def state_getter(self, class_):\n        def find(instance):\n            return instance.__dict__[\"_goofy_dict\"][\"state\"]\n\n        return find\n\n", "metadata": {"source": "github.com/sqlalchemy/sqlalchemy/examples/custom_attributes/custom_management.py", "language": "python", "complexity": "simple", "type": "class", "lines": 17, "methods": 1, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 1 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class MyClass:\n    __sa_instrumentation_manager__ = MyClassState\n\n    def __init__(self, **kwargs):\n        for k in kwargs:\n            setattr(self, k, kwargs[k])\n\n    def __getattr__(self, key):\n        if is_instrumented(self, key):\n            return get_attribute(self, key)\n        else:\n            try:\n                return self._goofy_dict[key]\n            except KeyError:\n                raise AttributeError(key)\n\n    def __setattr__(self, key, value):\n        if is_instrumented(self, key):\n            set_attribute(self, key, value)\n        else:\n            self._goofy_dict[key] = value\n\n    def __delattr__(self, key):\n        if is_instrumented(self, key):\n            del_attribute(self, key)\n        else:\n            del self._goofy_dict[key]\n\n", "metadata": {"source": "github.com/sqlalchemy/sqlalchemy/examples/custom_attributes/custom_management.py", "language": "python", "complexity": "medium", "type": "class", "lines": 29, "methods": 1, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database function that configure_listener\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def configure_listener(class_, key, inst):\n    def append(instance, value, initiator):\n        instance.receive_change_event(\"append\", key, value, None)\n\n    def remove(instance, value, initiator):\n        instance.receive_change_event(\"remove\", key, value, None)\n\n    def set_(instance, value, oldvalue, initiator):\n        instance.receive_change_event(\"set\", key, value, oldvalue)\n\n    event.listen(inst, \"append\", append)\n    event.listen(inst, \"remove\", remove)\n    event.listen(inst, \"set\", set_)\n\n", "metadata": {"source": "github.com/sqlalchemy/sqlalchemy/examples/custom_attributes/listen_for_events.py", "language": "python", "complexity": "simple", "type": "function", "lines": 15, "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database function that load_name_range\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def load_name_range(start, end, invalidate=False):\n    \"\"\"Load Person objects on a range of names.\n\n    start/end are integers, range is then\n    \"person <start>\" - \"person <end>\".\n\n    The cache option we set up is called \"name_range\", indicating\n    a range of names for the Person class.\n\n    The `Person.addresses` collections are also cached.  Its basically\n    another level of tuning here, as that particular cache option\n    can be transparently replaced with joinedload(Person.addresses).\n    The effect is that each Person and their Address collection\n    is cached either together or separately, affecting the kind of\n    SQL that emits for unloaded Person objects as well as the distribution\n    of data within the cache.\n    \"\"\"\n    q = (\n        select(Person)\n        .filter(\n            Person.name.between(\"person %.2d\" % start, \"person %.2d\" % end)\n        )\n        .options(cache_address_bits)\n        .options(FromCache(\"default\", \"name_range\"))\n    )\n\n    # have the \"addresses\" collection cached separately\n    # each lazyload of Person.addresses loads from cache.\n    q = q.options(RelationshipCache(Person.addresses, \"default\"))\n\n    # alternatively, eagerly load the \"addresses\" collection, so that they'd\n    # be cached together.   This issues a bigger SQL statement and caches\n    # a single, larger value in the cache per person rather than two\n    # separate ones.\n    # q = q.options(joinedload(Person.addresses))\n\n    # if requested, invalidate the cache on current criterion.\n    if invalidate:\n        cache.invalidate(q, {}, FromCache(\"default\", \"name_range\"))\n        cache.invalidate(q, {}, RelationshipCache(Person.addresses, \"default\"))\n\n    return Session.scalars(q).all()\n\n", "metadata": {"source": "github.com/sqlalchemy/sqlalchemy/examples/dogpile_caching/advanced.py", "language": "python", "complexity": "medium", "type": "function", "lines": 44, "authentic": true}, "validation": {"overall_quality": 0.88, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 1 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class ORMCache:\n    \"\"\"An add-on for an ORM :class:`.Session` optionally loads full results\n    from a dogpile cache region.\n\n\n    \"\"\"\n\n    def __init__(self, regions):\n        self.cache_regions = regions\n        self._statement_cache = {}\n\n    def listen_on_session(self, session_factory):\n        event.listen(session_factory, \"do_orm_execute\", self._do_orm_execute)\n\n    def _do_orm_execute(self, orm_context):\n        for opt in orm_context.user_defined_options:\n            if isinstance(opt, RelationshipCache):\n                opt = opt._process_orm_context(orm_context)\n                if opt is None:\n                    continue\n\n            if isinstance(opt, FromCache):\n                dogpile_region = self.cache_regions[opt.region]\n\n                our_cache_key = opt._generate_cache_key(\n                    orm_context.statement, orm_context.parameters or {}, self\n                )\n\n                if opt.ignore_expiration:\n                    cached_value = dogpile_region.get(\n                        our_cache_key,\n                        expiration_time=opt.expiration_time,\n                        ignore_expiration=opt.ignore_expiration,\n                    )\n                else:\n\n                    def createfunc():\n                        return orm_context.invoke_statement().freeze()\n\n                    cached_value = dogpile_region.get_or_create(\n                        our_cache_key,\n                        createfunc,\n                        expiration_time=opt.expiration_time,\n                    )\n\n                if cached_value is NO_VALUE:\n                    # keyerror?   this is bigger than a keyerror...\n                    raise KeyError()\n\n                orm_result = loading.merge_frozen_result(\n                    orm_context.session,\n                    orm_context.statement,\n                    cached_value,\n                    load=False,\n                )\n                return orm_result()\n\n        else:\n            return None\n\n    def invalidate(self, statement, parameters, opt):\n        \"\"\"Invalidate the cache value represented by a statement.\"\"\"\n\n        if isinstance(statement, Query):\n            statement = statement.__clause_element__()\n\n        dogpile_region = self.cache_regions[opt.region]\n\n        cache_key = opt._generate_cache_key(statement, parameters, self)\n\n        dogpile_region.delete(cache_key)\n\n", "metadata": {"source": "github.com/sqlalchemy/sqlalchemy/examples/dogpile_caching/caching_query.py", "language": "python", "complexity": "medium", "type": "class", "lines": 73, "methods": 1, "authentic": true}, "validation": {"overall_quality": 0.8475000000000001, "syntax_valid": true, "completeness_score": 0.8500000000000001, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 1 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class FromCache(UserDefinedOption):\n    \"\"\"Specifies that a Query should load results from a cache.\"\"\"\n\n    propagate_to_loaders = False\n\n    def __init__(\n        self,\n        region=\"default\",\n        cache_key=None,\n        expiration_time=None,\n        ignore_expiration=False,\n    ):\n        \"\"\"Construct a new FromCache.\n\n        :param region: the cache region.  Should be a\n         region configured in the dictionary of dogpile\n         regions.\n\n        :param cache_key: optional.  A string cache key\n         that will serve as the key to the query.   Use this\n         if your query has a huge amount of parameters (such\n         as when using in_()) which correspond more simply to\n         some other identifier.\n\n        \"\"\"\n        self.region = region\n        self.cache_key = cache_key\n        self.expiration_time = expiration_time\n        self.ignore_expiration = ignore_expiration\n\n    # this is not needed as of SQLAlchemy 1.4.28;\n    # UserDefinedOption classes no longer participate in the SQL\n    # compilation cache key\n    def _gen_cache_key(self, anon_map, bindparams):\n        return None\n\n    def _generate_cache_key(self, statement, parameters, orm_cache):\n        \"\"\"generate a cache key with which to key the results of a statement.\n\n        This leverages the use of the SQL compilation cache key which is\n        repurposed as a SQL results key.\n\n        \"\"\"\n        statement_cache_key = statement._generate_cache_key()\n\n        key = statement_cache_key.to_offline_string(\n            orm_cache._statement_cache, statement, parameters\n        ) + repr(self.cache_key)\n        # print(\"here's our key...%s\" % key)\n        return key\n\n", "metadata": {"source": "github.com/sqlalchemy/sqlalchemy/examples/dogpile_caching/caching_query.py", "language": "python", "complexity": "simple", "type": "class", "lines": 52, "methods": 1, "authentic": true}, "validation": {"overall_quality": 0.8375000000000001, "syntax_valid": true, "completeness_score": 0.8, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 1 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class RelationshipCache(FromCache):\n    \"\"\"Specifies that a Query as called within a \"lazy load\"\n    should load results from a cache.\"\"\"\n\n    propagate_to_loaders = True\n\n    def __init__(\n        self,\n        attribute,\n        region=\"default\",\n        cache_key=None,\n        expiration_time=None,\n        ignore_expiration=False,\n    ):\n        \"\"\"Construct a new RelationshipCache.\n\n        :param attribute: A Class.attribute which\n         indicates a particular class relationship() whose\n         lazy loader should be pulled from the cache.\n\n        :param region: name of the cache region.\n\n        :param cache_key: optional.  A string cache key\n         that will serve as the key to the query, bypassing\n         the usual means of forming a key from the Query itself.\n\n        \"\"\"\n        self.region = region\n        self.cache_key = cache_key\n        self.expiration_time = expiration_time\n        self.ignore_expiration = ignore_expiration\n        self._relationship_options = {\n            (attribute.property.parent.class_, attribute.property.key): self\n        }\n\n    def _process_orm_context(self, orm_context):\n        current_path = orm_context.loader_strategy_path\n\n        if current_path:\n            mapper, prop = current_path[-2:]\n            key = prop.key\n\n            for cls in mapper.class_.__mro__:\n                if (cls, key) in self._relationship_options:\n                    relationship_option = self._relationship_options[\n                        (cls, key)\n                    ]\n                    return relationship_option\n\n    def and_(self, option):\n        \"\"\"Chain another RelationshipCache option to this one.\n\n        While many RelationshipCache objects can be specified on a single\n        Query separately, chaining them together allows for a more efficient\n        lookup during load.\n\n        \"\"\"\n        self._relationship_options.update(option._relationship_options)\n        return self\n", "metadata": {"source": "github.com/sqlalchemy/sqlalchemy/examples/dogpile_caching/caching_query.py", "language": "python", "complexity": "medium", "type": "class", "lines": 60, "methods": 1, "authentic": true}, "validation": {"overall_quality": 0.8775, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 1 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class AbsoluteUrlOverrideTests(SimpleTestCase):\n    def test_get_absolute_url(self):\n        \"\"\"\n        get_absolute_url() functions as a normal method.\n        \"\"\"\n\n        def get_absolute_url(o):\n            return \"/test-a/%s/\" % o.pk\n\n        TestA = self._create_model_class(\"TestA\", get_absolute_url)\n\n        self.assertTrue(hasattr(TestA, \"get_absolute_url\"))\n        obj = TestA(pk=1, name=\"Foo\")\n        self.assertEqual(\"/test-a/%s/\" % obj.pk, obj.get_absolute_url())\n\n    def test_override_get_absolute_url(self):\n        \"\"\"\n        ABSOLUTE_URL_OVERRIDES should override get_absolute_url().\n        \"\"\"\n\n        def get_absolute_url(o):\n            return \"/test-b/%s/\" % o.pk\n\n        with self.settings(\n            ABSOLUTE_URL_OVERRIDES={\n                \"absolute_url_overrides.testb\": lambda o: \"/overridden-test-b/%s/\"\n                % o.pk,\n            },\n        ):\n            TestB = self._create_model_class(\"TestB\", get_absolute_url)\n            obj = TestB(pk=1, name=\"Foo\")\n            self.assertEqual(\"/overridden-test-b/%s/\" % obj.pk, obj.get_absolute_url())\n\n    def test_insert_get_absolute_url(self):\n        \"\"\"\n        ABSOLUTE_URL_OVERRIDES should work even if the model doesn't have a\n        get_absolute_url() method.\n        \"\"\"\n        with self.settings(\n            ABSOLUTE_URL_OVERRIDES={\n                \"absolute_url_overrides.testc\": lambda o: \"/test-c/%s/\" % o.pk,\n            },\n        ):\n            TestC = self._create_model_class(\"TestC\")\n            obj = TestC(pk=1, name=\"Foo\")\n            self.assertEqual(\"/test-c/%s/\" % obj.pk, obj.get_absolute_url())\n\n    def _create_model_class(self, class_name, get_absolute_url_method=None):\n        attrs = {\n            \"name\": models.CharField(max_length=50),\n            \"__module__\": \"absolute_url_overrides\",\n        }\n        if get_absolute_url_method:\n            attrs[\"get_absolute_url\"] = get_absolute_url_method\n\n        return type(class_name, (models.Model,), attrs)\n", "metadata": {"source": "github.com/django/django/tests/absolute_url_overrides/tests.py", "language": "python", "complexity": "complex", "type": "class", "lines": 57, "methods": 1, "authentic": true}, "validation": {"overall_quality": 0.885, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.9}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database function that test_double_call_autodiscover\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def test_double_call_autodiscover(self):\n        # The first time autodiscover is called, we should get our real error.\n        with self.assertRaisesMessage(Exception, \"Bad admin module\"):\n            admin.autodiscover()\n        # Calling autodiscover again should raise the very same error it did\n        # the first time, not an AlreadyRegistered error.\n        with self.assertRaisesMessage(Exception, \"Bad admin module\"):\n            admin.autodiscover()\n", "metadata": {"source": "github.com/django/django/tests/admin_autodiscover/tests.py", "language": "python", "complexity": "complex", "type": "function", "lines": 9, "authentic": true}, "validation": {"overall_quality": 0.8775, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 1 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class AdminAutoDiscoverTests(SimpleTestCase):\n    \"\"\"\n    Test for bug #8245 - don't raise an AlreadyRegistered exception when using\n    autodiscover() and an admin.py module contains an error.\n    \"\"\"\n\n    def test_double_call_autodiscover(self):\n        # The first time autodiscover is called, we should get our real error.\n        with self.assertRaisesMessage(Exception, \"Bad admin module\"):\n            admin.autodiscover()\n        # Calling autodiscover again should raise the very same error it did\n        # the first time, not an AlreadyRegistered error.\n        with self.assertRaisesMessage(Exception, \"Bad admin module\"):\n            admin.autodiscover()\n", "metadata": {"source": "github.com/django/django/tests/admin_autodiscover/tests.py", "language": "python", "complexity": "complex", "type": "class", "lines": 15, "methods": 1, "authentic": true}, "validation": {"overall_quality": 0.855, "syntax_valid": true, "completeness_score": 0.8500000000000001, "authenticity_score": 0.9}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database function that __init__\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def __init__(self, queryset, page_size, orphans=0, allow_empty_first_page=True):\n        super().__init__(\n            queryset, 5, orphans=2, allow_empty_first_page=allow_empty_first_page\n        )\n\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/admin.py", "language": "python", "complexity": "simple", "type": "function", "lines": 6, "authentic": true}, "validation": {"overall_quality": 0.8700000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database function that get_queryset\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def get_queryset(self, request):\n        return super().get_queryset(request).select_related(\"parent\")\n\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/admin.py", "language": "python", "complexity": "simple", "type": "function", "lines": 4, "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database function that get_queryset\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def get_queryset(self, request):\n        return super().get_queryset(request).filter(name__contains=\"filtered\")\n\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/admin.py", "language": "python", "complexity": "simple", "type": "function", "lines": 4, "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database function that get_list_display\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def get_list_display(self, request):\n        my_list_display = super().get_list_display(request)\n        if request.user.username == \"noparents\":\n            my_list_display = list(my_list_display)\n            my_list_display.remove(\"parent\")\n        return my_list_display\n\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/admin.py", "language": "python", "complexity": "simple", "type": "function", "lines": 8, "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database function that get_list_display_links\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def get_list_display_links(self, request, list_display):\n        return [\"age\"]\n\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/admin.py", "language": "python", "complexity": "simple", "type": "function", "lines": 4, "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database function that get_list_filter\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def get_list_filter(self, request):\n        my_list_filter = super().get_list_filter(request)\n        if request.user.username == \"noparents\":\n            my_list_filter = list(my_list_filter)\n            my_list_filter.remove(\"parent\")\n        return my_list_filter\n\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/admin.py", "language": "python", "complexity": "simple", "type": "function", "lines": 8, "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database function that get_search_fields\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def get_search_fields(self, request):\n        search_fields = super().get_search_fields(request)\n        search_fields += (\"age\",)\n        return search_fields\n\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/admin.py", "language": "python", "complexity": "simple", "type": "function", "lines": 6, "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database function that age_display\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def age_display(self, obj):\n        return obj.age\n\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/admin.py", "language": "python", "complexity": "simple", "type": "function", "lines": 4, "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 1 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class CustomPaginator(Paginator):\n    def __init__(self, queryset, page_size, orphans=0, allow_empty_first_page=True):\n        super().__init__(\n            queryset, 5, orphans=2, allow_empty_first_page=allow_empty_first_page\n        )\n\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/admin.py", "language": "python", "complexity": "simple", "type": "class", "lines": 7, "methods": 1, "authentic": true}, "validation": {"overall_quality": 0.8775, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 1 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class EventAdmin(admin.ModelAdmin):\n    date_hierarchy = \"date\"\n    list_display = [\"event_date_func\"]\n\n    @admin.display\n    def event_date_func(self, event):\n        return event.date\n\n    def has_add_permission(self, request):\n        return False\n\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/admin.py", "language": "python", "complexity": "simple", "type": "class", "lines": 12, "methods": 1, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class ParentAdmin(admin.ModelAdmin):\n    list_filter = [\"child__name\"]\n    search_fields = [\"child__name\"]\n    list_select_related = [\"child\"]\n\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/admin.py", "language": "python", "complexity": "simple", "type": "class", "lines": 6, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class ParentAdminTwoSearchFields(admin.ModelAdmin):\n    list_filter = [\"child__name\"]\n    search_fields = [\"child__name\", \"child__age\"]\n    list_select_related = [\"child\"]\n\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/admin.py", "language": "python", "complexity": "simple", "type": "class", "lines": 6, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 1 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class ChildAdmin(admin.ModelAdmin):\n    list_display = [\"name\", \"parent\"]\n    list_per_page = 10\n    list_filter = [\"parent\", \"age\"]\n    search_fields = [\"age__exact\", \"name__exact\"]\n\n    def get_queryset(self, request):\n        return super().get_queryset(request).select_related(\"parent\")\n\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/admin.py", "language": "python", "complexity": "simple", "type": "class", "lines": 10, "methods": 1, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class GrandChildAdmin(admin.ModelAdmin):\n    list_display = [\"name\", \"parent__name\", \"parent__parent__name\"]\n    search_fields = [\"parent__name__exact\", \"parent__age__exact\"]\n\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/admin.py", "language": "python", "complexity": "simple", "type": "class", "lines": 5, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 1 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class FilteredChildAdmin(admin.ModelAdmin):\n    list_display = [\"name\", \"parent\"]\n    list_per_page = 10\n\n    def get_queryset(self, request):\n        return super().get_queryset(request).filter(name__contains=\"filtered\")\n\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/admin.py", "language": "python", "complexity": "simple", "type": "class", "lines": 8, "methods": 1, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 1 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class NrOfMembersFilter(admin.SimpleListFilter):\n    title = \"number of members\"\n    parameter_name = \"nr_of_members_partition\"\n\n    def lookups(self, request, model_admin):\n        return [\n            (\"5\", \"0 - 5\"),\n            (\"more\", \"more than 5\"),\n        ]\n\n    def queryset(self, request, queryset):\n        value = self.value()\n        if value == \"5\":\n            return queryset.filter(nr_of_members__lte=5)\n        if value == \"more\":\n            return queryset.filter(nr_of_members__gt=5)\n\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/admin.py", "language": "python", "complexity": "simple", "type": "class", "lines": 18, "methods": 1, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class ConcertAdmin(admin.ModelAdmin):\n    list_filter = [\"group__members\"]\n    search_fields = [\"group__members__name\"]\n\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/admin.py", "language": "python", "complexity": "simple", "type": "class", "lines": 5, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class InvitationAdmin(admin.ModelAdmin):\n    list_display = (\"band\", \"player\")\n    list_select_related = (\"player\",)\n\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/admin.py", "language": "python", "complexity": "simple", "type": "class", "lines": 5, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 1 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class DynamicListDisplayChildAdmin(admin.ModelAdmin):\n    list_display = (\"parent\", \"name\", \"age\")\n\n    def get_list_display(self, request):\n        my_list_display = super().get_list_display(request)\n        if request.user.username == \"noparents\":\n            my_list_display = list(my_list_display)\n            my_list_display.remove(\"parent\")\n        return my_list_display\n\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/admin.py", "language": "python", "complexity": "simple", "type": "class", "lines": 11, "methods": 1, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 1 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class DynamicListDisplayLinksChildAdmin(admin.ModelAdmin):\n    list_display = (\"parent\", \"name\", \"age\")\n    list_display_links = [\"parent\", \"name\"]\n\n    def get_list_display_links(self, request, list_display):\n        return [\"age\"]\n\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/admin.py", "language": "python", "complexity": "simple", "type": "class", "lines": 8, "methods": 1, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class NoListDisplayLinksParentAdmin(admin.ModelAdmin):\n    list_display_links = None\n    list_display = [\"name\"]\n    list_editable = [\"name\"]\n    actions_on_bottom = True\n\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/admin.py", "language": "python", "complexity": "simple", "type": "class", "lines": 7, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class ListDisplayLinksGenreAdmin(admin.ModelAdmin):\n    list_display = [\"name\", \"file\", \"url\"]\n    list_display_links = [\"file\", \"url\"]\n\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/admin.py", "language": "python", "complexity": "simple", "type": "class", "lines": 5, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class SwallowAdmin(admin.ModelAdmin):\n    actions = None  # prevent ['action_checkbox'] + list(list_display)\n    list_display = (\"origin\", \"load\", \"speed\", \"swallowonetoone\")\n    list_editable = [\"load\", \"speed\"]\n    list_per_page = 3\n\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/admin.py", "language": "python", "complexity": "simple", "type": "class", "lines": 7, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 1 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class DynamicListFilterChildAdmin(admin.ModelAdmin):\n    list_filter = (\"parent\", \"name\", \"age\")\n\n    def get_list_filter(self, request):\n        my_list_filter = super().get_list_filter(request)\n        if request.user.username == \"noparents\":\n            my_list_filter = list(my_list_filter)\n            my_list_filter.remove(\"parent\")\n        return my_list_filter\n\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/admin.py", "language": "python", "complexity": "simple", "type": "class", "lines": 11, "methods": 1, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 1 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class DynamicSearchFieldsChildAdmin(admin.ModelAdmin):\n    search_fields = (\"name\",)\n\n    def get_search_fields(self, request):\n        search_fields = super().get_search_fields(request)\n        search_fields += (\"age\",)\n        return search_fields\n\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/admin.py", "language": "python", "complexity": "simple", "type": "class", "lines": 9, "methods": 1, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 1 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class EmptyValueChildAdmin(admin.ModelAdmin):\n    empty_value_display = \"-empty-\"\n    list_display = (\"name\", \"age_display\", \"age\")\n\n    @admin.display(empty_value=\"&dagger;\")\n    def age_display(self, obj):\n        return obj.age\n\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/admin.py", "language": "python", "complexity": "simple", "type": "class", "lines": 9, "methods": 1, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 1 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class UnescapedTitleFilter(admin.SimpleListFilter):\n    title = \"It's OK\"\n    parameter_name = \"is_active\"\n\n    def lookups(self, request, model_admin):\n        return [(\"yes\", \"yes\"), (\"no\", \"no\")]\n\n    def queryset(self, request, queryset):\n        if self.value() == \"yes\":\n            return queryset.filter(is_active=True)\n        else:\n            return queryset.filter(is_active=False)\n\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/admin.py", "language": "python", "complexity": "simple", "type": "class", "lines": 14, "methods": 1, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database function that __str__\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def __str__(self):\n        return self.name\n\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/models.py", "language": "python", "complexity": "simple", "type": "function", "lines": 4, "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database function that __str__\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def __str__(self):\n        return self.name\n\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/models.py", "language": "python", "complexity": "simple", "type": "function", "lines": 4, "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database function that get_queryset\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def get_queryset(self):\n        return super().get_queryset().order_by(\"number\")\n\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/models.py", "language": "python", "complexity": "simple", "type": "function", "lines": 4, "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class Event(models.Model):\n    # Oracle can have problems with a column named \"date\"\n    date = models.DateField(db_column=\"event_date\")\n\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/models.py", "language": "python", "complexity": "simple", "type": "class", "lines": 5, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class Child(models.Model):\n    parent = models.ForeignKey(Parent, models.SET_NULL, editable=False, null=True)\n    name = models.CharField(max_length=30, blank=True)\n    age = models.IntegerField(null=True, blank=True)\n\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/models.py", "language": "python", "complexity": "simple", "type": "class", "lines": 6, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 1 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class GrandChild(models.Model):\n    parent = models.ForeignKey(Child, models.SET_NULL, editable=False, null=True)\n    name = models.CharField(max_length=30, blank=True)\n\n    def __str__(self):\n        return self.name\n\n    def __html__(self):\n        return f'<h2 class=\"main\">{self.name}</h2>'\n\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/models.py", "language": "python", "complexity": "simple", "type": "class", "lines": 11, "methods": 1, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class Genre(models.Model):\n    name = models.CharField(max_length=20)\n    file = models.FileField(upload_to=\"documents/\", blank=True, null=True)\n    url = models.URLField(blank=True, null=True)\n\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/models.py", "language": "python", "complexity": "simple", "type": "class", "lines": 6, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class Band(models.Model):\n    name = models.CharField(max_length=20)\n    nr_of_members = models.PositiveIntegerField()\n    genres = models.ManyToManyField(Genre)\n\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/models.py", "language": "python", "complexity": "simple", "type": "class", "lines": 6, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 1 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class Musician(models.Model):\n    name = models.CharField(max_length=30)\n    age = models.IntegerField(null=True, blank=True)\n\n    def __str__(self):\n        return self.name\n\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/models.py", "language": "python", "complexity": "simple", "type": "class", "lines": 8, "methods": 1, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 1 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class Group(models.Model):\n    name = models.CharField(max_length=30)\n    members = models.ManyToManyField(Musician, through=\"Membership\")\n\n    def __str__(self):\n        return self.name\n\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/models.py", "language": "python", "complexity": "simple", "type": "class", "lines": 8, "methods": 1, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class Concert(models.Model):\n    name = models.CharField(max_length=30)\n    group = models.ForeignKey(Group, models.CASCADE)\n\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/models.py", "language": "python", "complexity": "simple", "type": "class", "lines": 5, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class Membership(models.Model):\n    music = models.ForeignKey(Musician, models.CASCADE)\n    group = models.ForeignKey(Group, models.CASCADE)\n    role = models.CharField(max_length=15)\n\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/models.py", "language": "python", "complexity": "simple", "type": "class", "lines": 6, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class ChordsBand(models.Model):\n    name = models.CharField(max_length=30)\n    members = models.ManyToManyField(ChordsMusician, through=\"Invitation\")\n\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/models.py", "language": "python", "complexity": "simple", "type": "class", "lines": 5, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class Invitation(models.Model):\n    player = models.ForeignKey(ChordsMusician, models.CASCADE)\n    band = models.ForeignKey(ChordsBand, models.CASCADE)\n    instrument = models.CharField(max_length=15)\n\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/models.py", "language": "python", "complexity": "simple", "type": "class", "lines": 6, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class Swallow(models.Model):\n    uuid = models.UUIDField(primary_key=True, default=uuid.uuid4)\n    origin = models.CharField(max_length=255)\n    load = models.FloatField()\n    speed = models.FloatField()\n\n    class Meta:\n        ordering = (\"speed\", \"load\")\n\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/models.py", "language": "python", "complexity": "simple", "type": "class", "lines": 10, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class UnorderedObject(models.Model):\n    \"\"\"\n    Model without any defined `Meta.ordering`.\n    Refs #17198.\n    \"\"\"\n\n    bool = models.BooleanField(default=True)\n\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/models.py", "language": "python", "complexity": "simple", "type": "class", "lines": 9, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 1 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class OrderedObjectManager(models.Manager):\n    def get_queryset(self):\n        return super().get_queryset().order_by(\"number\")\n\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/models.py", "language": "python", "complexity": "simple", "type": "class", "lines": 5, "methods": 1, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class OrderedObject(models.Model):\n    \"\"\"\n    Model with Manager that defines a default order.\n    Refs #17198.\n    \"\"\"\n\n    name = models.CharField(max_length=255)\n    bool = models.BooleanField(default=True)\n    number = models.IntegerField(default=0, db_column=\"number_val\")\n\n    objects = OrderedObjectManager()\n\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/models.py", "language": "python", "complexity": "simple", "type": "class", "lines": 13, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 1 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class DateHierarchyTests(TestCase):\n    factory = RequestFactory()\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create_superuser(\n            username=\"super\", email=\"a@b.com\", password=\"xxx\"\n        )\n\n    def assertDateParams(self, query, expected_from_date, expected_to_date):\n        query = {\"date__%s\" % field: val for field, val in query.items()}\n        request = self.factory.get(\"/\", query)\n        request.user = self.superuser\n        changelist = EventAdmin(Event, custom_site).get_changelist_instance(request)\n        _, _, lookup_params, *_ = changelist.get_filters(request)\n        self.assertEqual(lookup_params[\"date__gte\"], [expected_from_date])\n        self.assertEqual(lookup_params[\"date__lt\"], [expected_to_date])\n\n    def test_bounded_params(self):\n        tests = (\n            ({\"year\": 2017}, datetime(2017, 1, 1), datetime(2018, 1, 1)),\n            ({\"year\": 2017, \"month\": 2}, datetime(2017, 2, 1), datetime(2017, 3, 1)),\n            ({\"year\": 2017, \"month\": 12}, datetime(2017, 12, 1), datetime(2018, 1, 1)),\n            (\n                {\"year\": 2017, \"month\": 12, \"day\": 15},\n                datetime(2017, 12, 15),\n                datetime(2017, 12, 16),\n            ),\n            (\n                {\"year\": 2017, \"month\": 12, \"day\": 31},\n                datetime(2017, 12, 31),\n                datetime(2018, 1, 1),\n            ),\n            (\n                {\"year\": 2017, \"month\": 2, \"day\": 28},\n                datetime(2017, 2, 28),\n                datetime(2017, 3, 1),\n            ),\n        )\n        for query, expected_from_date, expected_to_date in tests:\n            with self.subTest(query=query):\n                self.assertDateParams(query, expected_from_date, expected_to_date)\n\n    def test_bounded_params_with_time_zone(self):\n        with self.settings(USE_TZ=True, TIME_ZONE=\"Asia/Jerusalem\"):\n            self.assertDateParams(\n                {\"year\": 2017, \"month\": 2, \"day\": 28},\n                make_aware(datetime(2017, 2, 28)),\n                make_aware(datetime(2017, 3, 1)),\n            )\n\n    def test_bounded_params_with_dst_time_zone(self):\n        tests = [\n            # Northern hemisphere.\n            (\"Asia/Jerusalem\", 3),\n            (\"Asia/Jerusalem\", 10),\n            # Southern hemisphere.\n            (\"Pacific/Chatham\", 4),\n            (\"Pacific/Chatham\", 9),\n        ]\n        for time_zone, month in tests:\n            with self.subTest(time_zone=time_zone, month=month):\n                with self.settings(USE_TZ=True, TIME_ZONE=time_zone):\n                    self.assertDateParams(\n                        {\"year\": 2019, \"month\": month},\n                        make_aware(datetime(2019, month, 1)),\n                        make_aware(datetime(2019, month + 1, 1)),\n                    )\n\n    def test_invalid_params(self):\n        tests = (\n            {\"year\": \"x\"},\n            {\"year\": 2017, \"month\": \"x\"},\n            {\"year\": 2017, \"month\": 12, \"day\": \"x\"},\n            {\"year\": 2017, \"month\": 13},\n            {\"year\": 2017, \"month\": 12, \"day\": 32},\n            {\"year\": 2017, \"month\": 0},\n            {\"year\": 2017, \"month\": 12, \"day\": 0},\n        )\n        for invalid_query in tests:\n            with (\n                self.subTest(query=invalid_query),\n                self.assertRaises(IncorrectLookupParameters),\n            ):\n                self.assertDateParams(invalid_query, None, None)\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/test_date_hierarchy.py", "language": "python", "complexity": "complex", "type": "class", "lines": 86, "methods": 1, "authentic": true}, "validation": {"overall_quality": 0.815, "syntax_valid": true, "completeness_score": 0.8, "authenticity_score": 0.9}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 1 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class ChangeListTests(TestCase):\n    factory = RequestFactory()\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create_superuser(\n            username=\"super\", email=\"a@b.com\", password=\"xxx\"\n        )\n\n    def _create_superuser(self, username):\n        return User.objects.create_superuser(\n            username=username, email=\"a@b.com\", password=\"xxx\"\n        )\n\n    def _mocked_authenticated_request(self, url, user):\n        request = self.factory.get(url)\n        request.user = user\n        return request\n\n    def test_repr(self):\n        m = ChildAdmin(Child, custom_site)\n        request = self.factory.get(\"/child/\")\n        request.user = self.superuser\n        cl = m.get_changelist_instance(request)\n        self.assertEqual(repr(cl), \"<ChangeList: model=Child model_admin=ChildAdmin>\")\n\n    def test_specified_ordering_by_f_expression(self):\n        class OrderedByFBandAdmin(admin.ModelAdmin):\n            list_display = [\"name\", \"genres\", \"nr_of_members\"]\n            ordering = (\n                F(\"nr_of_members\").desc(nulls_last=True),\n                Upper(F(\"name\")).asc(),\n                F(\"genres\").asc(),\n            )\n\n        m = OrderedByFBandAdmin(Band, custom_site)\n        request = self.factory.get(\"/band/\")\n        request.user = self.superuser\n        cl = m.get_changelist_instance(request)\n        self.assertEqual(cl.get_ordering_field_columns(), {3: \"desc\", 2: \"asc\"})\n\n    def test_specified_ordering_by_f_expression_without_asc_desc(self):\n        class OrderedByFBandAdmin(admin.ModelAdmin):\n            list_display = [\"name\", \"genres\", \"nr_of_members\"]\n            ordering = (F(\"nr_of_members\"), Upper(\"name\"), F(\"genres\"))\n\n        m = OrderedByFBandAdmin(Band, custom_site)\n        request = self.factory.get(\"/band/\")\n        request.user = self.superuser\n        cl = m.get_changelist_instance(request)\n        self.assertEqual(cl.get_ordering_field_columns(), {3: \"asc\", 2: \"asc\"})\n\n    def test_select_related_preserved(self):\n        \"\"\"\n        Regression test for #10348: ChangeList.get_queryset() shouldn't\n        overwrite a custom select_related provided by\n        ModelAdmin.get_queryset().\n        \"\"\"\n        m = ChildAdmin(Child, custom_site)\n        request = self.factory.get(\"/child/\")\n        request.user = self.superuser\n        cl = m.get_changelist_instance(request)\n        self.assertEqual(cl.queryset.query.select_related, {\"parent\": {}})\n\n    def test_select_related_preserved_when_multi_valued_in_search_fields(self):\n        parent = Parent.objects.create(name=\"Mary\")\n        Child.objects.create(parent=parent, name=\"Danielle\")\n        Child.objects.create(parent=parent, name=\"Daniel\")\n\n        m = ParentAdmin(Parent, custom_site)\n        request = self.factory.get(\"/parent/\", data={SEARCH_VAR: \"daniel\"})\n        request.user = self.superuser\n\n        cl = m.get_changelist_instance(request)\n        self.assertEqual(cl.queryset.count(), 1)\n        # select_related is preserved.\n        self.assertEqual(cl.queryset.query.select_related, {\"child\": {}})\n\n    def test_select_related_as_tuple(self):\n        ia = InvitationAdmin(Invitation, custom_site)\n        request = self.factory.get(\"/invitation/\")\n        request.user = self.superuser\n        cl = ia.get_changelist_instance(request)\n        self.assertEqual(cl.queryset.query.select_related, {\"player\": {}})\n\n    def test_select_related_as_empty_tuple(self):\n        ia = InvitationAdmin(Invitation, custom_site)\n        ia.list_select_related = ()\n        request = self.factory.get(\"/invitation/\")\n        request.user = self.superuser\n        cl = ia.get_changelist_instance(request)\n        self.assertIs(cl.queryset.query.select_related, False)\n\n    def test_get_select_related_custom_method(self):\n        class GetListSelectRelatedAdmin(admin.ModelAdmin):\n            list_display = (\"band\", \"player\")\n\n            def get_list_select_related(self, request):\n                return (\"band\", \"player\")\n\n        ia = GetListSelectRelatedAdmin(Invitation, custom_site)\n        request = self.factory.get(\"/invitation/\")\n        request.user = self.superuser\n        cl = ia.get_changelist_instance(request)\n        self.assertEqual(cl.queryset.query.select_related, {\"player\": {}, \"band\": {}})\n\n    def test_many_search_terms(self):\n        parent = Parent.objects.create(name=\"Mary\")\n        Child.objects.create(parent=parent, name=\"Danielle\")\n        Child.objects.create(parent=parent, name=\"Daniel\")\n\n        m = ParentAdmin(Parent, custom_site)\n        request = self.factory.get(\"/parent/\", data={SEARCH_VAR: \"daniel \" * 80})\n        request.user = self.superuser\n\n        cl = m.get_changelist_instance(request)\n        with CaptureQueriesContext(connection) as context:\n            object_count = cl.queryset.count()\n        self.assertEqual(object_count, 1)\n        self.assertEqual(context.captured_queries[0][\"sql\"].count(\"JOIN\"), 1)\n\n    def test_related_field_multiple_search_terms(self):\n        \"\"\"\n        Searches over multi-valued relationships return rows from related\n        models only when all searched fields match that row.\n        \"\"\"\n        parent = Parent.objects.create(name=\"Mary\")\n        Child.objects.create(parent=parent, name=\"Danielle\", age=18)\n        Child.objects.create(parent=parent, name=\"Daniel\", age=19)\n\n        m = ParentAdminTwoSearchFields(Parent, custom_site)\n\n        request = self.factory.get(\"/parent/\", data={SEARCH_VAR: \"danielle 19\"})\n        request.user = self.superuser\n        cl = m.get_changelist_instance(request)\n        self.assertEqual(cl.queryset.count(), 0)\n\n        request = self.factory.get(\"/parent/\", data={SEARCH_VAR: \"daniel 19\"})\n        request.user = self.superuser\n        cl = m.get_changelist_instance(request)\n        self.assertEqual(cl.queryset.count(), 1)\n\n    def test_result_list_empty_changelist_value(self):\n        \"\"\"\n        Regression test for #14982: EMPTY_CHANGELIST_VALUE should be honored\n        for relationship fields\n        \"\"\"\n        new_child = Child.objects.create(name=\"name\", parent=None)\n        request = self.factory.get(\"/child/\")\n        request.user = self.superuser\n        m = ChildAdmin(Child, custom_site)\n        cl = m.get_changelist_instance(request)\n        cl.formset = None\n        template = Template(\n            \"{% load admin_list %}{% spaceless %}{% result_list cl %}{% endspaceless %}\"\n        )\n        context = Context({\"cl\": cl, \"opts\": Child._meta})\n        table_output = template.render(context)\n        link = reverse(\"admin:admin_changelist_child_change\", args=(new_child.id,))\n        row_html = build_tbody_html(\n            new_child, link, \"name\", '<td class=\"field-parent nowrap\">-</td>'\n        )\n        self.assertNotEqual(\n            table_output.find(row_html),\n            -1,\n            \"Failed to find expected row element: %s\" % table_output,\n        )\n\n    def test_result_list_empty_changelist_value_blank_string(self):\n        new_child = Child.objects.create(name=\"\", parent=None)\n        request = self.factory.get(\"/child/\")\n        request.user = self.superuser\n        m = ChildAdmin(Child, custom_site)\n        cl = m.get_changelist_instance(request)\n        cl.formset = None\n        template = Template(\n            \"{% load admin_list %}{% spaceless %}{% result_list cl %}{% endspaceless %}\"\n        )\n        context = Context({\"cl\": cl, \"opts\": Child._meta})\n        table_output = template.render(context)\n        link = reverse(\"admin:admin_changelist_child_change\", args=(new_child.id,))\n        row_html = build_tbody_html(\n            new_child, link, \"-\", '<td class=\"field-parent nowrap\">-</td>'\n        )\n        self.assertInHTML(row_html, table_output)\n\n    def test_result_list_set_empty_value_display_on_admin_site(self):\n        \"\"\"\n        Empty value display can be set on AdminSite.\n        \"\"\"\n        new_child = Child.objects.create(name=\"name\", parent=None)\n        request = self.factory.get(\"/child/\")\n        request.user = self.superuser\n        # Set a new empty display value on AdminSite.\n        admin.site.empty_value_display = \"???\"\n        m = ChildAdmin(Child, admin.site)\n        cl = m.get_changelist_instance(request)\n        cl.formset = None\n        template = Template(\n            \"{% load admin_list %}{% spaceless %}{% result_list cl %}{% endspaceless %}\"\n        )\n        context = Context({\"cl\": cl, \"opts\": Child._meta})\n        table_output = template.render(context)\n        link = reverse(\"admin:admin_changelist_child_change\", args=(new_child.id,))\n        row_html = build_tbody_html(\n            new_child, link, \"name\", '<td class=\"field-parent nowrap\">???</td>'\n        )\n        self.assertNotEqual(\n            table_output.find(row_html),\n            -1,\n            \"Failed to find expected row element: %s\" % table_output,\n        )\n\n    def test_result_list_set_empty_value_display_in_model_admin(self):\n        \"\"\"\n        Empty value display can be set in ModelAdmin or individual fields.\n        \"\"\"\n        new_child = Child.objects.create(name=\"name\", parent=None)\n        request = self.factory.get(\"/child/\")\n        request.user = self.superuser\n        m = EmptyValueChildAdmin(Child, admin.site)\n        cl = m.get_changelist_instance(request)\n        cl.formset = None\n        template = Template(\n            \"{% load admin_list %}{% spaceless %}{% result_list cl %}{% endspaceless %}\"\n        )\n        context = Context({\"cl\": cl, \"opts\": Child._meta})\n        table_output = template.render(context)\n        link = reverse(\"admin:admin_changelist_child_change\", args=(new_child.id,))\n        row_html = build_tbody_html(\n            new_child,\n            link,\n            \"name\",\n            '<td class=\"field-age_display\">&amp;dagger;</td>'\n            '<td class=\"field-age\">-empty-</td>',\n        )\n        self.assertNotEqual(\n            table_output.find(row_html),\n            -1,\n            \"Failed to find expected row element: %s\" % table_output,\n        )\n\n    def test_result_list_html(self):\n        \"\"\"\n        Inclusion tag result_list generates a table when with default\n        ModelAdmin settings.\n        \"\"\"\n        new_parent = Parent.objects.create(name=\"parent\")\n        new_child = Child.objects.create(name=\"name\", parent=new_parent)\n        request = self.factory.get(\"/child/\")\n        request.user = self.superuser\n        m = ChildAdmin(Child, custom_site)\n        cl = m.get_changelist_instance(request)\n        cl.formset = None\n        template = Template(\n            \"{% load admin_list %}{% spaceless %}{% result_list cl %}{% endspaceless %}\"\n        )\n        context = Context({\"cl\": cl, \"opts\": Child._meta})\n        table_output = template.render(context)\n        link = reverse(\"admin:admin_changelist_child_change\", args=(new_child.id,))\n        row_html = build_tbody_html(\n            new_child,\n            link,\n            \"name\",\n            '<td class=\"field-parent nowrap\">%s</td>' % new_parent,\n        )\n        self.assertNotEqual(\n            table_output.find(row_html),\n            -1,\n            \"Failed to find expected row element: %s\" % table_output,\n        )\n        self.assertInHTML(\n            '<input type=\"checkbox\" id=\"action-toggle\" '\n            'aria-label=\"Select all objects on this page for an action\">',\n            table_output,\n        )\n\n    def test_action_checkbox_for_model_with_dunder_html(self):\n        grandchild = GrandChild.objects.create(name=\"name\")\n        request = self._mocked_authenticated_request(\"/grandchild/\", self.superuser)\n        m = GrandChildAdmin(GrandChild, custom_site)\n        cl = m.get_changelist_instance(request)\n        cl.formset = None\n        template = Template(\n            \"{% load admin_list %}{% spaceless %}{% result_list cl %}{% endspaceless %}\"\n        )\n        context = Context({\"cl\": cl, \"opts\": GrandChild._meta})\n        table_output = template.render(context)\n        link = reverse(\n            \"admin:admin_changelist_grandchild_change\", args=(grandchild.id,)\n        )\n        row_html = build_tbody_html(\n            grandchild,\n            link,\n            \"name\",\n            '<td class=\"field-parent__name\">-</td>'\n            '<td class=\"field-parent__parent__name\">-</td>',\n        )\n        self.assertNotEqual(\n            table_output.find(row_html),\n            -1,\n            \"Failed to find expected row element: %s\" % table_output,\n        )\n\n    def test_result_list_editable_html(self):\n        \"\"\"\n        Regression tests for #11791: Inclusion tag result_list generates a\n        table and this checks that the items are nested within the table\n        element tags.\n        Also a regression test for #13599, verifies that hidden fields\n        when list_editable is enabled are rendered in a div outside the\n        table.\n        \"\"\"\n        new_parent = Parent.objects.create(name=\"parent\")\n        new_child = Child.objects.create(name=\"name\", parent=new_parent)\n        request = self.factory.get(\"/child/\")\n        request.user = self.superuser\n        m = ChildAdmin(Child, custom_site)\n\n        # Test with list_editable fields\n        m.list_display = [\"id\", \"name\", \"parent\"]\n        m.list_display_links = [\"id\"]\n        m.list_editable = [\"name\"]\n        cl = m.get_changelist_instance(request)\n        FormSet = m.get_changelist_formset(request)\n        cl.formset = FormSet(queryset=cl.result_list)\n        template = Template(\n            \"{% load admin_list %}{% spaceless %}{% result_list cl %}{% endspaceless %}\"\n        )\n        context = Context({\"cl\": cl, \"opts\": Child._meta})\n        table_output = template.render(context)\n        # make sure that hidden fields are in the correct place\n        hiddenfields_div = (\n            '<div class=\"hiddenfields\">'\n            '<input type=\"hidden\" name=\"form-0-id\" value=\"%d\" id=\"id_form-0-id\">'\n            \"</div>\"\n        ) % new_child.id\n        self.assertInHTML(\n            hiddenfields_div, table_output, msg_prefix=\"Failed to find hidden fields\"\n        )\n\n        # make sure that list editable fields are rendered in divs correctly\n        editable_name_field = (\n            '<input name=\"form-0-name\" value=\"name\" class=\"vTextField\" '\n            'maxlength=\"30\" type=\"text\" id=\"id_form-0-name\">'\n        )\n        self.assertInHTML(\n            '<td class=\"field-name\">%s</td>' % editable_name_field,\n            table_output,\n            msg_prefix='Failed to find \"name\" list_editable field',\n        )\n\n    def test_result_list_editable(self):\n        \"\"\"\n        Regression test for #14312: list_editable with pagination\n        \"\"\"\n        new_parent = Parent.objects.create(name=\"parent\")\n        for i in range(1, 201):\n            Child.objects.create(name=\"name %s\" % i, parent=new_parent)\n        request = self.factory.get(\"/child/\", data={\"p\": -1})  # Anything outside range\n        request.user = self.superuser\n        m = ChildAdmin(Child, custom_site)\n\n        # Test with list_editable fields\n        m.list_display = [\"id\", \"name\", \"parent\"]\n        m.list_display_links = [\"id\"]\n        m.list_editable = [\"name\"]\n        with self.assertRaises(IncorrectLookupParameters):\n            m.get_changelist_instance(request)\n\n    @skipUnlessDBFeature(\"supports_transactions\")\n    def test_list_editable_atomicity(self):\n        a = Swallow.objects.create(origin=\"Swallow A\", load=4, speed=1)\n        b = Swallow.objects.create(origin=\"Swallow B\", load=2, speed=2)\n\n        self.client.force_login(self.superuser)\n        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n        data = {\n            \"form-TOTAL_FORMS\": \"2\",\n            \"form-INITIAL_FORMS\": \"2\",\n            \"form-MIN_NUM_FORMS\": \"0\",\n            \"form-MAX_NUM_FORMS\": \"1000\",\n            \"form-0-uuid\": str(a.pk),\n            \"form-1-uuid\": str(b.pk),\n            \"form-0-load\": \"9.0\",\n            \"form-0-speed\": \"3.0\",\n            \"form-1-load\": \"5.0\",\n            \"form-1-speed\": \"1.0\",\n            \"_save\": \"Save\",\n        }\n        with mock.patch(\n            \"django.contrib.admin.ModelAdmin.log_change\", side_effect=DatabaseError\n        ):\n            with self.assertRaises(DatabaseError):\n                self.client.post(changelist_url, data)\n        # Original values are preserved.\n        a.refresh_from_db()\n        self.assertEqual(a.load, 4)\n        self.assertEqual(a.speed, 1)\n        b.refresh_from_db()\n        self.assertEqual(b.load, 2)\n        self.assertEqual(b.speed, 2)\n\n        with mock.patch(\n            \"django.contrib.admin.ModelAdmin.log_change\",\n            side_effect=[None, DatabaseError],\n        ):\n            with self.assertRaises(DatabaseError):\n                self.client.post(changelist_url, data)\n        # Original values are preserved.\n        a.refresh_from_db()\n        self.assertEqual(a.load, 4)\n        self.assertEqual(a.speed, 1)\n        b.refresh_from_db()\n        self.assertEqual(b.load, 2)\n        self.assertEqual(b.speed, 2)\n\n    def test_custom_paginator(self):\n        new_parent = Parent.objects.create(name=\"parent\")\n        for i in range(1, 201):\n            Child.objects.create(name=\"name %s\" % i, parent=new_parent)\n\n        request = self.factory.get(\"/child/\")\n        request.user = self.superuser\n        m = CustomPaginationAdmin(Child, custom_site)\n\n        cl = m.get_changelist_instance(request)\n        cl.get_results(request)\n        self.assertIsInstance(cl.paginator, CustomPaginator)\n\n    def test_distinct_for_m2m_in_list_filter(self):\n        \"\"\"\n        Regression test for #13902: When using a ManyToMany in list_filter,\n        results shouldn't appear more than once. Basic ManyToMany.\n        \"\"\"\n        blues = Genre.objects.create(name=\"Blues\")\n        band = Band.objects.create(name=\"B.B. King Review\", nr_of_members=11)\n\n        band.genres.add(blues)\n        band.genres.add(blues)\n\n        m = BandAdmin(Band, custom_site)\n        request = self.factory.get(\"/band/\", data={\"genres\": blues.pk})\n        request.user = self.superuser\n\n        cl = m.get_changelist_instance(request)\n        cl.get_results(request)\n\n        # There's only one Group instance\n        self.assertEqual(cl.result_count, 1)\n        # Queryset must be deletable.\n        cl.queryset.delete()\n        self.assertEqual(cl.queryset.count(), 0)\n\n    def test_distinct_for_through_m2m_in_list_filter(self):\n        \"\"\"\n        Regression test for #13902: When using a ManyToMany in list_filter,\n        results shouldn't appear more than once. With an intermediate model.\n        \"\"\"\n        lead = Musician.objects.create(name=\"Vox\")\n        band = Group.objects.create(name=\"The Hype\")\n        Membership.objects.create(group=band, music=lead, role=\"lead voice\")\n        Membership.objects.create(group=band, music=lead, role=\"bass player\")\n\n        m = GroupAdmin(Group, custom_site)\n        request = self.factory.get(\"/group/\", data={\"members\": lead.pk})\n        request.user = self.superuser\n\n        cl = m.get_changelist_instance(request)\n        cl.get_results(request)\n\n        # There's only one Group instance\n        self.assertEqual(cl.result_count, 1)\n        # Queryset must be deletable.\n        cl.queryset.delete()\n        self.assertEqual(cl.queryset.count(), 0)\n\n    def test_distinct_for_through_m2m_at_second_level_in_list_filter(self):\n        \"\"\"\n        When using a ManyToMany in list_filter at the second level behind a\n        ForeignKey, distinct() must be called and results shouldn't appear more\n        than once.\n        \"\"\"\n        lead = Musician.objects.create(name=\"Vox\")\n        band = Group.objects.create(name=\"The Hype\")\n        Concert.objects.create(name=\"Woodstock\", group=band)\n        Membership.objects.create(group=band, music=lead, role=\"lead voice\")\n        Membership.objects.create(group=band, music=lead, role=\"bass player\")\n\n        m = ConcertAdmin(Concert, custom_site)\n        request = self.factory.get(\"/concert/\", data={\"group__members\": lead.pk})\n        request.user = self.superuser\n\n        cl = m.get_changelist_instance(request)\n        cl.get_results(request)\n\n        # There's only one Concert instance\n        self.assertEqual(cl.result_count, 1)\n        # Queryset must be deletable.\n        cl.queryset.delete()\n        self.assertEqual(cl.queryset.count(), 0)\n\n    def test_distinct_for_inherited_m2m_in_list_filter(self):\n        \"\"\"\n        Regression test for #13902: When using a ManyToMany in list_filter,\n        results shouldn't appear more than once. Model managed in the\n        admin inherits from the one that defines the relationship.\n        \"\"\"\n        lead = Musician.objects.create(name=\"John\")\n        four = Quartet.objects.create(name=\"The Beatles\")\n        Membership.objects.create(group=four, music=lead, role=\"lead voice\")\n        Membership.objects.create(group=four, music=lead, role=\"guitar player\")\n\n        m = QuartetAdmin(Quartet, custom_site)\n        request = self.factory.get(\"/quartet/\", data={\"members\": lead.pk})\n        request.user = self.superuser\n\n        cl = m.get_changelist_instance(request)\n        cl.get_results(request)\n\n        # There's only one Quartet instance\n        self.assertEqual(cl.result_count, 1)\n        # Queryset must be deletable.\n        cl.queryset.delete()\n        self.assertEqual(cl.queryset.count(), 0)\n\n    def test_distinct_for_m2m_to_inherited_in_list_filter(self):\n        \"\"\"\n        Regression test for #13902: When using a ManyToMany in list_filter,\n        results shouldn't appear more than once. Target of the relationship\n        inherits from another.\n        \"\"\"\n        lead = ChordsMusician.objects.create(name=\"Player A\")\n        three = ChordsBand.objects.create(name=\"The Chords Trio\")\n        Invitation.objects.create(band=three, player=lead, instrument=\"guitar\")\n        Invitation.objects.create(band=three, player=lead, instrument=\"bass\")\n\n        m = ChordsBandAdmin(ChordsBand, custom_site)\n        request = self.factory.get(\"/chordsband/\", data={\"members\": lead.pk})\n        request.user = self.superuser\n\n        cl = m.get_changelist_instance(request)\n        cl.get_results(request)\n\n        # There's only one ChordsBand instance\n        self.assertEqual(cl.result_count, 1)\n\n    def test_distinct_for_non_unique_related_object_in_list_filter(self):\n        \"\"\"\n        Regressions tests for #15819: If a field listed in list_filters\n        is a non-unique related object, distinct() must be called.\n        \"\"\"\n        parent = Parent.objects.create(name=\"Mary\")\n        # Two children with the same name\n        Child.objects.create(parent=parent, name=\"Daniel\")\n        Child.objects.create(parent=parent, name=\"Daniel\")\n\n        m = ParentAdmin(Parent, custom_site)\n        request = self.factory.get(\"/parent/\", data={\"child__name\": \"Daniel\"})\n        request.user = self.superuser\n\n        cl = m.get_changelist_instance(request)\n        # Make sure distinct() was called\n        self.assertEqual(cl.queryset.count(), 1)\n        # Queryset must be deletable.\n        cl.queryset.delete()\n        self.assertEqual(cl.queryset.count(), 0)\n\n    def test_changelist_search_form_validation(self):\n        m = ConcertAdmin(Concert, custom_site)\n        tests = [\n            ({SEARCH_VAR: \"\\x00\"}, \"Null characters are not allowed.\"),\n            ({SEARCH_VAR: \"some\\x00thing\"}, \"Null characters are not allowed.\"),\n        ]\n        for case, error in tests:\n            with self.subTest(case=case):\n                request = self.factory.get(\"/concert/\", case)\n                request.user = self.superuser\n                request._messages = CookieStorage(request)\n                m.get_changelist_instance(request)\n                messages = [m.message for m in request._messages]\n                self.assertEqual(1, len(messages))\n                self.assertEqual(error, messages[0])\n\n    def test_distinct_for_non_unique_related_object_in_search_fields(self):\n        \"\"\"\n        Regressions tests for #15819: If a field listed in search_fields\n        is a non-unique related object, distinct() must be called.\n        \"\"\"\n        parent = Parent.objects.create(name=\"Mary\")\n        Child.objects.create(parent=parent, name=\"Danielle\")\n        Child.objects.create(parent=parent, name=\"Daniel\")\n\n        m = ParentAdmin(Parent, custom_site)\n        request = self.factory.get(\"/parent/\", data={SEARCH_VAR: \"daniel\"})\n        request.user = self.superuser\n\n        cl = m.get_changelist_instance(request)\n        # Make sure distinct() was called\n        self.assertEqual(cl.queryset.count(), 1)\n        # Queryset must be deletable.\n        cl.queryset.delete()\n        self.assertEqual(cl.queryset.count(), 0)\n\n    def test_distinct_for_many_to_many_at_second_level_in_search_fields(self):\n        \"\"\"\n        When using a ManyToMany in search_fields at the second level behind a\n        ForeignKey, distinct() must be called and results shouldn't appear more\n        than once.\n        \"\"\"\n        lead = Musician.objects.create(name=\"Vox\")\n        band = Group.objects.create(name=\"The Hype\")\n        Concert.objects.create(name=\"Woodstock\", group=band)\n        Membership.objects.create(group=band, music=lead, role=\"lead voice\")\n        Membership.objects.create(group=band, music=lead, role=\"bass player\")\n\n        m = ConcertAdmin(Concert, custom_site)\n        request = self.factory.get(\"/concert/\", data={SEARCH_VAR: \"vox\"})\n        request.user = self.superuser\n\n        cl = m.get_changelist_instance(request)\n        # There's only one Concert instance\n        self.assertEqual(cl.queryset.count(), 1)\n        # Queryset must be deletable.\n        cl.queryset.delete()\n        self.assertEqual(cl.queryset.count(), 0)\n\n    def test_multiple_search_fields(self):\n        \"\"\"\n        All rows containing each of the searched words are returned, where each\n        word must be in one of search_fields.\n        \"\"\"\n        band_duo = Group.objects.create(name=\"Duo\")\n        band_hype = Group.objects.create(name=\"The Hype\")\n        mary = Musician.objects.create(name=\"Mary Halvorson\")\n        jonathan = Musician.objects.create(name=\"Jonathan Finlayson\")\n        band_duo.members.set([mary, jonathan])\n        Concert.objects.create(name=\"Tiny desk concert\", group=band_duo)\n        Concert.objects.create(name=\"Woodstock concert\", group=band_hype)\n        # FK lookup.\n        concert_model_admin = ConcertAdmin(Concert, custom_site)\n        concert_model_admin.search_fields = [\"group__name\", \"name\"]\n        # Reverse FK lookup.\n        group_model_admin = GroupAdmin(Group, custom_site)\n        group_model_admin.search_fields = [\"name\", \"concert__name\", \"members__name\"]\n        for search_string, result_count in (\n            (\"Duo Concert\", 1),\n            (\"Tiny Desk Concert\", 1),\n            (\"Concert\", 2),\n            (\"Other Concert\", 0),\n            (\"Duo Woodstock\", 0),\n        ):\n            with self.subTest(search_string=search_string):\n                # FK lookup.\n                request = self.factory.get(\n                    \"/concert/\", data={SEARCH_VAR: search_string}\n                )\n                request.user = self.superuser\n                concert_changelist = concert_model_admin.get_changelist_instance(\n                    request\n                )\n                self.assertEqual(concert_changelist.queryset.count(), result_count)\n                # Reverse FK lookup.\n                request = self.factory.get(\"/group/\", data={SEARCH_VAR: search_string})\n                request.user = self.superuser\n                group_changelist = group_model_admin.get_changelist_instance(request)\n                self.assertEqual(group_changelist.queryset.count(), result_count)\n        # Many-to-many lookup.\n        for search_string, result_count in (\n            (\"Finlayson Duo Tiny\", 1),\n            (\"Finlayson\", 1),\n            (\"Finlayson Hype\", 0),\n            (\"Jonathan Finlayson Duo\", 1),\n            (\"Mary Jonathan Duo\", 0),\n            (\"Oscar Finlayson Duo\", 0),\n        ):\n            with self.subTest(search_string=search_string):\n                request = self.factory.get(\"/group/\", data={SEARCH_VAR: search_string})\n                request.user = self.superuser\n                group_changelist = group_model_admin.get_changelist_instance(request)\n                self.assertEqual(group_changelist.queryset.count(), result_count)\n\n    def test_pk_in_search_fields(self):\n        band = Group.objects.create(name=\"The Hype\")\n        Concert.objects.create(name=\"Woodstock\", group=band)\n\n        m = ConcertAdmin(Concert, custom_site)\n        m.search_fields = [\"group__pk\"]\n\n        request = self.factory.get(\"/concert/\", data={SEARCH_VAR: band.pk})\n        request.user = self.superuser\n        cl = m.get_changelist_instance(request)\n        self.assertEqual(cl.queryset.count(), 1)\n\n        request = self.factory.get(\"/concert/\", data={SEARCH_VAR: band.pk + 5})\n        request.user = self.superuser\n        cl = m.get_changelist_instance(request)\n        self.assertEqual(cl.queryset.count(), 0)\n\n    def test_builtin_lookup_in_search_fields(self):\n        band = Group.objects.create(name=\"The Hype\")\n        concert = Concert.objects.create(name=\"Woodstock\", group=band)\n\n        m = ConcertAdmin(Concert, custom_site)\n        m.search_fields = [\"name__iexact\"]\n\n        request = self.factory.get(\"/\", data={SEARCH_VAR: \"woodstock\"})\n        request.user = self.superuser\n        cl = m.get_changelist_instance(request)\n        self.assertCountEqual(cl.queryset, [concert])\n\n        request = self.factory.get(\"/\", data={SEARCH_VAR: \"wood\"})\n        request.user = self.superuser\n        cl = m.get_changelist_instance(request)\n        self.assertCountEqual(cl.queryset, [])\n\n    def test_custom_lookup_in_search_fields(self):\n        band = Group.objects.create(name=\"The Hype\")\n        concert = Concert.objects.create(name=\"Woodstock\", group=band)\n\n        m = ConcertAdmin(Concert, custom_site)\n        m.search_fields = [\"group__name__cc\"]\n        with register_lookup(Field, Contains, lookup_name=\"cc\"):\n            request = self.factory.get(\"/\", data={SEARCH_VAR: \"Hype\"})\n            request.user = self.superuser\n            cl = m.get_changelist_instance(request)\n            self.assertCountEqual(cl.queryset, [concert])\n\n            request = self.factory.get(\"/\", data={SEARCH_VAR: \"Woodstock\"})\n            request.user = self.superuser\n            cl = m.get_changelist_instance(request)\n            self.assertCountEqual(cl.queryset, [])\n\n    def test_spanning_relations_with_custom_lookup_in_search_fields(self):\n        hype = Group.objects.create(name=\"The Hype\")\n        concert = Concert.objects.create(name=\"Woodstock\", group=hype)\n        vox = Musician.objects.create(name=\"Vox\", age=20)\n        Membership.objects.create(music=vox, group=hype)\n        # Register a custom lookup on IntegerField to ensure that field\n        # traversing logic in ModelAdmin.get_search_results() works.\n        with register_lookup(IntegerField, Exact, lookup_name=\"exactly\"):\n            m = ConcertAdmin(Concert, custom_site)\n            m.search_fields = [\"group__members__age__exactly\"]\n\n            request = self.factory.get(\"/\", data={SEARCH_VAR: \"20\"})\n            request.user = self.superuser\n            cl = m.get_changelist_instance(request)\n            self.assertCountEqual(cl.queryset, [concert])\n\n            request = self.factory.get(\"/\", data={SEARCH_VAR: \"21\"})\n            request.user = self.superuser\n            cl = m.get_changelist_instance(request)\n            self.assertCountEqual(cl.queryset, [])\n\n    def test_custom_lookup_with_pk_shortcut(self):\n        self.assertEqual(CharPK._meta.pk.name, \"char_pk\")  # Not equal to 'pk'.\n        m = admin.ModelAdmin(CustomIdUser, custom_site)\n\n        abc = CharPK.objects.create(char_pk=\"abc\")\n        abcd = CharPK.objects.create(char_pk=\"abcd\")\n        m = admin.ModelAdmin(CharPK, custom_site)\n        m.search_fields = [\"pk__exact\"]\n\n        request = self.factory.get(\"/\", data={SEARCH_VAR: \"abc\"})\n        request.user = self.superuser\n        cl = m.get_changelist_instance(request)\n        self.assertCountEqual(cl.queryset, [abc])\n\n        request = self.factory.get(\"/\", data={SEARCH_VAR: \"abcd\"})\n        request.user = self.superuser\n        cl = m.get_changelist_instance(request)\n        self.assertCountEqual(cl.queryset, [abcd])\n\n    def test_search_with_exact_lookup_for_non_string_field(self):\n        child = Child.objects.create(name=\"Asher\", age=11)\n        model_admin = ChildAdmin(Child, custom_site)\n\n        for search_term, expected_result in [\n            (\"11\", [child]),\n            (\"Asher\", [child]),\n            (\"1\", []),\n            (\"A\", []),\n            (\"random\", []),\n        ]:\n            request = self.factory.get(\"/\", data={SEARCH_VAR: search_term})\n            request.user = self.superuser\n            with self.subTest(search_term=search_term):\n                # 1 query for filtered result, 1 for filtered count, 1 for\n                # total count.\n                with self.assertNumQueries(3):\n                    cl = model_admin.get_changelist_instance(request)\n                self.assertCountEqual(cl.queryset, expected_result)\n\n    def test_search_with_exact_lookup_relationship_field(self):\n        child = Child.objects.create(name=\"I am a child\", age=11)\n        grandchild = GrandChild.objects.create(name=\"I am a grandchild\", parent=child)\n        model_admin = GrandChildAdmin(GrandChild, custom_site)\n\n        request = self.factory.get(\"/\", data={SEARCH_VAR: \"'I am a child'\"})\n        request.user = self.superuser\n        cl = model_admin.get_changelist_instance(request)\n        self.assertCountEqual(cl.queryset, [grandchild])\n        for search_term, expected_result in [\n            (\"11\", [grandchild]),\n            (\"'I am a child'\", [grandchild]),\n            (\"1\", []),\n            (\"A\", []),\n            (\"random\", []),\n        ]:\n            request = self.factory.get(\"/\", data={SEARCH_VAR: search_term})\n            request.user = self.superuser\n            with self.subTest(search_term=search_term):\n                cl = model_admin.get_changelist_instance(request)\n                self.assertCountEqual(cl.queryset, expected_result)\n\n    def test_no_distinct_for_m2m_in_list_filter_without_params(self):\n        \"\"\"\n        If a ManyToManyField is in list_filter but isn't in any lookup params,\n        the changelist's query shouldn't have distinct.\n        \"\"\"\n        m = BandAdmin(Band, custom_site)\n        for lookup_params in ({}, {\"name\": \"test\"}):\n            request = self.factory.get(\"/band/\", lookup_params)\n            request.user = self.superuser\n            cl = m.get_changelist_instance(request)\n            self.assertIs(cl.queryset.query.distinct, False)\n\n        # A ManyToManyField in params does have distinct applied.\n        request = self.factory.get(\"/band/\", {\"genres\": \"0\"})\n        request.user = self.superuser\n        cl = m.get_changelist_instance(request)\n        self.assertIs(cl.queryset.query.distinct, True)\n\n    def test_pagination(self):\n        \"\"\"\n        Regression tests for #12893: Pagination in admins changelist doesn't\n        use queryset set by modeladmin.\n        \"\"\"\n        parent = Parent.objects.create(name=\"anything\")\n        for i in range(1, 31):\n            Child.objects.create(name=\"name %s\" % i, parent=parent)\n            Child.objects.create(name=\"filtered %s\" % i, parent=parent)\n\n        request = self.factory.get(\"/child/\")\n        request.user = self.superuser\n\n        # Test default queryset\n        m = ChildAdmin(Child, custom_site)\n        cl = m.get_changelist_instance(request)\n        self.assertEqual(cl.queryset.count(), 60)\n        self.assertEqual(cl.paginator.count, 60)\n        self.assertEqual(list(cl.paginator.page_range), [1, 2, 3, 4, 5, 6])\n\n        # Test custom queryset\n        m = FilteredChildAdmin(Child, custom_site)\n        cl = m.get_changelist_instance(request)\n        self.assertEqual(cl.queryset.count(), 30)\n        self.assertEqual(cl.paginator.count, 30)\n        self.assertEqual(list(cl.paginator.page_range), [1, 2, 3])\n\n    def test_pagination_render(self):\n        objs = [Swallow(origin=f\"Swallow {i}\", load=i, speed=i) for i in range(1, 5)]\n        Swallow.objects.bulk_create(objs)\n\n        request = self.factory.get(\"/child/\")\n        request.user = self.superuser\n\n        admin = SwallowAdmin(Swallow, custom_site)\n        cl = admin.get_changelist_instance(request)\n        template = Template(\n            \"{% load admin_list %}{% spaceless %}{% pagination cl %}{% endspaceless %}\"\n        )\n        context = Context({\"cl\": cl, \"opts\": cl.opts})\n        pagination_output = template.render(context)\n        self.assertTrue(\n            pagination_output.startswith(\n                '<nav class=\"paginator\" aria-labelledby=\"pagination\">'\n            )\n        )\n        self.assertInHTML(\n            '<h2 id=\"pagination\" class=\"visually-hidden\">Pagination swallows</h2>',\n            pagination_output,\n        )\n        self.assertTrue(pagination_output.endswith(\"</nav>\"))\n        self.assertInHTML(\n            '<li><a role=\"button\" href=\"\" aria-current=\"page\">1</a></li>',\n            pagination_output,\n        )\n        self.assertInHTML(\n            '<li><a role=\"button\" href=\"?p=2\">2</a></li>',\n            pagination_output,\n        )\n        self.assertEqual(pagination_output.count('aria-current=\"page\"'), 1)\n        self.assertEqual(pagination_output.count('href=\"\"'), 1)\n\n    def test_computed_list_display_localization(self):\n        \"\"\"\n        Regression test for #13196: output of functions should be  localized\n        in the changelist.\n        \"\"\"\n        self.client.force_login(self.superuser)\n        event = Event.objects.create(date=datetime.date.today())\n        response = self.client.get(reverse(\"admin:admin_changelist_event_changelist\"))\n        self.assertContains(response, formats.localize(event.date))\n        self.assertNotContains(response, str(event.date))\n\n    def test_dynamic_list_display(self):\n        \"\"\"\n        Regression tests for #14206: dynamic list_display support.\n        \"\"\"\n        parent = Parent.objects.create(name=\"parent\")\n        for i in range(10):\n            Child.objects.create(name=\"child %s\" % i, parent=parent)\n\n        user_noparents = self._create_superuser(\"noparents\")\n        user_parents = self._create_superuser(\"parents\")\n\n        # Test with user 'noparents'\n        m = custom_site.get_model_admin(Child)\n        request = self._mocked_authenticated_request(\"/child/\", user_noparents)\n        response = m.changelist_view(request)\n        self.assertNotContains(response, \"Parent object\")\n\n        list_display = m.get_list_display(request)\n        list_display_links = m.get_list_display_links(request, list_display)\n        self.assertEqual(list_display, [\"name\", \"age\"])\n        self.assertEqual(list_display_links, [\"name\"])\n\n        # Test with user 'parents'\n        m = DynamicListDisplayChildAdmin(Child, custom_site)\n        request = self._mocked_authenticated_request(\"/child/\", user_parents)\n        response = m.changelist_view(request)\n        self.assertContains(response, \"Parent object\")\n\n        custom_site.unregister(Child)\n\n        list_display = m.get_list_display(request)\n        list_display_links = m.get_list_display_links(request, list_display)\n        self.assertEqual(list_display, (\"parent\", \"name\", \"age\"))\n        self.assertEqual(list_display_links, [\"parent\"])\n\n        # Test default implementation\n        custom_site.register(Child, ChildAdmin)\n        m = custom_site.get_model_admin(Child)\n        request = self._mocked_authenticated_request(\"/child/\", user_noparents)\n        response = m.changelist_view(request)\n        self.assertContains(response, \"Parent object\")\n\n    def test_show_all(self):\n        parent = Parent.objects.create(name=\"anything\")\n        for i in range(1, 31):\n            Child.objects.create(name=\"name %s\" % i, parent=parent)\n            Child.objects.create(name=\"filtered %s\" % i, parent=parent)\n\n        # Add \"show all\" parameter to request\n        request = self.factory.get(\"/child/\", data={ALL_VAR: \"\"})\n        request.user = self.superuser\n\n        # Test valid \"show all\" request (number of total objects is under max)\n        m = ChildAdmin(Child, custom_site)\n        m.list_max_show_all = 200\n        # 200 is the max we'll pass to ChangeList\n        cl = m.get_changelist_instance(request)\n        cl.get_results(request)\n        self.assertEqual(len(cl.result_list), 60)\n\n        # Test invalid \"show all\" request (number of total objects over max)\n        # falls back to paginated pages\n        m = ChildAdmin(Child, custom_site)\n        m.list_max_show_all = 30\n        # 30 is the max we'll pass to ChangeList for this test\n        cl = m.get_changelist_instance(request)\n        cl.get_results(request)\n        self.assertEqual(len(cl.result_list), 10)\n\n    def test_dynamic_list_display_links(self):\n        \"\"\"\n        Regression tests for #16257: dynamic list_display_links support.\n        \"\"\"\n        parent = Parent.objects.create(name=\"parent\")\n        for i in range(1, 10):\n            Child.objects.create(id=i, name=\"child %s\" % i, parent=parent, age=i)\n\n        m = DynamicListDisplayLinksChildAdmin(Child, custom_site)\n        superuser = self._create_superuser(\"superuser\")\n        request = self._mocked_authenticated_request(\"/child/\", superuser)\n        response = m.changelist_view(request)\n        for i in range(1, 10):\n            link = reverse(\"admin:admin_changelist_child_change\", args=(i,))\n            self.assertContains(response, '<a href=\"%s\">%s</a>' % (link, i))\n\n        list_display = m.get_list_display(request)\n        list_display_links = m.get_list_display_links(request, list_display)\n        self.assertEqual(list_display, (\"parent\", \"name\", \"age\"))\n        self.assertEqual(list_display_links, [\"age\"])\n\n    def test_no_list_display_links(self):\n        \"\"\"#15185 -- Allow no links from the 'change list' view grid.\"\"\"\n        p = Parent.objects.create(name=\"parent\")\n        m = NoListDisplayLinksParentAdmin(Parent, custom_site)\n        superuser = self._create_superuser(\"superuser\")\n        request = self._mocked_authenticated_request(\"/parent/\", superuser)\n        response = m.changelist_view(request)\n        link = reverse(\"admin:admin_changelist_parent_change\", args=(p.pk,))\n        self.assertNotContains(response, '<a href=\"%s\">' % link)\n\n    def test_link_field_display_links(self):\n        self.client.force_login(self.superuser)\n        g = Genre.objects.create(\n            name=\"Blues\",\n            file=\"documents/blues_history.txt\",\n            url=\"http://blues_history.com\",\n        )\n        response = self.client.get(reverse(\"admin:admin_changelist_genre_changelist\"))\n        self.assertContains(\n            response,\n            '<a href=\"/admin/admin_changelist/genre/%s/change/\">'\n            \"documents/blues_history.txt</a>\" % g.pk,\n        )\n        self.assertContains(\n            response,\n            '<a href=\"/admin/admin_changelist/genre/%s/change/\">'\n            \"http://blues_history.com</a>\" % g.pk,\n        )\n\n    def test_blank_str_display_links(self):\n        self.client.force_login(self.superuser)\n        gc = GrandChild.objects.create(name=\"          \")\n        response = self.client.get(\n            reverse(\"admin:admin_changelist_grandchild_changelist\")\n        )\n        self.assertContains(\n            response,\n            '<a href=\"/admin/admin_changelist/grandchild/%s/change/\">-</a>' % gc.pk,\n        )\n\n    def test_clear_all_filters_link(self):\n        self.client.force_login(self.superuser)\n        url = reverse(\"admin:auth_user_changelist\")\n        response = self.client.get(url)\n        self.assertNotContains(response, \"&#10006; Clear all filters\")\n        link = '<a href=\"%s\">&#10006; Clear all filters</a>'\n        for data, href in (\n            ({\"is_staff__exact\": \"0\"}, \"?\"),\n            (\n                {\"is_staff__exact\": \"0\", \"username__startswith\": \"test\"},\n                \"?username__startswith=test\",\n            ),\n            (\n                {\"is_staff__exact\": \"0\", SEARCH_VAR: \"test\"},\n                \"?%s=test\" % SEARCH_VAR,\n            ),\n            (\n                {\"is_staff__exact\": \"0\", IS_POPUP_VAR: \"id\"},\n                \"?%s=id\" % IS_POPUP_VAR,\n            ),\n        ):\n            with self.subTest(data=data):\n                response = self.client.get(url, data=data)\n                self.assertContains(response, link % href)\n\n    def test_clear_all_filters_link_callable_filter(self):\n        self.client.force_login(self.superuser)\n        url = reverse(\"admin:admin_changelist_band_changelist\")\n        response = self.client.get(url)\n        self.assertNotContains(response, \"&#10006; Clear all filters\")\n        link = '<a href=\"%s\">&#10006; Clear all filters</a>'\n        for data, href in (\n            ({\"nr_of_members_partition\": \"5\"}, \"?\"),\n            (\n                {\"nr_of_members_partition\": \"more\", \"name__startswith\": \"test\"},\n                \"?name__startswith=test\",\n            ),\n            (\n                {\"nr_of_members_partition\": \"5\", IS_POPUP_VAR: \"id\"},\n                \"?%s=id\" % IS_POPUP_VAR,\n            ),\n        ):\n            with self.subTest(data=data):\n                response = self.client.get(url, data=data)\n                self.assertContains(response, link % href)\n\n    def test_no_clear_all_filters_link(self):\n        self.client.force_login(self.superuser)\n        url = reverse(\"admin:auth_user_changelist\")\n        link = \">&#10006; Clear all filters</a>\"\n        for data in (\n            {SEARCH_VAR: \"test\"},\n            {ORDER_VAR: \"-1\"},\n            {TO_FIELD_VAR: \"id\"},\n            {PAGE_VAR: \"1\"},\n            {IS_POPUP_VAR: \"1\"},\n            {IS_FACETS_VAR: \"\"},\n            {\"username__startswith\": \"test\"},\n        ):\n            with self.subTest(data=data):\n                response = self.client.get(url, data=data)\n                self.assertNotContains(response, link)\n\n    def test_tuple_list_display(self):\n        swallow = Swallow.objects.create(origin=\"Africa\", load=\"12.34\", speed=\"22.2\")\n        swallow2 = Swallow.objects.create(origin=\"Africa\", load=\"12.34\", speed=\"22.2\")\n        swallow_o2o = SwallowOneToOne.objects.create(swallow=swallow2)\n\n        model_admin = SwallowAdmin(Swallow, custom_site)\n        superuser = self._create_superuser(\"superuser\")\n        request = self._mocked_authenticated_request(\"/swallow/\", superuser)\n        response = model_admin.changelist_view(request)\n        # just want to ensure it doesn't blow up during rendering\n        self.assertContains(response, str(swallow.origin))\n        self.assertContains(response, str(swallow.load))\n        self.assertContains(response, str(swallow.speed))\n        # Reverse one-to-one relations should work.\n        self.assertContains(response, '<td class=\"field-swallowonetoone\">-</td>')\n        self.assertContains(\n            response, '<td class=\"field-swallowonetoone\">%s</td>' % swallow_o2o\n        )\n\n    def test_multiuser_edit(self):\n        \"\"\"\n        Simultaneous edits of list_editable fields on the changelist by\n        different users must not result in one user's edits creating a new\n        object instead of modifying the correct existing object (#11313).\n        \"\"\"\n        # To replicate this issue, simulate the following steps:\n        # 1. User1 opens an admin changelist with list_editable fields.\n        # 2. User2 edits object \"Foo\" such that it moves to another page in\n        #    the pagination order and saves.\n        # 3. User1 edits object \"Foo\" and saves.\n        # 4. The edit made by User1 does not get applied to object \"Foo\" but\n        #    instead is used to create a new object (bug).\n\n        # For this test, order the changelist by the 'speed' attribute and\n        # display 3 objects per page (SwallowAdmin.list_per_page = 3).\n\n        # Setup the test to reflect the DB state after step 2 where User2 has\n        # edited the first swallow object's speed from '4' to '1'.\n        a = Swallow.objects.create(origin=\"Swallow A\", load=4, speed=1)\n        b = Swallow.objects.create(origin=\"Swallow B\", load=2, speed=2)\n        c = Swallow.objects.create(origin=\"Swallow C\", load=5, speed=5)\n        d = Swallow.objects.create(origin=\"Swallow D\", load=9, speed=9)\n\n        superuser = self._create_superuser(\"superuser\")\n        self.client.force_login(superuser)\n        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n\n        # Send the POST from User1 for step 3. It's still using the changelist\n        # ordering from before User2's edits in step 2.\n        data = {\n            \"form-TOTAL_FORMS\": \"3\",\n            \"form-INITIAL_FORMS\": \"3\",\n            \"form-MIN_NUM_FORMS\": \"0\",\n            \"form-MAX_NUM_FORMS\": \"1000\",\n            \"form-0-uuid\": str(d.pk),\n            \"form-1-uuid\": str(c.pk),\n            \"form-2-uuid\": str(a.pk),\n            \"form-0-load\": \"9.0\",\n            \"form-0-speed\": \"9.0\",\n            \"form-1-load\": \"5.0\",\n            \"form-1-speed\": \"5.0\",\n            \"form-2-load\": \"5.0\",\n            \"form-2-speed\": \"4.0\",\n            \"_save\": \"Save\",\n        }\n        response = self.client.post(\n            changelist_url, data, follow=True, extra={\"o\": \"-2\"}\n        )\n\n        # The object User1 edited in step 3 is displayed on the changelist and\n        # has the correct edits applied.\n        self.assertContains(response, \"1 swallow was changed successfully.\")\n        self.assertContains(response, a.origin)\n        a.refresh_from_db()\n        self.assertEqual(a.load, float(data[\"form-2-load\"]))\n        self.assertEqual(a.speed, float(data[\"form-2-speed\"]))\n        b.refresh_from_db()\n        self.assertEqual(b.load, 2)\n        self.assertEqual(b.speed, 2)\n        c.refresh_from_db()\n        self.assertEqual(c.load, float(data[\"form-1-load\"]))\n        self.assertEqual(c.speed, float(data[\"form-1-speed\"]))\n        d.refresh_from_db()\n        self.assertEqual(d.load, float(data[\"form-0-load\"]))\n        self.assertEqual(d.speed, float(data[\"form-0-speed\"]))\n        # No new swallows were created.\n        self.assertEqual(len(Swallow.objects.all()), 4)\n\n    def test_get_edited_object_ids(self):\n        a = Swallow.objects.create(origin=\"Swallow A\", load=4, speed=1)\n        b = Swallow.objects.create(origin=\"Swallow B\", load=2, speed=2)\n        c = Swallow.objects.create(origin=\"Swallow C\", load=5, speed=5)\n        superuser = self._create_superuser(\"superuser\")\n        self.client.force_login(superuser)\n        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n        m = SwallowAdmin(Swallow, custom_site)\n        data = {\n            \"form-TOTAL_FORMS\": \"3\",\n            \"form-INITIAL_FORMS\": \"3\",\n            \"form-MIN_NUM_FORMS\": \"0\",\n            \"form-MAX_NUM_FORMS\": \"1000\",\n            \"form-0-uuid\": str(a.pk),\n            \"form-1-uuid\": str(b.pk),\n            \"form-2-uuid\": str(c.pk),\n            \"form-0-load\": \"9.0\",\n            \"form-0-speed\": \"9.0\",\n            \"form-1-load\": \"5.0\",\n            \"form-1-speed\": \"5.0\",\n            \"form-2-load\": \"5.0\",\n            \"form-2-speed\": \"4.0\",\n            \"_save\": \"Save\",\n        }\n        request = self.factory.post(changelist_url, data=data)\n        pks = m._get_edited_object_pks(request, prefix=\"form\")\n        self.assertEqual(sorted(pks), sorted([str(a.pk), str(b.pk), str(c.pk)]))\n\n    def test_get_list_editable_queryset(self):\n        a = Swallow.objects.create(origin=\"Swallow A\", load=4, speed=1)\n        Swallow.objects.create(origin=\"Swallow B\", load=2, speed=2)\n        data = {\n            \"form-TOTAL_FORMS\": \"2\",\n            \"form-INITIAL_FORMS\": \"2\",\n            \"form-MIN_NUM_FORMS\": \"0\",\n            \"form-MAX_NUM_FORMS\": \"1000\",\n            \"form-0-uuid\": str(a.pk),\n            \"form-0-load\": \"10\",\n            \"_save\": \"Save\",\n        }\n        superuser = self._create_superuser(\"superuser\")\n        self.client.force_login(superuser)\n        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n        m = SwallowAdmin(Swallow, custom_site)\n        request = self.factory.post(changelist_url, data=data)\n        queryset = m._get_list_editable_queryset(request, prefix=\"form\")\n        self.assertEqual(queryset.count(), 1)\n        data[\"form-0-uuid\"] = \"INVALD_PRIMARY_KEY\"\n        # The unfiltered queryset is returned if there's invalid data.\n        request = self.factory.post(changelist_url, data=data)\n        queryset = m._get_list_editable_queryset(request, prefix=\"form\")\n        self.assertEqual(queryset.count(), 2)\n\n    def test_get_list_editable_queryset_with_regex_chars_in_prefix(self):\n        a = Swallow.objects.create(origin=\"Swallow A\", load=4, speed=1)\n        Swallow.objects.create(origin=\"Swallow B\", load=2, speed=2)\n        data = {\n            \"form$-TOTAL_FORMS\": \"2\",\n            \"form$-INITIAL_FORMS\": \"2\",\n            \"form$-MIN_NUM_FORMS\": \"0\",\n            \"form$-MAX_NUM_FORMS\": \"1000\",\n            \"form$-0-uuid\": str(a.pk),\n            \"form$-0-load\": \"10\",\n            \"_save\": \"Save\",\n        }\n        superuser = self._create_superuser(\"superuser\")\n        self.client.force_login(superuser)\n        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n        m = SwallowAdmin(Swallow, custom_site)\n        request = self.factory.post(changelist_url, data=data)\n        queryset = m._get_list_editable_queryset(request, prefix=\"form$\")\n        self.assertEqual(queryset.count(), 1)\n\n    def test_changelist_view_list_editable_changed_objects_uses_filter(self):\n        \"\"\"\n        list_editable edits use a filtered queryset to limit memory usage.\n        \"\"\"\n        a = Swallow.objects.create(origin=\"Swallow A\", load=4, speed=1)\n        Swallow.objects.create(origin=\"Swallow B\", load=2, speed=2)\n        data = {\n            \"form-TOTAL_FORMS\": \"2\",\n            \"form-INITIAL_FORMS\": \"2\",\n            \"form-MIN_NUM_FORMS\": \"0\",\n            \"form-MAX_NUM_FORMS\": \"1000\",\n            \"form-0-uuid\": str(a.pk),\n            \"form-0-load\": \"10\",\n            \"_save\": \"Save\",\n        }\n        superuser = self._create_superuser(\"superuser\")\n        self.client.force_login(superuser)\n        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n        with CaptureQueriesContext(connection) as context:\n            response = self.client.post(changelist_url, data=data)\n            self.assertEqual(response.status_code, 200)\n            self.assertIn(\"WHERE\", context.captured_queries[4][\"sql\"])\n            self.assertIn(\"IN\", context.captured_queries[4][\"sql\"])\n            # Check only the first few characters since the UUID may have\n            # dashes.\n            self.assertIn(str(a.pk)[:8], context.captured_queries[4][\"sql\"])\n\n    def test_list_editable_error_title(self):\n        a = Swallow.objects.create(origin=\"Swallow A\", load=4, speed=1)\n        Swallow.objects.create(origin=\"Swallow B\", load=2, speed=2)\n        data = {\n            \"form-TOTAL_FORMS\": \"2\",\n            \"form-INITIAL_FORMS\": \"2\",\n            \"form-MIN_NUM_FORMS\": \"0\",\n            \"form-MAX_NUM_FORMS\": \"1000\",\n            \"form-0-uuid\": str(a.pk),\n            \"form-0-load\": \"invalid\",\n            \"_save\": \"Save\",\n        }\n        superuser = self._create_superuser(\"superuser\")\n        self.client.force_login(superuser)\n        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n        response = self.client.post(changelist_url, data=data)\n        self.assertContains(response, \"Error: Select swallow to change\")\n\n    def test_deterministic_order_for_unordered_model(self):\n        \"\"\"\n        The primary key is used in the ordering of the changelist's results to\n        guarantee a deterministic order, even when the model doesn't have any\n        default ordering defined (#17198).\n        \"\"\"\n        superuser = self._create_superuser(\"superuser\")\n\n        for counter in range(1, 51):\n            UnorderedObject.objects.create(id=counter, bool=True)\n\n        class UnorderedObjectAdmin(admin.ModelAdmin):\n            list_per_page = 10\n\n        def check_results_order(ascending=False):\n            custom_site.register(UnorderedObject, UnorderedObjectAdmin)\n            model_admin = UnorderedObjectAdmin(UnorderedObject, custom_site)\n            counter = 0 if ascending else 51\n            for page in range(1, 6):\n                request = self._mocked_authenticated_request(\n                    \"/unorderedobject/?p=%s\" % page, superuser\n                )\n                response = model_admin.changelist_view(request)\n                for result in response.context_data[\"cl\"].result_list:\n                    counter += 1 if ascending else -1\n                    self.assertEqual(result.id, counter)\n            custom_site.unregister(UnorderedObject)\n\n        # When no order is defined at all, everything is ordered by '-pk'.\n        check_results_order()\n\n        # When an order field is defined but multiple records have the same\n        # value for that field, make sure everything gets ordered by -pk as\n        # well.\n        UnorderedObjectAdmin.ordering = [\"bool\"]\n        check_results_order()\n\n        # When order fields are defined, including the pk itself, use them.\n        UnorderedObjectAdmin.ordering = [\"bool\", \"-pk\"]\n        check_results_order()\n        UnorderedObjectAdmin.ordering = [\"bool\", \"pk\"]\n        check_results_order(ascending=True)\n        UnorderedObjectAdmin.ordering = [\"-id\", \"bool\"]\n        check_results_order()\n        UnorderedObjectAdmin.ordering = [\"id\", \"bool\"]\n        check_results_order(ascending=True)\n\n    def test_ordering_from_model_meta(self):\n        Swallow.objects.create(origin=\"Swallow A\", load=4, speed=2)\n        Swallow.objects.create(origin=\"Swallow B\", load=2, speed=1)\n        Swallow.objects.create(origin=\"Swallow C\", load=5, speed=1)\n        m = SwallowAdmin(Swallow, custom_site)\n        request = self._mocked_authenticated_request(\"/swallow/?o=\", self.superuser)\n        changelist = m.get_changelist_instance(request)\n        queryset = changelist.get_queryset(request)\n        self.assertQuerySetEqual(\n            queryset,\n            [(1.0, 2.0), (1.0, 5.0), (2.0, 4.0)],\n            lambda s: (s.speed, s.load),\n        )\n\n    def test_deterministic_order_for_model_ordered_by_its_manager(self):\n        \"\"\"\n        The primary key is used in the ordering of the changelist's results to\n        guarantee a deterministic order, even when the model has a manager that\n        defines a default ordering (#17198).\n        \"\"\"\n        superuser = self._create_superuser(\"superuser\")\n\n        for counter in range(1, 51):\n            OrderedObject.objects.create(id=counter, bool=True, number=counter)\n\n        class OrderedObjectAdmin(admin.ModelAdmin):\n            list_per_page = 10\n\n        def check_results_order(ascending=False):\n            custom_site.register(OrderedObject, OrderedObjectAdmin)\n            model_admin = OrderedObjectAdmin(OrderedObject, custom_site)\n            counter = 0 if ascending else 51\n            for page in range(1, 6):\n                request = self._mocked_authenticated_request(\n                    \"/orderedobject/?p=%s\" % page, superuser\n                )\n                response = model_admin.changelist_view(request)\n                for result in response.context_data[\"cl\"].result_list:\n                    counter += 1 if ascending else -1\n                    self.assertEqual(result.id, counter)\n            custom_site.unregister(OrderedObject)\n\n        # When no order is defined at all, use the model's default ordering\n        # (i.e. 'number').\n        check_results_order(ascending=True)\n\n        # When an order field is defined but multiple records have the same\n        # value for that field, make sure everything gets ordered by -pk as\n        # well.\n        OrderedObjectAdmin.ordering = [\"bool\"]\n        check_results_order()\n\n        # When order fields are defined, including the pk itself, use them.\n        OrderedObjectAdmin.ordering = [\"bool\", \"-pk\"]\n        check_results_order()\n        OrderedObjectAdmin.ordering = [\"bool\", \"pk\"]\n        check_results_order(ascending=True)\n        OrderedObjectAdmin.ordering = [\"-id\", \"bool\"]\n        check_results_order()\n        OrderedObjectAdmin.ordering = [\"id\", \"bool\"]\n        check_results_order(ascending=True)\n\n    @isolate_apps(\"admin_changelist\")\n    def test_total_ordering_optimization(self):\n        class Related(models.Model):\n            unique_field = models.BooleanField(unique=True)\n\n            class Meta:\n                ordering = (\"unique_field\",)\n\n        class Model(models.Model):\n            unique_field = models.BooleanField(unique=True)\n            unique_nullable_field = models.BooleanField(unique=True, null=True)\n            related = models.ForeignKey(Related, models.CASCADE)\n            other_related = models.ForeignKey(Related, models.CASCADE)\n            related_unique = models.OneToOneField(Related, models.CASCADE)\n            field = models.BooleanField()\n            other_field = models.BooleanField()\n            null_field = models.BooleanField(null=True)\n\n            class Meta:\n                unique_together = {\n                    (\"field\", \"other_field\"),\n                    (\"field\", \"null_field\"),\n                    (\"related\", \"other_related_id\"),\n                }\n\n        class ModelAdmin(admin.ModelAdmin):\n            def get_queryset(self, request):\n                return Model.objects.none()\n\n        request = self._mocked_authenticated_request(\"/\", self.superuser)\n        site = admin.AdminSite(name=\"admin\")\n        model_admin = ModelAdmin(Model, site)\n        change_list = model_admin.get_changelist_instance(request)\n        tests = (\n            ([], [\"-pk\"]),\n            # Unique non-nullable field.\n            ([\"unique_field\"], [\"unique_field\"]),\n            ([\"-unique_field\"], [\"-unique_field\"]),\n            # Unique nullable field.\n            ([\"unique_nullable_field\"], [\"unique_nullable_field\", \"-pk\"]),\n            # Field.\n            ([\"field\"], [\"field\", \"-pk\"]),\n            # Related field introspection is not implemented.\n            ([\"related__unique_field\"], [\"related__unique_field\", \"-pk\"]),\n            # Related attname unique.\n            ([\"related_unique_id\"], [\"related_unique_id\"]),\n            # Related ordering introspection is not implemented.\n            ([\"related_unique\"], [\"related_unique\", \"-pk\"]),\n            # Composite unique.\n            ([\"field\", \"-other_field\"], [\"field\", \"-other_field\"]),\n            # Composite unique nullable.\n            ([\"-field\", \"null_field\"], [\"-field\", \"null_field\", \"-pk\"]),\n            # Composite unique and nullable.\n            (\n                [\"-field\", \"null_field\", \"other_field\"],\n                [\"-field\", \"null_field\", \"other_field\"],\n            ),\n            # Composite unique attnames.\n            ([\"related_id\", \"-other_related_id\"], [\"related_id\", \"-other_related_id\"]),\n            # Composite unique names.\n            ([\"related\", \"-other_related_id\"], [\"related\", \"-other_related_id\", \"-pk\"]),\n        )\n        # F() objects composite unique.\n        total_ordering = [F(\"field\"), F(\"other_field\").desc(nulls_last=True)]\n        # F() objects composite unique nullable.\n        non_total_ordering = [F(\"field\"), F(\"null_field\").desc(nulls_last=True)]\n        tests += (\n            (total_ordering, total_ordering),\n            (non_total_ordering, non_total_ordering + [\"-pk\"]),\n        )\n        for ordering, expected in tests:\n            with self.subTest(ordering=ordering):\n                self.assertEqual(\n                    change_list._get_deterministic_ordering(ordering), expected\n                )\n\n    @isolate_apps(\"admin_changelist\")\n    def test_total_ordering_optimization_meta_constraints(self):\n        class Related(models.Model):\n            unique_field = models.BooleanField(unique=True)\n\n            class Meta:\n                ordering = (\"unique_field\",)\n\n        class Model(models.Model):\n            field_1 = models.BooleanField()\n            field_2 = models.BooleanField()\n            field_3 = models.BooleanField()\n            field_4 = models.BooleanField()\n            field_5 = models.BooleanField()\n            field_6 = models.BooleanField()\n            nullable_1 = models.BooleanField(null=True)\n            nullable_2 = models.BooleanField(null=True)\n            related_1 = models.ForeignKey(Related, models.CASCADE)\n            related_2 = models.ForeignKey(Related, models.CASCADE)\n            related_3 = models.ForeignKey(Related, models.CASCADE)\n            related_4 = models.ForeignKey(Related, models.CASCADE)\n\n            class Meta:\n                constraints = [\n                    *[\n                        models.UniqueConstraint(fields=fields, name=\"\".join(fields))\n                        for fields in (\n                            [\"field_1\"],\n                            [\"nullable_1\"],\n                            [\"related_1\"],\n                            [\"related_2_id\"],\n                            [\"field_2\", \"field_3\"],\n                            [\"field_2\", \"nullable_2\"],\n                            [\"field_2\", \"related_3\"],\n                            [\"field_3\", \"related_4_id\"],\n                        )\n                    ],\n                    models.CheckConstraint(condition=models.Q(id__gt=0), name=\"foo\"),\n                    models.UniqueConstraint(\n                        fields=[\"field_5\"],\n                        condition=models.Q(id__gt=10),\n                        name=\"total_ordering_1\",\n                    ),\n                    models.UniqueConstraint(\n                        fields=[\"field_6\"],\n                        condition=models.Q(),\n                        name=\"total_ordering\",\n                    ),\n                ]\n\n        class ModelAdmin(admin.ModelAdmin):\n            def get_queryset(self, request):\n                return Model.objects.none()\n\n        request = self._mocked_authenticated_request(\"/\", self.superuser)\n        site = admin.AdminSite(name=\"admin\")\n        model_admin = ModelAdmin(Model, site)\n        change_list = model_admin.get_changelist_instance(request)\n        tests = (\n            # Unique non-nullable field.\n            ([\"field_1\"], [\"field_1\"]),\n            # Unique nullable field.\n            ([\"nullable_1\"], [\"nullable_1\", \"-pk\"]),\n            # Related attname unique.\n            ([\"related_1_id\"], [\"related_1_id\"]),\n            ([\"related_2_id\"], [\"related_2_id\"]),\n            # Related ordering introspection is not implemented.\n            ([\"related_1\"], [\"related_1\", \"-pk\"]),\n            # Composite unique.\n            ([\"-field_2\", \"field_3\"], [\"-field_2\", \"field_3\"]),\n            # Composite unique nullable.\n            ([\"field_2\", \"-nullable_2\"], [\"field_2\", \"-nullable_2\", \"-pk\"]),\n            # Composite unique and nullable.\n            (\n                [\"field_2\", \"-nullable_2\", \"field_3\"],\n                [\"field_2\", \"-nullable_2\", \"field_3\"],\n            ),\n            # Composite field and related field name.\n            ([\"field_2\", \"-related_3\"], [\"field_2\", \"-related_3\", \"-pk\"]),\n            ([\"field_3\", \"related_4\"], [\"field_3\", \"related_4\", \"-pk\"]),\n            # Composite field and related field attname.\n            ([\"field_2\", \"related_3_id\"], [\"field_2\", \"related_3_id\"]),\n            ([\"field_3\", \"-related_4_id\"], [\"field_3\", \"-related_4_id\"]),\n            # Partial unique constraint is ignored.\n            ([\"field_5\"], [\"field_5\", \"-pk\"]),\n            # Unique constraint with an empty condition.\n            ([\"field_6\"], [\"field_6\"]),\n        )\n        for ordering, expected in tests:\n            with self.subTest(ordering=ordering):\n                self.assertEqual(\n                    change_list._get_deterministic_ordering(ordering), expected\n                )\n\n    def test_dynamic_list_filter(self):\n        \"\"\"\n        Regression tests for ticket #17646: dynamic list_filter support.\n        \"\"\"\n        parent = Parent.objects.create(name=\"parent\")\n        for i in range(10):\n            Child.objects.create(name=\"child %s\" % i, parent=parent)\n\n        user_noparents = self._create_superuser(\"noparents\")\n        user_parents = self._create_superuser(\"parents\")\n\n        # Test with user 'noparents'\n        m = DynamicListFilterChildAdmin(Child, custom_site)\n        request = self._mocked_authenticated_request(\"/child/\", user_noparents)\n        response = m.changelist_view(request)\n        self.assertEqual(response.context_data[\"cl\"].list_filter, [\"name\", \"age\"])\n\n        # Test with user 'parents'\n        m = DynamicListFilterChildAdmin(Child, custom_site)\n        request = self._mocked_authenticated_request(\"/child/\", user_parents)\n        response = m.changelist_view(request)\n        self.assertEqual(\n            response.context_data[\"cl\"].list_filter, (\"parent\", \"name\", \"age\")\n        )\n\n    def test_dynamic_search_fields(self):\n        child = self._create_superuser(\"child\")\n        m = DynamicSearchFieldsChildAdmin(Child, custom_site)\n        request = self._mocked_authenticated_request(\"/child/\", child)\n        response = m.changelist_view(request)\n        self.assertEqual(response.context_data[\"cl\"].search_fields, (\"name\", \"age\"))\n\n    def test_pagination_page_range(self):\n        \"\"\"\n        Regression tests for ticket #15653: ensure the number of pages\n        generated for changelist views are correct.\n        \"\"\"\n        # instantiating and setting up ChangeList object\n        m = GroupAdmin(Group, custom_site)\n        request = self.factory.get(\"/group/\")\n        request.user = self.superuser\n        cl = m.get_changelist_instance(request)\n        cl.list_per_page = 10\n\n        ELLIPSIS = cl.paginator.ELLIPSIS\n        for number, pages, expected in [\n            (1, 1, []),\n            (1, 2, [1, 2]),\n            (6, 11, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),\n            (6, 12, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),\n            (6, 13, [1, 2, 3, 4, 5, 6, 7, 8, 9, ELLIPSIS, 12, 13]),\n            (7, 12, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),\n            (7, 13, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]),\n            (7, 14, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, ELLIPSIS, 13, 14]),\n            (8, 13, [1, 2, ELLIPSIS, 5, 6, 7, 8, 9, 10, 11, 12, 13]),\n            (8, 14, [1, 2, ELLIPSIS, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]),\n            (8, 15, [1, 2, ELLIPSIS, 5, 6, 7, 8, 9, 10, 11, ELLIPSIS, 14, 15]),\n        ]:\n            with self.subTest(number=number, pages=pages):\n                # assuming exactly `pages * cl.list_per_page` objects\n                Group.objects.all().delete()\n                for i in range(pages * cl.list_per_page):\n                    Group.objects.create(name=\"test band\")\n\n                # setting page number and calculating page range\n                cl.page_num = number\n                cl.get_results(request)\n                self.assertEqual(list(pagination(cl)[\"page_range\"]), expected)\n\n    def test_object_tools_displayed_no_add_permission(self):\n        \"\"\"\n        When ModelAdmin.has_add_permission() returns False, the object-tools\n        block is still shown.\n        \"\"\"\n        superuser = self._create_superuser(\"superuser\")\n        m = EventAdmin(Event, custom_site)\n        request = self._mocked_authenticated_request(\"/event/\", superuser)\n        self.assertFalse(m.has_add_permission(request))\n        response = m.changelist_view(request)\n        self.assertIn('<ul class=\"object-tools\">', response.rendered_content)\n        # The \"Add\" button inside the object-tools shouldn't appear.\n        self.assertNotIn(\"Add event\", response.rendered_content)\n\n    def test_search_help_text(self):\n        superuser = self._create_superuser(\"superuser\")\n        m = BandAdmin(Band, custom_site)\n        # search_fields without search_help_text.\n        m.search_fields = [\"name\"]\n        request = self._mocked_authenticated_request(\"/band/\", superuser)\n        response = m.changelist_view(request)\n        self.assertIsNone(response.context_data[\"cl\"].search_help_text)\n        self.assertNotContains(response, '<div class=\"help id=\"searchbar_helptext\">')\n        # search_fields with search_help_text.\n        m.search_help_text = \"Search help text\"\n        request = self._mocked_authenticated_request(\"/band/\", superuser)\n        response = m.changelist_view(request)\n        self.assertEqual(\n            response.context_data[\"cl\"].search_help_text, \"Search help text\"\n        )\n        self.assertContains(\n            response, '<div class=\"help\" id=\"searchbar_helptext\">Search help text</div>'\n        )\n        self.assertContains(\n            response,\n            '<input type=\"text\" size=\"40\" name=\"q\" value=\"\" id=\"searchbar\" '\n            'aria-describedby=\"searchbar_helptext\">',\n        )\n\n    def test_search_role(self):\n        m = BandAdmin(Band, custom_site)\n        m.search_fields = [\"name\"]\n        request = self._mocked_authenticated_request(\"/band/\", self.superuser)\n        response = m.changelist_view(request)\n        self.assertContains(\n            response,\n            '<h2 id=\"changelist-search-form\" class=\"visually-hidden\">Search bands</h2>',\n        )\n        self.assertContains(\n            response,\n            '<form id=\"changelist-search\" method=\"get\" role=\"search\" '\n            'aria-labelledby=\"changelist-search-form\">',\n        )\n\n    def test_search_bar_total_link_preserves_options(self):\n        self.client.force_login(self.superuser)\n        url = reverse(\"admin:auth_user_changelist\")\n        for data, href in (\n            ({\"is_staff__exact\": \"0\"}, \"?\"),\n            ({\"is_staff__exact\": \"0\", IS_POPUP_VAR: \"1\"}, f\"?{IS_POPUP_VAR}=1\"),\n            ({\"is_staff__exact\": \"0\", IS_FACETS_VAR: \"\"}, f\"?{IS_FACETS_VAR}\"),\n            (\n                {\"is_staff__exact\": \"0\", IS_POPUP_VAR: \"1\", IS_FACETS_VAR: \"\"},\n                f\"?{IS_POPUP_VAR}=1&{IS_FACETS_VAR}\",\n            ),\n        ):\n            with self.subTest(data=data):\n                response = self.client.get(url, data=data)\n                self.assertContains(\n                    response, f'0 results (<a href=\"{href}\">1 total</a>)'\n                )\n\n    def test_list_display_related_field(self):\n        parent = Parent.objects.create(name=\"I am your father\")\n        child = Child.objects.create(name=\"I am your child\", parent=parent)\n        GrandChild.objects.create(name=\"I am your grandchild\", parent=child)\n        request = self._mocked_authenticated_request(\"/grandchild/\", self.superuser)\n\n        m = GrandChildAdmin(GrandChild, custom_site)\n        response = m.changelist_view(request)\n        self.assertContains(response, parent.name)\n        self.assertContains(response, child.name)\n\n    def test_list_display_related_field_null(self):\n        GrandChild.objects.create(name=\"I am parentless\", parent=None)\n        request = self._mocked_authenticated_request(\"/grandchild/\", self.superuser)\n\n        m = GrandChildAdmin(GrandChild, custom_site)\n        response = m.changelist_view(request)\n        self.assertContains(response, '<td class=\"field-parent__name\">-</td>')\n        self.assertContains(response, '<td class=\"field-parent__parent__name\">-</td>')\n\n    def test_list_display_related_field_ordering(self):\n        parent_a = Parent.objects.create(name=\"Alice\")\n        parent_z = Parent.objects.create(name=\"Zara\")\n        Child.objects.create(name=\"Alice's child\", parent=parent_a)\n        Child.objects.create(name=\"Zara's child\", parent=parent_z)\n\n        class ChildAdmin(admin.ModelAdmin):\n            list_display = [\"name\", \"parent__name\"]\n            list_per_page = 1\n\n        m = ChildAdmin(Child, custom_site)\n\n        # Order ascending.\n        request = self._mocked_authenticated_request(\"/grandchild/?o=1\", self.superuser)\n        response = m.changelist_view(request)\n        self.assertContains(response, parent_a.name)\n        self.assertNotContains(response, parent_z.name)\n\n        # Order descending.\n        request = self._mocked_authenticated_request(\n            \"/grandchild/?o=-1\", self.superuser\n        )\n        response = m.changelist_view(request)\n        self.assertNotContains(response, parent_a.name)\n        self.assertContains(response, parent_z.name)\n\n    def test_list_display_related_field_ordering_fields(self):\n        class ChildAdmin(admin.ModelAdmin):\n            list_display = [\"name\", \"parent__name\"]\n            ordering = [\"parent__name\"]\n\n        m = ChildAdmin(Child, custom_site)\n        request = self._mocked_authenticated_request(\"/\", self.superuser)\n        cl = m.get_changelist_instance(request)\n        self.assertEqual(cl.get_ordering_field_columns(), {2: \"asc\"})\n\n", "metadata": {"source": "github.com/django/django/tests/admin_changelist/tests.py", "language": "python", "complexity": "complex", "type": "class", "lines": 1782, "methods": 1, "authentic": true}, "validation": {"overall_quality": 0.8200000000000001, "syntax_valid": true, "completeness_score": 0.44999999999999996, "authenticity_score": 1.0}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 1 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class Song(models.Model):\n    title = models.CharField(max_length=150)\n    album = models.ForeignKey(Album, models.CASCADE)\n    original_release = models.DateField(editable=False)\n\n    class Meta:\n        ordering = (\"title\",)\n\n    def __str__(self):\n        return self.title\n\n    def readonly_method_on_model(self):\n        # does nothing\n        pass\n\n", "metadata": {"source": "github.com/django/django/tests/admin_checks/models.py", "language": "python", "complexity": "simple", "type": "class", "lines": 16, "methods": 1, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class TwoAlbumFKAndAnE(models.Model):\n    album1 = models.ForeignKey(Album, models.CASCADE, related_name=\"album1_set\")\n    album2 = models.ForeignKey(Album, models.CASCADE, related_name=\"album2_set\")\n    e = models.CharField(max_length=1)\n\n", "metadata": {"source": "github.com/django/django/tests/admin_checks/models.py", "language": "python", "complexity": "simple", "type": "class", "lines": 6, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class Book(models.Model):\n    name = models.CharField(max_length=100)\n    subtitle = models.CharField(max_length=100)\n    price = models.FloatField()\n    authors = models.ManyToManyField(Author, through=\"AuthorsBooks\")\n\n", "metadata": {"source": "github.com/django/django/tests/admin_checks/models.py", "language": "python", "complexity": "simple", "type": "class", "lines": 7, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class AuthorsBooks(models.Model):\n    author = models.ForeignKey(Author, models.CASCADE)\n    book = models.ForeignKey(Book, models.CASCADE)\n    featured = models.BooleanField()\n\n", "metadata": {"source": "github.com/django/django/tests/admin_checks/models.py", "language": "python", "complexity": "simple", "type": "class", "lines": 6, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class Influence(models.Model):\n    name = models.TextField()\n\n    content_type = models.ForeignKey(ContentType, models.CASCADE)\n    object_id = models.PositiveIntegerField()\n    content_object = GenericForeignKey(\"content_type\", \"object_id\")\n", "metadata": {"source": "github.com/django/django/tests/admin_checks/models.py", "language": "python", "complexity": "simple", "type": "class", "lines": 7, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database function that check\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def check(self, **kwargs):\n        return [\"error!\"]\n\n", "metadata": {"source": "github.com/django/django/tests/admin_checks/tests.py", "language": "python", "complexity": "simple", "type": "function", "lines": 4, "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class ValidFields(admin.ModelAdmin):\n    form = SongForm\n    fields = [\"title\"]\n\n", "metadata": {"source": "github.com/django/django/tests/admin_checks/tests.py", "language": "python", "complexity": "simple", "type": "class", "lines": 5, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 1 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class ValidFormFieldsets(admin.ModelAdmin):\n    def get_form(self, request, obj=None, **kwargs):\n        class ExtraFieldForm(SongForm):\n            name = forms.CharField(max_length=50)\n\n        return ExtraFieldForm\n\n    fieldsets = (\n        (\n            None,\n            {\n                \"fields\": (\"name\",),\n            },\n        ),\n    )\n\n", "metadata": {"source": "github.com/django/django/tests/admin_checks/tests.py", "language": "python", "complexity": "simple", "type": "class", "lines": 17, "methods": 1, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 1 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class MyAdmin(admin.ModelAdmin):\n    def check(self, **kwargs):\n        return [\"error!\"]\n\n", "metadata": {"source": "github.com/django/django/tests/admin_checks/tests.py", "language": "python", "complexity": "simple", "type": "class", "lines": 5, "methods": 1, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 1 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class SystemChecksTestCase(SimpleTestCase):\n    databases = \"__all__\"\n\n    def test_checks_are_performed(self):\n        admin.site.register(Song, MyAdmin)\n        try:\n            errors = checks.run_checks()\n            expected = [\"error!\"]\n            self.assertEqual(errors, expected)\n        finally:\n            admin.site.unregister(Song)\n\n    @override_settings(INSTALLED_APPS=[\"django.contrib.admin\"])\n    def test_apps_dependencies(self):\n        errors = admin.checks.check_dependencies()\n        expected = [\n            checks.Error(\n                \"'django.contrib.contenttypes' must be in \"\n                \"INSTALLED_APPS in order to use the admin application.\",\n                id=\"admin.E401\",\n            ),\n            checks.Error(\n                \"'django.contrib.auth' must be in INSTALLED_APPS in order \"\n                \"to use the admin application.\",\n                id=\"admin.E405\",\n            ),\n            checks.Error(\n                \"'django.contrib.messages' must be in INSTALLED_APPS in order \"\n                \"to use the admin application.\",\n                id=\"admin.E406\",\n            ),\n        ]\n        self.assertEqual(errors, expected)\n\n    @override_settings(TEMPLATES=[])\n    def test_no_template_engines(self):\n        self.assertEqual(\n            admin.checks.check_dependencies(),\n            [\n                checks.Error(\n                    \"A 'django.template.backends.django.DjangoTemplates' \"\n                    \"instance must be configured in TEMPLATES in order to use \"\n                    \"the admin application.\",\n                    id=\"admin.E403\",\n                )\n            ],\n        )\n\n    @override_settings(\n        TEMPLATES=[\n            {\n                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n                \"DIRS\": [],\n                \"APP_DIRS\": True,\n                \"OPTIONS\": {\n                    \"context_processors\": [],\n                },\n            }\n        ],\n    )\n    def test_context_processor_dependencies(self):\n        expected = [\n            checks.Error(\n                \"'django.contrib.auth.context_processors.auth' must be \"\n                \"enabled in DjangoTemplates (TEMPLATES) if using the default \"\n                \"auth backend in order to use the admin application.\",\n                id=\"admin.E402\",\n            ),\n            checks.Error(\n                \"'django.contrib.messages.context_processors.messages' must \"\n                \"be enabled in DjangoTemplates (TEMPLATES) in order to use \"\n                \"the admin application.\",\n                id=\"admin.E404\",\n            ),\n            checks.Warning(\n                \"'django.template.context_processors.request' must be enabled \"\n                \"in DjangoTemplates (TEMPLATES) in order to use the admin \"\n                \"navigation sidebar.\",\n                id=\"admin.W411\",\n            ),\n        ]\n        self.assertEqual(admin.checks.check_dependencies(), expected)\n        # The first error doesn't happen if\n        # 'django.contrib.auth.backends.ModelBackend' isn't in\n        # AUTHENTICATION_BACKENDS.\n        with self.settings(AUTHENTICATION_BACKENDS=[]):\n            self.assertEqual(admin.checks.check_dependencies(), expected[1:])\n\n    @override_settings(\n        AUTHENTICATION_BACKENDS=[\"admin_checks.tests.ModelBackendSubclass\"],\n        TEMPLATES=[\n            {\n                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n                \"DIRS\": [],\n                \"APP_DIRS\": True,\n                \"OPTIONS\": {\n                    \"context_processors\": [\n                        \"django.template.context_processors.request\",\n                        \"django.contrib.messages.context_processors.messages\",\n                    ],\n                },\n            }\n        ],\n    )\n    def test_context_processor_dependencies_model_backend_subclass(self):\n        self.assertEqual(\n            admin.checks.check_dependencies(),\n            [\n                checks.Error(\n                    \"'django.contrib.auth.context_processors.auth' must be \"\n                    \"enabled in DjangoTemplates (TEMPLATES) if using the default \"\n                    \"auth backend in order to use the admin application.\",\n                    id=\"admin.E402\",\n                ),\n            ],\n        )\n\n    @override_settings(\n        TEMPLATES=[\n            {\n                \"BACKEND\": \"django.template.backends.dummy.TemplateStrings\",\n                \"DIRS\": [],\n                \"APP_DIRS\": True,\n            },\n            {\n                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n                \"DIRS\": [],\n                \"APP_DIRS\": True,\n                \"OPTIONS\": {\n                    \"context_processors\": [\n                        \"django.template.context_processors.request\",\n                        \"django.contrib.auth.context_processors.auth\",\n                        \"django.contrib.messages.context_processors.messages\",\n                    ],\n                },\n            },\n        ],\n    )\n    def test_several_templates_backends(self):\n        self.assertEqual(admin.checks.check_dependencies(), [])\n\n    @override_settings(MIDDLEWARE=[])\n    def test_middleware_dependencies(self):\n        errors = admin.checks.check_dependencies()\n        expected = [\n            checks.Error(\n                \"'django.contrib.auth.middleware.AuthenticationMiddleware' \"\n                \"must be in MIDDLEWARE in order to use the admin application.\",\n                id=\"admin.E408\",\n            ),\n            checks.Error(\n                \"'django.contrib.messages.middleware.MessageMiddleware' \"\n                \"must be in MIDDLEWARE in order to use the admin application.\",\n                id=\"admin.E409\",\n            ),\n            checks.Error(\n                \"'django.contrib.sessions.middleware.SessionMiddleware' \"\n                \"must be in MIDDLEWARE in order to use the admin application.\",\n                hint=(\n                    \"Insert \"\n                    \"'django.contrib.sessions.middleware.SessionMiddleware' \"\n                    \"before \"\n                    \"'django.contrib.auth.middleware.AuthenticationMiddleware'.\"\n                ),\n                id=\"admin.E410\",\n            ),\n        ]\n        self.assertEqual(errors, expected)\n\n    @override_settings(\n        MIDDLEWARE=[\n            \"admin_checks.tests.AuthenticationMiddlewareSubclass\",\n            \"admin_checks.tests.MessageMiddlewareSubclass\",\n            \"admin_checks.tests.SessionMiddlewareSubclass\",\n        ]\n    )\n    def test_middleware_subclasses(self):\n        self.assertEqual(admin.checks.check_dependencies(), [])\n\n    @override_settings(\n        MIDDLEWARE=[\n            \"django.contrib.does.not.Exist\",\n            \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n            \"django.contrib.messages.middleware.MessageMiddleware\",\n            \"django.contrib.sessions.middleware.SessionMiddleware\",\n        ]\n    )\n    def test_admin_check_ignores_import_error_in_middleware(self):\n        self.assertEqual(admin.checks.check_dependencies(), [])\n\n    def test_custom_adminsite(self):\n        class CustomAdminSite(admin.AdminSite):\n            pass\n\n        custom_site = CustomAdminSite()\n        custom_site.register(Song, MyAdmin)\n        try:\n            errors = checks.run_checks()\n            expected = [\"error!\"]\n            self.assertEqual(errors, expected)\n        finally:\n            custom_site.unregister(Song)\n\n    def test_allows_checks_relying_on_other_modeladmins(self):\n        class MyBookAdmin(admin.ModelAdmin):\n            def check(self, **kwargs):\n                errors = super().check(**kwargs)\n                if not self.admin_site.is_registered(Author):\n                    errors.append(\"AuthorAdmin missing!\")\n                return errors\n\n        class MyAuthorAdmin(admin.ModelAdmin):\n            pass\n\n        admin.site.register(Book, MyBookAdmin)\n        admin.site.register(Author, MyAuthorAdmin)\n        try:\n            self.assertEqual(admin.site.check(None), [])\n        finally:\n            admin.site.unregister(Book)\n            admin.site.unregister(Author)\n\n    def test_field_name_not_in_list_display(self):\n        class SongAdmin(admin.ModelAdmin):\n            list_editable = [\"original_release\"]\n\n        errors = SongAdmin(Song, AdminSite()).check()\n        expected = [\n            checks.Error(\n                \"The value of 'list_editable[0]' refers to 'original_release', \"\n                \"which is not contained in 'list_display'.\",\n                obj=SongAdmin,\n                id=\"admin.E122\",\n            )\n        ]\n        self.assertEqual(errors, expected)\n\n    def test_list_editable_not_a_list_or_tuple(self):\n        class SongAdmin(admin.ModelAdmin):\n            list_editable = \"test\"\n\n        self.assertEqual(\n            SongAdmin(Song, AdminSite()).check(),\n            [\n                checks.Error(\n                    \"The value of 'list_editable' must be a list or tuple.\",\n                    obj=SongAdmin,\n                    id=\"admin.E120\",\n                )\n            ],\n        )\n\n    def test_list_editable_missing_field(self):\n        class SongAdmin(admin.ModelAdmin):\n            list_editable = (\"test\",)\n\n        self.assertEqual(\n            SongAdmin(Song, AdminSite()).check(),\n            [\n                checks.Error(\n                    \"The value of 'list_editable[0]' refers to 'test', which is \"\n                    \"not a field of 'admin_checks.Song'.\",\n                    obj=SongAdmin,\n                    id=\"admin.E121\",\n                )\n            ],\n        )\n\n    def test_readonly_and_editable(self):\n        class SongAdmin(admin.ModelAdmin):\n            readonly_fields = [\"original_release\"]\n            list_display = [\"pk\", \"original_release\"]\n            list_editable = [\"original_release\"]\n            fieldsets = [\n                (\n                    None,\n                    {\n                        \"fields\": [\"title\", \"original_release\"],\n                    },\n                ),\n            ]\n\n        errors = SongAdmin(Song, AdminSite()).check()\n        expected = [\n            checks.Error(\n                \"The value of 'list_editable[0]' refers to 'original_release', \"\n                \"which is not editable through the admin.\",\n                obj=SongAdmin,\n                id=\"admin.E125\",\n            )\n        ]\n        self.assertEqual(errors, expected)\n\n    def test_pk_not_editable(self):\n        # PKs cannot be edited in the list.\n        class SongAdmin(admin.ModelAdmin):\n            list_display = [\"title\", \"id\"]\n            list_editable = [\"id\"]\n\n        errors = SongAdmin(Song, AdminSite()).check()\n        expected = [\n            checks.Error(\n                \"The value of 'list_editable[0]' refers to 'id', which is not editable \"\n                \"through the admin.\",\n                obj=SongAdmin,\n                id=\"admin.E125\",\n            )\n        ]\n        self.assertEqual(errors, expected)\n\n    def test_editable(self):\n        class SongAdmin(admin.ModelAdmin):\n            list_display = [\"pk\", \"title\"]\n            list_editable = [\"title\"]\n            fieldsets = [\n                (\n                    None,\n                    {\n                        \"fields\": [\"title\", \"original_release\"],\n                    },\n                ),\n            ]\n\n        errors = SongAdmin(Song, AdminSite()).check()\n        self.assertEqual(errors, [])\n\n    def test_custom_modelforms_with_fields_fieldsets(self):\n        \"\"\"\n        # Regression test for #8027: custom ModelForms with fields/fieldsets\n        \"\"\"\n        errors = ValidFields(Song, AdminSite()).check()\n        self.assertEqual(errors, [])\n\n    def test_custom_get_form_with_fieldsets(self):\n        \"\"\"\n        The fieldsets checks are skipped when the ModelAdmin.get_form() method\n        is overridden.\n        \"\"\"\n        errors = ValidFormFieldsets(Song, AdminSite()).check()\n        self.assertEqual(errors, [])\n\n    def test_fieldsets_fields_non_tuple(self):\n        \"\"\"\n        The first fieldset's fields must be a list/tuple.\n        \"\"\"\n\n        class NotATupleAdmin(admin.ModelAdmin):\n            list_display = [\"pk\", \"title\"]\n            list_editable = [\"title\"]\n            fieldsets = [\n                (None, {\"fields\": \"title\"}),  # not a tuple\n            ]\n\n        errors = NotATupleAdmin(Song, AdminSite()).check()\n        expected = [\n            checks.Error(\n                \"The value of 'fieldsets[0][1]['fields']' must be a list or tuple.\",\n                obj=NotATupleAdmin,\n                id=\"admin.E008\",\n            )\n        ]\n        self.assertEqual(errors, expected)\n\n    def test_nonfirst_fieldset(self):\n        \"\"\"\n        The second fieldset's fields must be a list/tuple.\n        \"\"\"\n\n        class NotATupleAdmin(admin.ModelAdmin):\n            fieldsets = [\n                (None, {\"fields\": (\"title\",)}),\n                (\"foo\", {\"fields\": \"author\"}),  # not a tuple\n            ]\n\n        errors = NotATupleAdmin(Song, AdminSite()).check()\n        expected = [\n            checks.Error(\n                \"The value of 'fieldsets[1][1]['fields']' must be a list or tuple.\",\n                obj=NotATupleAdmin,\n                id=\"admin.E008\",\n            )\n        ]\n        self.assertEqual(errors, expected)\n\n    def test_exclude_values(self):\n        \"\"\"\n        Tests for basic system checks of 'exclude' option values (#12689)\n        \"\"\"\n\n        class ExcludedFields1(admin.ModelAdmin):\n            exclude = \"foo\"\n\n        errors = ExcludedFields1(Book, AdminSite()).check()\n        expected = [\n            checks.Error(\n                \"The value of 'exclude' must be a list or tuple.\",\n                obj=ExcludedFields1,\n                id=\"admin.E014\",\n            )\n        ]\n        self.assertEqual(errors, expected)\n\n    def test_exclude_duplicate_values(self):\n        class ExcludedFields2(admin.ModelAdmin):\n            exclude = (\"name\", \"name\")\n\n        errors = ExcludedFields2(Book, AdminSite()).check()\n        expected = [\n            checks.Error(\n                \"The value of 'exclude' contains duplicate field(s).\",\n                hint=\"Remove duplicates of 'name'.\",\n                obj=ExcludedFields2,\n                id=\"admin.E015\",\n            )\n        ]\n        self.assertEqual(errors, expected)\n\n    def test_exclude_in_inline(self):\n        class ExcludedFieldsInline(admin.TabularInline):\n            model = Song\n            exclude = \"foo\"\n\n        class ExcludedFieldsAlbumAdmin(admin.ModelAdmin):\n            model = Album\n            inlines = [ExcludedFieldsInline]\n\n        errors = ExcludedFieldsAlbumAdmin(Album, AdminSite()).check()\n        expected = [\n            checks.Error(\n                \"The value of 'exclude' must be a list or tuple.\",\n                obj=ExcludedFieldsInline,\n                id=\"admin.E014\",\n            )\n        ]\n        self.assertEqual(errors, expected)\n\n    def test_exclude_inline_model_admin(self):\n        \"\"\"\n        Regression test for #9932 - exclude in InlineModelAdmin should not\n        contain the ForeignKey field used in ModelAdmin.model\n        \"\"\"\n\n        class SongInline(admin.StackedInline):\n            model = Song\n            exclude = [\"album\"]\n\n        class AlbumAdmin(admin.ModelAdmin):\n            model = Album\n            inlines = [SongInline]\n\n        errors = AlbumAdmin(Album, AdminSite()).check()\n        expected = [\n            checks.Error(\n                \"Cannot exclude the field 'album', because it is the foreign key \"\n                \"to the parent model 'admin_checks.Album'.\",\n                obj=SongInline,\n                id=\"admin.E201\",\n            )\n        ]\n        self.assertEqual(errors, expected)\n\n    def test_valid_generic_inline_model_admin(self):\n        \"\"\"\n        Regression test for #22034 - check that generic inlines don't look for\n        normal ForeignKey relations.\n        \"\"\"\n\n        class InfluenceInline(GenericStackedInline):\n            model = Influence\n\n        class SongAdmin(admin.ModelAdmin):\n            inlines = [InfluenceInline]\n\n        errors = SongAdmin(Song, AdminSite()).check()\n        self.assertEqual(errors, [])\n\n    def test_generic_inline_model_admin_non_generic_model(self):\n        \"\"\"\n        A model without a GenericForeignKey raises problems if it's included\n        in a GenericInlineModelAdmin definition.\n        \"\"\"\n\n        class BookInline(GenericStackedInline):\n            model = Book\n\n        class SongAdmin(admin.ModelAdmin):\n            inlines = [BookInline]\n\n        errors = SongAdmin(Song, AdminSite()).check()\n        expected = [\n            checks.Error(\n                \"'admin_checks.Book' has no GenericForeignKey.\",\n                obj=BookInline,\n                id=\"admin.E301\",\n            )\n        ]\n        self.assertEqual(errors, expected)\n\n    def test_generic_inline_model_admin_bad_ct_field(self):\n        \"\"\"\n        A GenericInlineModelAdmin errors if the ct_field points to a\n        nonexistent field.\n        \"\"\"\n\n        class InfluenceInline(GenericStackedInline):\n            model = Influence\n            ct_field = \"nonexistent\"\n\n        class SongAdmin(admin.ModelAdmin):\n            inlines = [InfluenceInline]\n\n        errors = SongAdmin(Song, AdminSite()).check()\n        expected = [\n            checks.Error(\n                \"'ct_field' references 'nonexistent', which is not a field on \"\n                \"'admin_checks.Influence'.\",\n                obj=InfluenceInline,\n                id=\"admin.E302\",\n            )\n        ]\n        self.assertEqual(errors, expected)\n\n    def test_generic_inline_model_admin_bad_fk_field(self):\n        \"\"\"\n        A GenericInlineModelAdmin errors if the ct_fk_field points to a\n        nonexistent field.\n        \"\"\"\n\n        class InfluenceInline(GenericStackedInline):\n            model = Influence\n            ct_fk_field = \"nonexistent\"\n\n        class SongAdmin(admin.ModelAdmin):\n            inlines = [InfluenceInline]\n\n        errors = SongAdmin(Song, AdminSite()).check()\n        expected = [\n            checks.Error(\n                \"'ct_fk_field' references 'nonexistent', which is not a field on \"\n                \"'admin_checks.Influence'.\",\n                obj=InfluenceInline,\n                id=\"admin.E303\",\n            )\n        ]\n        self.assertEqual(errors, expected)\n\n    def test_generic_inline_model_admin_non_gfk_ct_field(self):\n        \"\"\"\n        A GenericInlineModelAdmin raises problems if the ct_field points to a\n        field that isn't part of a GenericForeignKey.\n        \"\"\"\n\n        class InfluenceInline(GenericStackedInline):\n            model = Influence\n            ct_field = \"name\"\n\n        class SongAdmin(admin.ModelAdmin):\n            inlines = [InfluenceInline]\n\n        errors = SongAdmin(Song, AdminSite()).check()\n        expected = [\n            checks.Error(\n                \"'admin_checks.Influence' has no GenericForeignKey using \"\n                \"content type field 'name' and object ID field 'object_id'.\",\n                obj=InfluenceInline,\n                id=\"admin.E304\",\n            )\n        ]\n        self.assertEqual(errors, expected)\n\n    def test_generic_inline_model_admin_non_gfk_fk_field(self):\n        \"\"\"\n        A GenericInlineModelAdmin raises problems if the ct_fk_field points to\n        a field that isn't part of a GenericForeignKey.\n        \"\"\"\n\n        class InfluenceInline(GenericStackedInline):\n            model = Influence\n            ct_fk_field = \"name\"\n\n        class SongAdmin(admin.ModelAdmin):\n            inlines = [InfluenceInline]\n\n        errors = SongAdmin(Song, AdminSite()).check()\n        expected = [\n            checks.Error(\n                \"'admin_checks.Influence' has no GenericForeignKey using \"\n                \"content type field 'content_type' and object ID field 'name'.\",\n                obj=InfluenceInline,\n                id=\"admin.E304\",\n            )\n        ]\n        self.assertEqual(errors, expected)\n\n    def test_app_label_in_admin_checks(self):\n        class RawIdNonexistentAdmin(admin.ModelAdmin):\n            raw_id_fields = (\"nonexistent\",)\n\n        errors = RawIdNonexistentAdmin(Album, AdminSite()).check()\n        expected = [\n            checks.Error(\n                \"The value of 'raw_id_fields[0]' refers to 'nonexistent', \"\n                \"which is not a field of 'admin_checks.Album'.\",\n                obj=RawIdNonexistentAdmin,\n                id=\"admin.E002\",\n            )\n        ]\n        self.assertEqual(errors, expected)\n\n    def test_fk_exclusion(self):\n        \"\"\"\n        Regression test for #11709 - when testing for fk excluding (when\n        exclude is given) make sure fk_name is honored or things blow up when\n        there is more than one fk to the parent model.\n        \"\"\"\n\n        class TwoAlbumFKAndAnEInline(admin.TabularInline):\n            model = TwoAlbumFKAndAnE\n            exclude = (\"e\",)\n            fk_name = \"album1\"\n\n        class MyAdmin(admin.ModelAdmin):\n            inlines = [TwoAlbumFKAndAnEInline]\n\n        errors = MyAdmin(Album, AdminSite()).check()\n        self.assertEqual(errors, [])\n\n    def test_inline_self_check(self):\n        class TwoAlbumFKAndAnEInline(admin.TabularInline):\n            model = TwoAlbumFKAndAnE\n\n        class MyAdmin(admin.ModelAdmin):\n            inlines = [TwoAlbumFKAndAnEInline]\n\n        errors = MyAdmin(Album, AdminSite()).check()\n        expected = [\n            checks.Error(\n                \"'admin_checks.TwoAlbumFKAndAnE' has more than one ForeignKey \"\n                \"to 'admin_checks.Album'. You must specify a 'fk_name' \"\n                \"attribute.\",\n                obj=TwoAlbumFKAndAnEInline,\n                id=\"admin.E202\",\n            )\n        ]\n        self.assertEqual(errors, expected)\n\n    def test_inline_with_specified(self):\n        class TwoAlbumFKAndAnEInline(admin.TabularInline):\n            model = TwoAlbumFKAndAnE\n            fk_name = \"album1\"\n\n        class MyAdmin(admin.ModelAdmin):\n            inlines = [TwoAlbumFKAndAnEInline]\n\n        errors = MyAdmin(Album, AdminSite()).check()\n        self.assertEqual(errors, [])\n\n    def test_inlines_property(self):\n        class CitiesInline(admin.TabularInline):\n            model = City\n\n        class StateAdmin(admin.ModelAdmin):\n            @property\n            def inlines(self):\n                return [CitiesInline]\n\n        errors = StateAdmin(State, AdminSite()).check()\n        self.assertEqual(errors, [])\n\n    def test_readonly(self):\n        class SongAdmin(admin.ModelAdmin):\n            readonly_fields = (\"title\",)\n\n        errors = SongAdmin(Song, AdminSite()).check()\n        self.assertEqual(errors, [])\n\n    def test_readonly_on_method(self):\n        @admin.display\n        def my_function(obj):\n            pass\n\n        class SongAdmin(admin.ModelAdmin):\n            readonly_fields = (my_function,)\n\n        errors = SongAdmin(Song, AdminSite()).check()\n        self.assertEqual(errors, [])\n\n    def test_readonly_on_modeladmin(self):\n        class SongAdmin(admin.ModelAdmin):\n            readonly_fields = (\"readonly_method_on_modeladmin\",)\n\n            @admin.display\n            def readonly_method_on_modeladmin(self, obj):\n                pass\n\n        errors = SongAdmin(Song, AdminSite()).check()\n        self.assertEqual(errors, [])\n\n    def test_readonly_dynamic_attribute_on_modeladmin(self):\n        class SongAdmin(admin.ModelAdmin):\n            readonly_fields = (\"dynamic_method\",)\n\n            def __getattr__(self, item):\n                if item == \"dynamic_method\":\n\n                    @admin.display\n                    def method(obj):\n                        pass\n\n                    return method\n                raise AttributeError\n\n        errors = SongAdmin(Song, AdminSite()).check()\n        self.assertEqual(errors, [])\n\n    def test_readonly_method_on_model(self):\n        class SongAdmin(admin.ModelAdmin):\n            readonly_fields = (\"readonly_method_on_model\",)\n\n        errors = SongAdmin(Song, AdminSite()).check()\n        self.assertEqual(errors, [])\n\n    def test_nonexistent_field(self):\n        class SongAdmin(admin.ModelAdmin):\n            readonly_fields = (\"title\", \"nonexistent\")\n\n        errors = SongAdmin(Song, AdminSite()).check()\n        expected = [\n            checks.Error(\n                \"The value of 'readonly_fields[1]' refers to 'nonexistent', which is \"\n                \"not a callable, an attribute of 'SongAdmin', or an attribute of \"\n                \"'admin_checks.Song'.\",\n                obj=SongAdmin,\n                id=\"admin.E035\",\n            )\n        ]\n        self.assertEqual(errors, expected)\n\n    def test_nonexistent_field_on_inline(self):\n        class CityInline(admin.TabularInline):\n            model = City\n            readonly_fields = [\"i_dont_exist\"]  # Missing attribute\n\n        errors = CityInline(State, AdminSite()).check()\n        expected = [\n            checks.Error(\n                \"The value of 'readonly_fields[0]' refers to 'i_dont_exist', which is \"\n                \"not a callable, an attribute of 'CityInline', or an attribute of \"\n                \"'admin_checks.City'.\",\n                obj=CityInline,\n                id=\"admin.E035\",\n            )\n        ]\n        self.assertEqual(errors, expected)\n\n    def test_readonly_fields_not_list_or_tuple(self):\n        class SongAdmin(admin.ModelAdmin):\n            readonly_fields = \"test\"\n\n        self.assertEqual(\n            SongAdmin(Song, AdminSite()).check(),\n            [\n                checks.Error(\n                    \"The value of 'readonly_fields' must be a list or tuple.\",\n                    obj=SongAdmin,\n                    id=\"admin.E034\",\n                )\n            ],\n        )\n\n    def test_extra(self):\n        class SongAdmin(admin.ModelAdmin):\n            @admin.display\n            def awesome_song(self, instance):\n                if instance.title == \"Born to Run\":\n                    return \"Best Ever!\"\n                return \"Status unknown.\"\n\n        errors = SongAdmin(Song, AdminSite()).check()\n        self.assertEqual(errors, [])\n\n    def test_readonly_lambda(self):\n        class SongAdmin(admin.ModelAdmin):\n            readonly_fields = (lambda obj: \"test\",)\n\n        errors = SongAdmin(Song, AdminSite()).check()\n        self.assertEqual(errors, [])\n\n    def test_graceful_m2m_fail(self):\n        \"\"\"\n        Regression test for #12203/#12237 - Fail more gracefully when a M2M\n        field that specifies the 'through' option is included in the 'fields'\n        or the 'fieldsets' ModelAdmin options.\n        \"\"\"\n\n        class BookAdmin(admin.ModelAdmin):\n            fields = [\"authors\"]\n\n        errors = BookAdmin(Book, AdminSite()).check()\n        expected = [\n            checks.Error(\n                \"The value of 'fields' cannot include the ManyToManyField 'authors', \"\n                \"because that field manually specifies a relationship model.\",\n                obj=BookAdmin,\n                id=\"admin.E013\",\n            )\n        ]\n        self.assertEqual(errors, expected)\n\n    def test_cannot_include_through(self):\n        class FieldsetBookAdmin(admin.ModelAdmin):\n            fieldsets = (\n                (\"Header 1\", {\"fields\": (\"name\",)}),\n                (\"Header 2\", {\"fields\": (\"authors\",)}),\n            )\n\n        errors = FieldsetBookAdmin(Book, AdminSite()).check()\n        expected = [\n            checks.Error(\n                \"The value of 'fieldsets[1][1][\\\"fields\\\"]' cannot include the \"\n                \"ManyToManyField 'authors', because that field manually specifies a \"\n                \"relationship model.\",\n                obj=FieldsetBookAdmin,\n                id=\"admin.E013\",\n            )\n        ]\n        self.assertEqual(errors, expected)\n\n    def test_nested_fields(self):\n        class NestedFieldsAdmin(admin.ModelAdmin):\n            fields = (\"price\", (\"name\", \"subtitle\"))\n\n        errors = NestedFieldsAdmin(Book, AdminSite()).check()\n        self.assertEqual(errors, [])\n\n    def test_nested_fieldsets(self):\n        class NestedFieldsetAdmin(admin.ModelAdmin):\n            fieldsets = ((\"Main\", {\"fields\": (\"price\", (\"name\", \"subtitle\"))}),)\n\n        errors = NestedFieldsetAdmin(Book, AdminSite()).check()\n        self.assertEqual(errors, [])\n\n    def test_explicit_through_override(self):\n        \"\"\"\n        Regression test for #12209 -- If the explicitly provided through model\n        is specified as a string, the admin should still be able use\n        Model.m2m_field.through\n        \"\"\"\n\n        class AuthorsInline(admin.TabularInline):\n            model = Book.authors.through\n\n        class BookAdmin(admin.ModelAdmin):\n            inlines = [AuthorsInline]\n\n        errors = BookAdmin(Book, AdminSite()).check()\n        self.assertEqual(errors, [])\n\n    def test_non_model_fields(self):\n        \"\"\"\n        Regression for ensuring ModelAdmin.fields can contain non-model fields\n        that broke with r11737\n        \"\"\"\n\n        class SongForm(forms.ModelForm):\n            extra_data = forms.CharField()\n\n        class FieldsOnFormOnlyAdmin(admin.ModelAdmin):\n            form = SongForm\n            fields = [\"title\", \"extra_data\"]\n\n        errors = FieldsOnFormOnlyAdmin(Song, AdminSite()).check()\n        self.assertEqual(errors, [])\n\n    def test_non_model_first_field(self):\n        \"\"\"\n        Regression for ensuring ModelAdmin.field can handle first elem being a\n        non-model field (test fix for UnboundLocalError introduced with\n        r16225).\n        \"\"\"\n\n        class SongForm(forms.ModelForm):\n            extra_data = forms.CharField()\n\n            class Meta:\n                model = Song\n                fields = \"__all__\"\n\n        class FieldsOnFormOnlyAdmin(admin.ModelAdmin):\n            form = SongForm\n            fields = [\"extra_data\", \"title\"]\n\n        errors = FieldsOnFormOnlyAdmin(Song, AdminSite()).check()\n        self.assertEqual(errors, [])\n\n    def test_check_sublists_for_duplicates(self):\n        class MyModelAdmin(admin.ModelAdmin):\n            fields = [\"state\", [\"state\"]]\n\n        errors = MyModelAdmin(Song, AdminSite()).check()\n        expected = [\n            checks.Error(\n                \"The value of 'fields' contains duplicate field(s).\",\n                hint=\"Remove duplicates of 'state'.\",\n                obj=MyModelAdmin,\n                id=\"admin.E006\",\n            )\n        ]\n        self.assertEqual(errors, expected)\n\n    def test_check_fieldset_sublists_for_duplicates(self):\n        class MyModelAdmin(admin.ModelAdmin):\n            fieldsets = [\n                (None, {\"fields\": [\"title\", \"album\", (\"title\", \"album\")]}),\n            ]\n\n        errors = MyModelAdmin(Song, AdminSite()).check()\n        expected = [\n            checks.Error(\n                \"There are duplicate field(s) in 'fieldsets[0][1]'.\",\n                hint=\"Remove duplicates of 'title', 'album'.\",\n                obj=MyModelAdmin,\n                id=\"admin.E012\",\n            )\n        ]\n        self.assertEqual(errors, expected)\n\n    def test_check_multiple_duplicates_across_fieldsets(self):\n        class MyModelAdmin(admin.ModelAdmin):\n            fieldsets = [\n                (\"Header 1\", {\"fields\": [\"title\", \"album\"]}),\n                (\"Header 2\", {\"fields\": [\"album\", \"name\"]}),\n                (\"Header 3\", {\"fields\": [\"name\", \"other\", \"title\"]}),\n            ]\n\n        errors = MyModelAdmin(Song, AdminSite()).check()\n        expected = [\n            checks.Error(\n                \"There are duplicate field(s) in 'fieldsets[1][1]'.\",\n                hint=\"Remove duplicates of 'album'.\",\n                obj=MyModelAdmin,\n                id=\"admin.E012\",\n            ),\n            checks.Error(\n                \"There are duplicate field(s) in 'fieldsets[2][1]'.\",\n                hint=\"Remove duplicates of 'title', 'name'.\",\n                obj=MyModelAdmin,\n                id=\"admin.E012\",\n            ),\n        ]\n        self.assertEqual(errors, expected)\n\n    def test_list_filter_works_on_through_field_even_when_apps_not_ready(self):\n        \"\"\"\n        Ensure list_filter can access reverse fields even when the app registry\n        is not ready; refs #24146.\n        \"\"\"\n\n        class BookAdminWithListFilter(admin.ModelAdmin):\n            list_filter = [\"authorsbooks__featured\"]\n\n        # Temporarily pretending apps are not ready yet. This issue can happen\n        # if the value of 'list_filter' refers to a 'through__field'.\n        Book._meta.apps.ready = False\n        try:\n            errors = BookAdminWithListFilter(Book, AdminSite()).check()\n            self.assertEqual(errors, [])\n        finally:\n            Book._meta.apps.ready = True\n\n    def test_related_field_list_display(self):\n        class SongAdmin(admin.ModelAdmin):\n            list_display = [\"pk\", \"original_release\", \"album__title\"]\n\n        errors = SongAdmin(Song, AdminSite()).check()\n        self.assertEqual(errors, [])\n\n    def test_related_field_list_display_wrong_field(self):\n        class SongAdmin(admin.ModelAdmin):\n            list_display = [\"pk\", \"original_release\", \"album__hello\"]\n\n        errors = SongAdmin(Song, AdminSite()).check()\n        expected = [\n            checks.Error(\n                \"The value of 'list_display[2]' refers to 'album__hello', which is not \"\n                \"a callable or attribute of 'SongAdmin', or an attribute, method, or \"\n                \"field on 'admin_checks.Song'.\",\n                obj=SongAdmin,\n                id=\"admin.E108\",\n            )\n        ]\n        self.assertEqual(errors, expected)\n", "metadata": {"source": "github.com/django/django/tests/admin_checks/tests.py", "language": "python", "complexity": "complex", "type": "class", "lines": 993, "methods": 1, "authentic": true}, "validation": {"overall_quality": 0.9099999999999999, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 1.0}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database function that __str__\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def __str__(self):\n        return self.name\n\n", "metadata": {"source": "github.com/django/django/tests/admin_custom_urls/models.py", "language": "python", "complexity": "simple", "type": "function", "lines": 4, "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database function that response_add\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def response_add(self, request, obj, post_url_continue=None):\n        return super().response_add(\n            request,\n            obj,\n            post_url_continue=reverse(\n                \"admin:admin_custom_urls_car_history\", args=[obj.pk]\n            ),\n        )\n\n", "metadata": {"source": "github.com/django/django/tests/admin_custom_urls/models.py", "language": "python", "complexity": "simple", "type": "function", "lines": 10, "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 1 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class Action(models.Model):\n    name = models.CharField(max_length=50, primary_key=True)\n    description = models.CharField(max_length=70)\n\n    def __str__(self):\n        return self.name\n\n", "metadata": {"source": "github.com/django/django/tests/admin_custom_urls/models.py", "language": "python", "complexity": "simple", "type": "class", "lines": 8, "methods": 1, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 1 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class ActionAdmin(admin.ModelAdmin):\n    \"\"\"\n    A ModelAdmin for the Action model that changes the URL of the add_view\n    to '<app name>/<model name>/!add/'\n    The Action model has a CharField PK.\n    \"\"\"\n\n    list_display = (\"name\", \"description\")\n\n    def remove_url(self, name):\n        \"\"\"\n        Remove all entries named 'name' from the ModelAdmin instance URL\n        patterns list\n        \"\"\"\n        return [url for url in super().get_urls() if url.name != name]\n\n    def get_urls(self):\n        # Add the URL of our custom 'add_view' view to the front of the URLs\n        # list. Remove the existing one(s) first\n        from django.urls import re_path\n\n        def wrap(view):\n            def wrapper(*args, **kwargs):\n                return self.admin_site.admin_view(view)(*args, **kwargs)\n\n            return update_wrapper(wrapper, view)\n\n        info = self.opts.app_label, self.opts.model_name\n\n        view_name = \"%s_%s_add\" % info\n\n        return [\n            re_path(\"^!add/$\", wrap(self.add_view), name=view_name),\n        ] + self.remove_url(view_name)\n\n", "metadata": {"source": "github.com/django/django/tests/admin_custom_urls/models.py", "language": "python", "complexity": "medium", "type": "class", "lines": 36, "methods": 1, "authentic": true}, "validation": {"overall_quality": 0.8925000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 1 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class PersonAdmin(admin.ModelAdmin):\n    def response_post_save_add(self, request, obj):\n        return HttpResponseRedirect(\n            reverse(\"admin:admin_custom_urls_person_history\", args=[obj.pk])\n        )\n\n    def response_post_save_change(self, request, obj):\n        return HttpResponseRedirect(\n            reverse(\"admin:admin_custom_urls_person_delete\", args=[obj.pk])\n        )\n\n", "metadata": {"source": "github.com/django/django/tests/admin_custom_urls/models.py", "language": "python", "complexity": "simple", "type": "class", "lines": 12, "methods": 1, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 1 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class CarAdmin(admin.ModelAdmin):\n    def response_add(self, request, obj, post_url_continue=None):\n        return super().response_add(\n            request,\n            obj,\n            post_url_continue=reverse(\n                \"admin:admin_custom_urls_car_history\", args=[obj.pk]\n            ),\n        )\n\n", "metadata": {"source": "github.com/django/django/tests/admin_custom_urls/models.py", "language": "python", "complexity": "simple", "type": "class", "lines": 11, "methods": 1, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 1 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class AdminCustomUrlsTest(TestCase):\n    \"\"\"\n    Remember that:\n    * The Action model has a CharField PK.\n    * The ModelAdmin for Action customizes the add_view URL, it's\n      '<app name>/<model name>/!add/'\n    \"\"\"\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.superuser = User.objects.create_superuser(\n            username=\"super\", password=\"secret\", email=\"super@example.com\"\n        )\n        Action.objects.create(name=\"delete\", description=\"Remove things.\")\n        Action.objects.create(name=\"rename\", description=\"Gives things other names.\")\n        Action.objects.create(name=\"add\", description=\"Add things.\")\n        Action.objects.create(\n            name=\"path/to/file/\", description=\"An action with '/' in its name.\"\n        )\n        Action.objects.create(\n            name=\"path/to/html/document.html\",\n            description=\"An action with a name similar to a HTML doc path.\",\n        )\n        Action.objects.create(\n            name=\"javascript:alert('Hello world');\\\">Click here</a>\",\n            description=\"An action with a name suspected of being a XSS attempt\",\n        )\n\n    def setUp(self):\n        self.client.force_login(self.superuser)\n\n    def test_basic_add_GET(self):\n        \"\"\"\n        Ensure GET on the add_view works.\n        \"\"\"\n        add_url = reverse(\"admin_custom_urls:admin_custom_urls_action_add\")\n        self.assertTrue(add_url.endswith(\"/!add/\"))\n        response = self.client.get(add_url)\n        self.assertIsInstance(response, TemplateResponse)\n        self.assertEqual(response.status_code, 200)\n\n    def test_add_with_GET_args(self):\n        \"\"\"\n        Ensure GET on the add_view plus specifying a field value in the query\n        string works.\n        \"\"\"\n        response = self.client.get(\n            reverse(\"admin_custom_urls:admin_custom_urls_action_add\"),\n            {\"name\": \"My Action\"},\n        )\n        self.assertContains(response, 'value=\"My Action\"')\n\n    def test_basic_add_POST(self):\n        \"\"\"\n        Ensure POST on add_view works.\n        \"\"\"\n        post_data = {\n            IS_POPUP_VAR: \"1\",\n            \"name\": \"Action added through a popup\",\n            \"description\": \"Description of added action\",\n        }\n        response = self.client.post(\n            reverse(\"admin_custom_urls:admin_custom_urls_action_add\"), post_data\n        )\n        self.assertContains(response, \"Action added through a popup\")\n\n    def test_admin_URLs_no_clash(self):\n        # Should get the change_view for model instance with PK 'add', not show\n        # the add_view\n        url = reverse(\n            \"admin_custom_urls:%s_action_change\" % Action._meta.app_label,\n            args=(quote(\"add\"),),\n        )\n        response = self.client.get(url)\n        self.assertContains(response, \"Change action\")\n\n        # Should correctly get the change_view for the model instance with the\n        # funny-looking PK (the one with a 'path/to/html/document.html' value)\n        url = reverse(\n            \"admin_custom_urls:%s_action_change\" % Action._meta.app_label,\n            args=(quote(\"path/to/html/document.html\"),),\n        )\n        response = self.client.get(url)\n        self.assertContains(response, \"Change action\")\n        self.assertContains(response, 'value=\"path/to/html/document.html\"')\n\n    def test_post_save_add_redirect(self):\n        \"\"\"\n        ModelAdmin.response_post_save_add() controls the redirection after\n        the 'Save' button has been pressed when adding a new object.\n        \"\"\"\n        post_data = {\"name\": \"John Doe\"}\n        self.assertEqual(Person.objects.count(), 0)\n        response = self.client.post(\n            reverse(\"admin_custom_urls:admin_custom_urls_person_add\"), post_data\n        )\n        persons = Person.objects.all()\n        self.assertEqual(len(persons), 1)\n        redirect_url = reverse(\n            \"admin_custom_urls:admin_custom_urls_person_history\", args=[persons[0].pk]\n        )\n        self.assertRedirects(response, redirect_url)\n\n    def test_post_save_change_redirect(self):\n        \"\"\"\n        ModelAdmin.response_post_save_change() controls the redirection after\n        the 'Save' button has been pressed when editing an existing object.\n        \"\"\"\n        Person.objects.create(name=\"John Doe\")\n        self.assertEqual(Person.objects.count(), 1)\n        person = Person.objects.all()[0]\n        post_url = reverse(\n            \"admin_custom_urls:admin_custom_urls_person_change\", args=[person.pk]\n        )\n        response = self.client.post(post_url, {\"name\": \"Jack Doe\"})\n        self.assertRedirects(\n            response,\n            reverse(\n                \"admin_custom_urls:admin_custom_urls_person_delete\", args=[person.pk]\n            ),\n        )\n\n    def test_post_url_continue(self):\n        \"\"\"\n        The ModelAdmin.response_add()'s parameter `post_url_continue` controls\n        the redirection after an object has been created.\n        \"\"\"\n        post_data = {\"name\": \"SuperFast\", \"_continue\": \"1\"}\n        self.assertEqual(Car.objects.count(), 0)\n        response = self.client.post(\n            reverse(\"admin_custom_urls:admin_custom_urls_car_add\"), post_data\n        )\n        cars = Car.objects.all()\n        self.assertEqual(len(cars), 1)\n        self.assertRedirects(\n            response,\n            reverse(\n                \"admin_custom_urls:admin_custom_urls_car_history\", args=[cars[0].pk]\n            ),\n        )\n", "metadata": {"source": "github.com/django/django/tests/admin_custom_urls/tests.py", "language": "python", "complexity": "complex", "type": "class", "lines": 141, "methods": 1, "authentic": true}, "validation": {"overall_quality": 0.8599999999999999, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.9}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database function that download_dataset\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def download_dataset():\n    \"\"\"Downloads the public dataset if not locally downlaoded\n    and returns the number of rows are in the .csv file.\n    \"\"\"\n    if not exists(DATASET_PATH):\n        http = urllib3.PoolManager()\n        resp = http.request(\"GET\", NYC_RESTAURANTS, preload_content=False)\n\n        if resp.status != 200:\n            raise RuntimeError(\"Could not download dataset\")\n\n        with open(DATASET_PATH, mode=\"wb\") as f:\n            chunk = resp.read(CHUNK_SIZE)\n            while chunk:\n                f.write(chunk)\n                chunk = resp.read(CHUNK_SIZE)\n\n    with open(DATASET_PATH) as f:\n        return sum([1 for _ in f]) - 1\n\n", "metadata": {"source": "github.com/elastic/elasticsearch-py/examples/bulk-ingest/bulk-ingest.py", "language": "python", "complexity": "complex", "type": "function", "lines": 21, "authentic": true}, "validation": {"overall_quality": 0.89, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 1.0}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database function that create_index\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def create_index(client):\n    \"\"\"Creates an index in Elasticsearch if one isn't already there.\"\"\"\n    client.indices.create(\n        index=\"nyc-restaurants\",\n        body={\n            \"settings\": {\"number_of_shards\": 1},\n            \"mappings\": {\n                \"properties\": {\n                    \"name\": {\"type\": \"text\"},\n                    \"borough\": {\"type\": \"keyword\"},\n                    \"cuisine\": {\"type\": \"keyword\"},\n                    \"grade\": {\"type\": \"keyword\"},\n                    \"location\": {\"type\": \"geo_point\"},\n                }\n            },\n        },\n        ignore=400,\n    )\n\n", "metadata": {"source": "github.com/elastic/elasticsearch-py/examples/bulk-ingest/bulk-ingest.py", "language": "python", "complexity": "simple", "type": "function", "lines": 20, "authentic": true}, "validation": {"overall_quality": 0.89, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 1.0}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database function that generate_actions\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def generate_actions():\n    \"\"\"Reads the file through csv.DictReader() and for each row\n    yields a single document. This function is passed into the bulk()\n    helper to create many documents in sequence.\n    \"\"\"\n    with open(DATASET_PATH) as f:\n        reader = csv.DictReader(f)\n\n        for row in reader:\n            doc = {\n                \"_id\": row[\"CAMIS\"],\n                \"name\": row[\"DBA\"],\n                \"borough\": row[\"BORO\"],\n                \"cuisine\": row[\"CUISINE DESCRIPTION\"],\n                \"grade\": row[\"GRADE\"] or None,\n            }\n\n            lat = row[\"Latitude\"]\n            lon = row[\"Longitude\"]\n            if lat not in (\"\", \"0\") and lon not in (\"\", \"0\"):\n                doc[\"location\"] = {\"lat\": float(lat), \"lon\": float(lon)}\n            yield doc\n\n", "metadata": {"source": "github.com/elastic/elasticsearch-py/examples/bulk-ingest/bulk-ingest.py", "language": "python", "complexity": "simple", "type": "function", "lines": 24, "authentic": true}, "validation": {"overall_quality": 0.89, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 1.0}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database function that main\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def main():\n    print(\"Loading dataset...\")\n    number_of_docs = download_dataset()\n\n    client = Elasticsearch(\n        # Add your cluster configuration here!\n    )\n    print(\"Creating an index...\")\n    create_index(client)\n\n    print(\"Indexing documents...\")\n    progress = tqdm.tqdm(unit=\"docs\", total=number_of_docs)\n    successes = 0\n    for ok, action in streaming_bulk(\n        client=client, index=\"nyc-restaurants\", actions=generate_actions(),\n    ):\n        progress.update(1)\n        successes += ok\n    print(\"Indexed %d/%d documents\" % (successes, number_of_docs))\n\n", "metadata": {"source": "github.com/elastic/elasticsearch-py/examples/bulk-ingest/bulk-ingest.py", "language": "python", "complexity": "simple", "type": "function", "lines": 21, "authentic": true}, "validation": {"overall_quality": 0.79, "syntax_valid": true, "completeness_score": 0.5, "authenticity_score": 1.0}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class BlogPost(Document):\n    if TYPE_CHECKING:\n        # definitions here help type checkers understand additional arguments\n        # that are allowed in the constructor\n        _id: int\n\n    title: str\n    tags: List[str] = mapped_field(Keyword())\n    content: str\n    published: Optional[datetime] = mapped_field(default=None)\n\n    def is_published(self) -> bool:\n        return bool(self.published and datetime.now() > self.published)\n\n    @classmethod\n    def _matches(cls, hit: Dict[str, Any]) -> bool:\n        # override _matches to match indices in a pattern instead of just ALIAS\n        # hit is the raw dict as returned by elasticsearch\n        return fnmatch(hit[\"_index\"], PATTERN)\n\n    class Index:\n        # we will use an alias instead of the index\n        name = ALIAS\n        # set settings and possibly other attributes of the index like\n        # analyzers\n        settings = {\"number_of_shards\": 1, \"number_of_replicas\": 0}\n\n", "metadata": {"source": "github.com/elastic/elasticsearch-py/examples/dsl/alias_migration.py", "language": "python", "complexity": "simple", "type": "class", "lines": 28, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.905, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 1.0}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class BlogPost(AsyncDocument):\n    if TYPE_CHECKING:\n        # definitions here help type checkers understand additional arguments\n        # that are allowed in the constructor\n        _id: int\n\n    title: str\n    tags: List[str] = mapped_field(Keyword())\n    content: str\n    published: Optional[datetime] = mapped_field(default=None)\n\n    def is_published(self) -> bool:\n        return bool(self.published and datetime.now() > self.published)\n\n    @classmethod\n    def _matches(cls, hit: Dict[str, Any]) -> bool:\n        # override _matches to match indices in a pattern instead of just ALIAS\n        # hit is the raw dict as returned by elasticsearch\n        return fnmatch(hit[\"_index\"], PATTERN)\n\n    class Index:\n        # we will use an alias instead of the index\n        name = ALIAS\n        # set settings and possibly other attributes of the index like\n        # analyzers\n        settings = {\"number_of_shards\": 1, \"number_of_replicas\": 0}\n\n", "metadata": {"source": "github.com/elastic/elasticsearch-py/examples/dsl/async/alias_migration.py", "language": "python", "complexity": "simple", "type": "class", "lines": 28, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.905, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 1.0}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class Person(AsyncDocument):\n    if TYPE_CHECKING:\n        # definitions here help type checkers understand additional arguments\n        # that are allowed in the constructor\n        _id: Optional[int] = mapped_field(default=None)\n\n    name: str = mapped_field(Text(fields={\"keyword\": Keyword()}), default=\"\")\n    popularity: int = mapped_field(Long(), default=0)\n\n    # completion field with a custom analyzer\n    suggest: Dict[str, Any] = mapped_field(Completion(analyzer=ascii_fold), init=False)\n\n    def clean(self) -> None:\n        \"\"\"\n        Automatically construct the suggestion input and weight by taking all\n        possible permutations of Person's name as ``input`` and taking their\n        popularity as ``weight``.\n        \"\"\"\n        self.suggest = {\n            \"input\": [\" \".join(p) for p in permutations(self.name.split())],\n            \"weight\": self.popularity,\n        }\n\n    class Index:\n        name = \"test-suggest\"\n        settings = {\"number_of_shards\": 1, \"number_of_replicas\": 0}\n\n", "metadata": {"source": "github.com/elastic/elasticsearch-py/examples/dsl/async/completion.py", "language": "python", "complexity": "medium", "type": "class", "lines": 28, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.8999999999999999, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 1.0}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class User(InnerDoc):\n    \"\"\"\n    Class used to represent a denormalized user stored on other objects.\n    \"\"\"\n\n    id: int = mapped_field(Long())\n    signed_up: Optional[datetime] = mapped_field(Date())\n    username: str = mapped_field(Text(fields={\"keyword\": Keyword()}))\n    email: Optional[str] = mapped_field(Text(fields={\"keyword\": Keyword()}))\n    location: Optional[str] = mapped_field(Text(fields={\"keyword\": Keyword()}))\n\n", "metadata": {"source": "github.com/elastic/elasticsearch-py/examples/dsl/async/parent_child.py", "language": "python", "complexity": "simple", "type": "class", "lines": 12, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.89, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 1.0}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class Comment(InnerDoc):\n    \"\"\"\n    Class wrapper for nested comment objects.\n    \"\"\"\n\n    author: User\n    created: datetime\n    content: str\n\n", "metadata": {"source": "github.com/elastic/elasticsearch-py/examples/dsl/async/parent_child.py", "language": "python", "complexity": "simple", "type": "class", "lines": 10, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.89, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 1.0}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class Post(AsyncDocument):\n    \"\"\"\n    Base class for Question and Answer containing the common fields.\n    \"\"\"\n\n    author: User\n\n    if TYPE_CHECKING:\n        # definitions here help type checkers understand additional arguments\n        # that are allowed in the constructor\n        _routing: str = mapped_field(default=None)\n        _id: Optional[int] = mapped_field(default=None)\n\n    created: Optional[datetime] = mapped_field(default=None)\n    body: str = mapped_field(default=\"\")\n    comments: List[Comment] = mapped_field(default_factory=list)\n    question_answer: Any = mapped_field(\n        Join(relations={\"question\": \"answer\"}), default_factory=dict\n    )\n\n    @classmethod\n    def _matches(cls, hit: Dict[str, Any]) -> bool:\n        # Post is an abstract class, make sure it never gets used for\n        # deserialization\n        return False\n\n    class Index:\n        name = \"test-qa-site\"\n        settings = {\n            \"number_of_shards\": 1,\n            \"number_of_replicas\": 0,\n        }\n\n    async def add_comment(\n        self,\n        user: User,\n        content: str,\n        created: Optional[datetime] = None,\n        commit: Optional[bool] = True,\n    ) -> Comment:\n        c = Comment(author=user, content=content, created=created or datetime.now())\n        self.comments.append(c)\n        if commit:\n            await self.save()\n        return c\n\n    async def save(self, **kwargs: Any) -> None:  # type: ignore[override]\n        # if there is no date, use now\n        if self.created is None:\n            self.created = datetime.now()\n        await super().save(**kwargs)\n\n", "metadata": {"source": "github.com/elastic/elasticsearch-py/examples/dsl/async/parent_child.py", "language": "python", "complexity": "complex", "type": "class", "lines": 53, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.9224999999999999, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 1.0}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class Question(Post):\n    tags: List[str] = mapped_field(\n        default_factory=list\n    )  # .tags will return empty list if not present\n    title: str = mapped_field(Text(fields={\"keyword\": Keyword()}), default=\"\")\n\n    @classmethod\n    def _matches(cls, hit: Dict[str, Any]) -> bool:\n        \"\"\"Use Question class for parent documents\"\"\"\n        return bool(hit[\"_source\"][\"question_answer\"] == \"question\")\n\n    @classmethod\n    def search(cls, **kwargs: Any) -> AsyncSearch:  # type: ignore[override]\n        return cls._index.search(**kwargs).filter(\"term\", question_answer=\"question\")\n\n    async def add_answer(\n        self,\n        user: User,\n        body: str,\n        created: Optional[datetime] = None,\n        accepted: bool = False,\n        commit: Optional[bool] = True,\n    ) -> \"Answer\":\n        answer = Answer(\n            # required make sure the answer is stored in the same shard\n            _routing=self.meta.id,\n            # set up the parent/child mapping\n            question_answer={\"name\": \"answer\", \"parent\": self.meta.id},\n            # pass in the field values\n            author=user,\n            created=created,\n            body=body,\n            is_accepted=accepted,\n        )\n        if commit:\n            await answer.save()\n        return answer\n\n    def search_answers(self) -> AsyncSearch:\n        # search only our index\n        s = Answer.search()\n        # filter for answers belonging to us\n        s = s.filter(\"parent_id\", type=\"answer\", id=self.meta.id)\n        # add routing to only go to specific shard\n        s = s.params(routing=self.meta.id)\n        return s\n\n    async def get_answers(self) -> List[Any]:\n        \"\"\"\n        Get answers either from inner_hits already present or by searching\n        elasticsearch.\n        \"\"\"\n        if \"inner_hits\" in self.meta and \"answer\" in self.meta.inner_hits:\n            return cast(List[Any], self.meta.inner_hits[\"answer\"].hits)\n        return [a async for a in self.search_answers()]\n\n    async def save(self, **kwargs: Any) -> None:  # type: ignore[override]\n        self.question_answer = \"question\"\n        await super().save(**kwargs)\n\n", "metadata": {"source": "github.com/elastic/elasticsearch-py/examples/dsl/async/parent_child.py", "language": "python", "complexity": "complex", "type": "class", "lines": 61, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.9224999999999999, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 1.0}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class Answer(Post):\n    is_accepted: bool = mapped_field(default=False)\n\n    @classmethod\n    def _matches(cls, hit: Dict[str, Any]) -> bool:\n        \"\"\"Use Answer class for child documents with child name 'answer'\"\"\"\n        return (\n            isinstance(hit[\"_source\"][\"question_answer\"], dict)\n            and hit[\"_source\"][\"question_answer\"].get(\"name\") == \"answer\"\n        )\n\n    @classmethod\n    def search(cls, **kwargs: Any) -> AsyncSearch:  # type: ignore[override]\n        return cls._index.search(**kwargs).exclude(\"term\", question_answer=\"question\")\n\n    async def get_question(self) -> Optional[Question]:\n        # cache question in self.meta\n        # any attributes set on self would be interpreted as fields\n        if \"question\" not in self.meta:\n            self.meta.question = await Question.get(\n                id=self.question_answer.parent, index=self.meta.index\n            )\n        return cast(Optional[Question], self.meta.question)\n\n    async def save(self, **kwargs: Any) -> None:  # type: ignore[override]\n        # set routing to parents id automatically\n        self.meta.routing = self.question_answer.parent\n        await super().save(**kwargs)\n\n", "metadata": {"source": "github.com/elastic/elasticsearch-py/examples/dsl/async/parent_child.py", "language": "python", "complexity": "complex", "type": "class", "lines": 30, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.8999999999999999, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 1.0}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class BlogPost(AsyncDocument):\n    \"\"\"\n    Blog posts that will be automatically tagged based on percolation queries.\n    \"\"\"\n\n    if TYPE_CHECKING:\n        # definitions here help type checkers understand additional arguments\n        # that are allowed in the constructor\n        _id: int\n\n    content: Optional[str]\n    tags: List[str] = mapped_field(Keyword(), default_factory=list)\n\n    class Index:\n        name = \"test-blogpost\"\n\n    async def add_tags(self) -> None:\n        # run a percolation to automatically tag the blog post.\n        s = AsyncSearch(index=\"test-percolator\")\n        s = s.query(\n            \"percolate\", field=\"query\", index=self._get_index(), document=self.to_dict()\n        )\n\n        # collect all the tags from matched percolators\n        async for percolator in s:\n            self.tags.extend(percolator.tags)\n\n        # make sure tags are unique\n        self.tags = list(set(self.tags))\n\n    async def save(self, **kwargs: Any) -> None:  # type: ignore[override]\n        await self.add_tags()\n        await super().save(**kwargs)\n\n", "metadata": {"source": "github.com/elastic/elasticsearch-py/examples/dsl/async/percolate.py", "language": "python", "complexity": "complex", "type": "class", "lines": 35, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.8999999999999999, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 1.0}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class PercolatorDoc(AsyncDocument):\n    \"\"\"\n    Document class used for storing the percolation queries.\n    \"\"\"\n\n    if TYPE_CHECKING:\n        _id: str\n\n    # relevant fields from BlogPost must be also present here for the queries\n    # to be able to use them. Another option would be to use document\n    # inheritance but save() would have to be reset to normal behavior.\n    content: Optional[str]\n\n    # the percolator query to be run against the doc\n    query: Query = mapped_field(Percolator())\n    # list of tags to append to a document\n    tags: List[str] = mapped_field(Keyword(multi=True))\n\n    class Index:\n        name = \"test-percolator\"\n        settings = {\"number_of_shards\": 1, \"number_of_replicas\": 0}\n\n", "metadata": {"source": "github.com/elastic/elasticsearch-py/examples/dsl/async/percolate.py", "language": "python", "complexity": "medium", "type": "class", "lines": 23, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.89, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 1.0}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class Person(AsyncDocument):\n    if TYPE_CHECKING:\n        # definitions here help type checkers understand additional arguments\n        # that are allowed in the constructor\n        _id: Optional[int] = mapped_field(default=None)\n\n    name: str = mapped_field(SearchAsYouType(max_shingle_size=3), default=\"\")\n\n    class Index:\n        name = \"test-search-as-you-type\"\n        settings = {\"number_of_shards\": 1, \"number_of_replicas\": 0}\n\n", "metadata": {"source": "github.com/elastic/elasticsearch-py/examples/dsl/async/search_as_you_type.py", "language": "python", "complexity": "simple", "type": "class", "lines": 13, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.89, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 1.0}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class WorkplaceDoc(dsl.AsyncDocument):\n    class Index:\n        name = \"workplace_documents_semantic\"\n\n    name: str\n    summary: str\n    content: Any = dsl.mapped_field(\n        dsl.field.SemanticText(inference_id=\"my-elser-endpoint\")\n    )\n    created: datetime\n    updated: Optional[datetime]\n    url: str = dsl.mapped_field(dsl.Keyword())\n    category: str = dsl.mapped_field(dsl.Keyword())\n\n", "metadata": {"source": "github.com/elastic/elasticsearch-py/examples/dsl/async/semantic_text.py", "language": "python", "complexity": "simple", "type": "class", "lines": 15, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.89, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 1.0}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class Passage(InnerDoc):\n    content: Optional[str]\n    embedding: Dict[str, float] = mapped_field(SparseVector(), init=False)\n\n", "metadata": {"source": "github.com/elastic/elasticsearch-py/examples/dsl/async/sparse_vectors.py", "language": "python", "complexity": "simple", "type": "class", "lines": 5, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.89, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 1.0}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class WorkplaceDoc(AsyncDocument):\n    class Index:\n        name = \"workplace_documents_sparse\"\n        settings = {\"default_pipeline\": \"elser_ingest_pipeline\"}\n\n    name: str\n    summary: str\n    content: str\n    created: datetime\n    updated: Optional[datetime]\n    url: str = mapped_field(Keyword())\n    category: str = mapped_field(Keyword())\n    passages: List[Passage] = mapped_field(default=[])\n\n    _model: Any = None\n\n    def clean(self) -> None:\n        # split the content into sentences\n        passages = nltk.sent_tokenize(self.content)\n\n        # generate an embedding for each passage and save it as a nested document\n        for passage in passages:\n            self.passages.append(Passage(content=passage))\n\n", "metadata": {"source": "github.com/elastic/elasticsearch-py/examples/dsl/async/sparse_vectors.py", "language": "python", "complexity": "medium", "type": "class", "lines": 25, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.89, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 1.0}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class Passage(InnerDoc):\n    content: str\n    embedding: List[float] = mapped_field(DenseVector())\n\n", "metadata": {"source": "github.com/elastic/elasticsearch-py/examples/dsl/async/vectors.py", "language": "python", "complexity": "simple", "type": "class", "lines": 5, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.89, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 1.0}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class WorkplaceDoc(AsyncDocument):\n    class Index:\n        name = \"workplace_documents\"\n\n    name: str\n    summary: str\n    content: str\n    created: datetime\n    updated: Optional[datetime]\n    url: str = mapped_field(Keyword(required=True))\n    category: str = mapped_field(Keyword(required=True))\n    passages: M[List[Passage]] = mapped_field(default=[])\n\n    @classmethod\n    def get_embedding(cls, input: str) -> List[float]:\n        global embedding_model\n        if embedding_model is None:\n            embedding_model = SentenceTransformer(MODEL_NAME)\n        return cast(List[float], list(embedding_model.encode(input)))\n\n    def clean(self) -> None:\n        # split the content into sentences\n        passages = cast(List[str], nltk.sent_tokenize(self.content))\n\n        # generate an embedding for each passage and save it as a nested document\n        for passage in passages:\n            self.passages.append(\n                Passage(content=passage, embedding=self.get_embedding(passage))\n            )\n\n", "metadata": {"source": "github.com/elastic/elasticsearch-py/examples/dsl/async/vectors.py", "language": "python", "complexity": "medium", "type": "class", "lines": 31, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.89, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 1.0}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class Person(Document):\n    if TYPE_CHECKING:\n        # definitions here help type checkers understand additional arguments\n        # that are allowed in the constructor\n        _id: Optional[int] = mapped_field(default=None)\n\n    name: str = mapped_field(Text(fields={\"keyword\": Keyword()}), default=\"\")\n    popularity: int = mapped_field(Long(), default=0)\n\n    # completion field with a custom analyzer\n    suggest: Dict[str, Any] = mapped_field(Completion(analyzer=ascii_fold), init=False)\n\n    def clean(self) -> None:\n        \"\"\"\n        Automatically construct the suggestion input and weight by taking all\n        possible permutations of Person's name as ``input`` and taking their\n        popularity as ``weight``.\n        \"\"\"\n        self.suggest = {\n            \"input\": [\" \".join(p) for p in permutations(self.name.split())],\n            \"weight\": self.popularity,\n        }\n\n    class Index:\n        name = \"test-suggest\"\n        settings = {\"number_of_shards\": 1, \"number_of_replicas\": 0}\n\n", "metadata": {"source": "github.com/elastic/elasticsearch-py/examples/dsl/completion.py", "language": "python", "complexity": "medium", "type": "class", "lines": 28, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.8999999999999999, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 1.0}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class User(InnerDoc):\n    \"\"\"\n    Class used to represent a denormalized user stored on other objects.\n    \"\"\"\n\n    id: int = mapped_field(Long())\n    signed_up: Optional[datetime] = mapped_field(Date())\n    username: str = mapped_field(Text(fields={\"keyword\": Keyword()}))\n    email: Optional[str] = mapped_field(Text(fields={\"keyword\": Keyword()}))\n    location: Optional[str] = mapped_field(Text(fields={\"keyword\": Keyword()}))\n\n", "metadata": {"source": "github.com/elastic/elasticsearch-py/examples/dsl/parent_child.py", "language": "python", "complexity": "simple", "type": "class", "lines": 12, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.89, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 1.0}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class Comment(InnerDoc):\n    \"\"\"\n    Class wrapper for nested comment objects.\n    \"\"\"\n\n    author: User\n    created: datetime\n    content: str\n\n", "metadata": {"source": "github.com/elastic/elasticsearch-py/examples/dsl/parent_child.py", "language": "python", "complexity": "simple", "type": "class", "lines": 10, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.89, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 1.0}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class Post(Document):\n    \"\"\"\n    Base class for Question and Answer containing the common fields.\n    \"\"\"\n\n    author: User\n\n    if TYPE_CHECKING:\n        # definitions here help type checkers understand additional arguments\n        # that are allowed in the constructor\n        _routing: str = mapped_field(default=None)\n        _id: Optional[int] = mapped_field(default=None)\n\n    created: Optional[datetime] = mapped_field(default=None)\n    body: str = mapped_field(default=\"\")\n    comments: List[Comment] = mapped_field(default_factory=list)\n    question_answer: Any = mapped_field(\n        Join(relations={\"question\": \"answer\"}), default_factory=dict\n    )\n\n    @classmethod\n    def _matches(cls, hit: Dict[str, Any]) -> bool:\n        # Post is an abstract class, make sure it never gets used for\n        # deserialization\n        return False\n\n    class Index:\n        name = \"test-qa-site\"\n        settings = {\n            \"number_of_shards\": 1,\n            \"number_of_replicas\": 0,\n        }\n\n    def add_comment(\n        self,\n        user: User,\n        content: str,\n        created: Optional[datetime] = None,\n        commit: Optional[bool] = True,\n    ) -> Comment:\n        c = Comment(author=user, content=content, created=created or datetime.now())\n        self.comments.append(c)\n        if commit:\n            self.save()\n        return c\n\n    def save(self, **kwargs: Any) -> None:  # type: ignore[override]\n        # if there is no date, use now\n        if self.created is None:\n            self.created = datetime.now()\n        super().save(**kwargs)\n\n", "metadata": {"source": "github.com/elastic/elasticsearch-py/examples/dsl/parent_child.py", "language": "python", "complexity": "medium", "type": "class", "lines": 53, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.9224999999999999, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 1.0}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class Question(Post):\n    tags: List[str] = mapped_field(\n        default_factory=list\n    )  # .tags will return empty list if not present\n    title: str = mapped_field(Text(fields={\"keyword\": Keyword()}), default=\"\")\n\n    @classmethod\n    def _matches(cls, hit: Dict[str, Any]) -> bool:\n        \"\"\"Use Question class for parent documents\"\"\"\n        return bool(hit[\"_source\"][\"question_answer\"] == \"question\")\n\n    @classmethod\n    def search(cls, **kwargs: Any) -> Search:  # type: ignore[override]\n        return cls._index.search(**kwargs).filter(\"term\", question_answer=\"question\")\n\n    def add_answer(\n        self,\n        user: User,\n        body: str,\n        created: Optional[datetime] = None,\n        accepted: bool = False,\n        commit: Optional[bool] = True,\n    ) -> \"Answer\":\n        answer = Answer(\n            # required make sure the answer is stored in the same shard\n            _routing=self.meta.id,\n            # set up the parent/child mapping\n            question_answer={\"name\": \"answer\", \"parent\": self.meta.id},\n            # pass in the field values\n            author=user,\n            created=created,\n            body=body,\n            is_accepted=accepted,\n        )\n        if commit:\n            answer.save()\n        return answer\n\n    def search_answers(self) -> Search:\n        # search only our index\n        s = Answer.search()\n        # filter for answers belonging to us\n        s = s.filter(\"parent_id\", type=\"answer\", id=self.meta.id)\n        # add routing to only go to specific shard\n        s = s.params(routing=self.meta.id)\n        return s\n\n    def get_answers(self) -> List[Any]:\n        \"\"\"\n        Get answers either from inner_hits already present or by searching\n        elasticsearch.\n        \"\"\"\n        if \"inner_hits\" in self.meta and \"answer\" in self.meta.inner_hits:\n            return cast(List[Any], self.meta.inner_hits[\"answer\"].hits)\n        return [a for a in self.search_answers()]\n\n    def save(self, **kwargs: Any) -> None:  # type: ignore[override]\n        self.question_answer = \"question\"\n        super().save(**kwargs)\n\n", "metadata": {"source": "github.com/elastic/elasticsearch-py/examples/dsl/parent_child.py", "language": "python", "complexity": "medium", "type": "class", "lines": 61, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.9224999999999999, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 1.0}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class Answer(Post):\n    is_accepted: bool = mapped_field(default=False)\n\n    @classmethod\n    def _matches(cls, hit: Dict[str, Any]) -> bool:\n        \"\"\"Use Answer class for child documents with child name 'answer'\"\"\"\n        return (\n            isinstance(hit[\"_source\"][\"question_answer\"], dict)\n            and hit[\"_source\"][\"question_answer\"].get(\"name\") == \"answer\"\n        )\n\n    @classmethod\n    def search(cls, **kwargs: Any) -> Search:  # type: ignore[override]\n        return cls._index.search(**kwargs).exclude(\"term\", question_answer=\"question\")\n\n    def get_question(self) -> Optional[Question]:\n        # cache question in self.meta\n        # any attributes set on self would be interpreted as fields\n        if \"question\" not in self.meta:\n            self.meta.question = Question.get(\n                id=self.question_answer.parent, index=self.meta.index\n            )\n        return cast(Optional[Question], self.meta.question)\n\n    def save(self, **kwargs: Any) -> None:  # type: ignore[override]\n        # set routing to parents id automatically\n        self.meta.routing = self.question_answer.parent\n        super().save(**kwargs)\n\n", "metadata": {"source": "github.com/elastic/elasticsearch-py/examples/dsl/parent_child.py", "language": "python", "complexity": "complex", "type": "class", "lines": 30, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.89, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 1.0}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class BlogPost(Document):\n    \"\"\"\n    Blog posts that will be automatically tagged based on percolation queries.\n    \"\"\"\n\n    if TYPE_CHECKING:\n        # definitions here help type checkers understand additional arguments\n        # that are allowed in the constructor\n        _id: int\n\n    content: Optional[str]\n    tags: List[str] = mapped_field(Keyword(), default_factory=list)\n\n    class Index:\n        name = \"test-blogpost\"\n\n    def add_tags(self) -> None:\n        # run a percolation to automatically tag the blog post.\n        s = Search(index=\"test-percolator\")\n        s = s.query(\n            \"percolate\", field=\"query\", index=self._get_index(), document=self.to_dict()\n        )\n\n        # collect all the tags from matched percolators\n        for percolator in s:\n            self.tags.extend(percolator.tags)\n\n        # make sure tags are unique\n        self.tags = list(set(self.tags))\n\n    def save(self, **kwargs: Any) -> None:  # type: ignore[override]\n        self.add_tags()\n        super().save(**kwargs)\n\n", "metadata": {"source": "github.com/elastic/elasticsearch-py/examples/dsl/percolate.py", "language": "python", "complexity": "medium", "type": "class", "lines": 35, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.8999999999999999, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 1.0}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class PercolatorDoc(Document):\n    \"\"\"\n    Document class used for storing the percolation queries.\n    \"\"\"\n\n    if TYPE_CHECKING:\n        _id: str\n\n    # relevant fields from BlogPost must be also present here for the queries\n    # to be able to use them. Another option would be to use document\n    # inheritance but save() would have to be reset to normal behavior.\n    content: Optional[str]\n\n    # the percolator query to be run against the doc\n    query: Query = mapped_field(Percolator())\n    # list of tags to append to a document\n    tags: List[str] = mapped_field(Keyword(multi=True))\n\n    class Index:\n        name = \"test-percolator\"\n        settings = {\"number_of_shards\": 1, \"number_of_replicas\": 0}\n\n", "metadata": {"source": "github.com/elastic/elasticsearch-py/examples/dsl/percolate.py", "language": "python", "complexity": "medium", "type": "class", "lines": 23, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.89, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 1.0}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class Person(Document):\n    if TYPE_CHECKING:\n        # definitions here help type checkers understand additional arguments\n        # that are allowed in the constructor\n        _id: Optional[int] = mapped_field(default=None)\n\n    name: str = mapped_field(SearchAsYouType(max_shingle_size=3), default=\"\")\n\n    class Index:\n        name = \"test-search-as-you-type\"\n        settings = {\"number_of_shards\": 1, \"number_of_replicas\": 0}\n\n", "metadata": {"source": "github.com/elastic/elasticsearch-py/examples/dsl/search_as_you_type.py", "language": "python", "complexity": "simple", "type": "class", "lines": 13, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.89, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 1.0}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class WorkplaceDoc(dsl.Document):\n    class Index:\n        name = \"workplace_documents_semantic\"\n\n    name: str\n    summary: str\n    content: Any = dsl.mapped_field(\n        dsl.field.SemanticText(inference_id=\"my-elser-endpoint\")\n    )\n    created: datetime\n    updated: Optional[datetime]\n    url: str = dsl.mapped_field(dsl.Keyword())\n    category: str = dsl.mapped_field(dsl.Keyword())\n\n", "metadata": {"source": "github.com/elastic/elasticsearch-py/examples/dsl/semantic_text.py", "language": "python", "complexity": "simple", "type": "class", "lines": 15, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.89, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 1.0}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class Passage(InnerDoc):\n    content: Optional[str]\n    embedding: Dict[str, float] = mapped_field(SparseVector(), init=False)\n\n", "metadata": {"source": "github.com/elastic/elasticsearch-py/examples/dsl/sparse_vectors.py", "language": "python", "complexity": "simple", "type": "class", "lines": 5, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.89, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 1.0}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class WorkplaceDoc(Document):\n    class Index:\n        name = \"workplace_documents_sparse\"\n        settings = {\"default_pipeline\": \"elser_ingest_pipeline\"}\n\n    name: str\n    summary: str\n    content: str\n    created: datetime\n    updated: Optional[datetime]\n    url: str = mapped_field(Keyword())\n    category: str = mapped_field(Keyword())\n    passages: List[Passage] = mapped_field(default=[])\n\n    _model: Any = None\n\n    def clean(self) -> None:\n        # split the content into sentences\n        passages = nltk.sent_tokenize(self.content)\n\n        # generate an embedding for each passage and save it as a nested document\n        for passage in passages:\n            self.passages.append(Passage(content=passage))\n\n", "metadata": {"source": "github.com/elastic/elasticsearch-py/examples/dsl/sparse_vectors.py", "language": "python", "complexity": "medium", "type": "class", "lines": 25, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.89, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 1.0}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class Passage(InnerDoc):\n    content: str\n    embedding: List[float] = mapped_field(DenseVector())\n\n", "metadata": {"source": "github.com/elastic/elasticsearch-py/examples/dsl/vectors.py", "language": "python", "complexity": "simple", "type": "class", "lines": 5, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.89, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 1.0}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database model class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class WorkplaceDoc(Document):\n    class Index:\n        name = \"workplace_documents\"\n\n    name: str\n    summary: str\n    content: str\n    created: datetime\n    updated: Optional[datetime]\n    url: str = mapped_field(Keyword(required=True))\n    category: str = mapped_field(Keyword(required=True))\n    passages: M[List[Passage]] = mapped_field(default=[])\n\n    @classmethod\n    def get_embedding(cls, input: str) -> List[float]:\n        global embedding_model\n        if embedding_model is None:\n            embedding_model = SentenceTransformer(MODEL_NAME)\n        return cast(List[float], list(embedding_model.encode(input)))\n\n    def clean(self) -> None:\n        # split the content into sentences\n        passages = cast(List[str], nltk.sent_tokenize(self.content))\n\n        # generate an embedding for each passage and save it as a nested document\n        for passage in passages:\n            self.passages.append(\n                Passage(content=passage, embedding=self.get_embedding(passage))\n            )\n\n", "metadata": {"source": "github.com/elastic/elasticsearch-py/examples/dsl/vectors.py", "language": "python", "complexity": "medium", "type": "class", "lines": 31, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.89, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 1.0}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database function that app_shutdown\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def app_shutdown():\n    await client.close()\n\n", "metadata": {"source": "github.com/elastic/elasticsearch-py/examples/fastapi-apm/app.py", "language": "python", "complexity": "simple", "type": "function", "lines": 4, "authentic": true}, "validation": {"overall_quality": 0.89, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 1.0}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nImplement a database function that get_doc\n\n### PLAN Phase:\nAnalyze requirements and design approach.\n\n### CODE Phase:", "completion": "def get_doc(id):\n    return await client.get(index=\"games\", id=id)\n", "metadata": {"source": "github.com/elastic/elasticsearch-py/examples/fastapi-apm/app.py", "language": "python", "complexity": "simple", "type": "function", "lines": 3, "authentic": true}, "validation": {"overall_quality": 0.89, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 1.0}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nSQLAlchemy: how to filter date field?\n\n### PLAN Phase:\nAnalyze the problem and design solution approach.\n\n### CODE Phase:", "completion": "qry = DBSession.query(User).filter(\n        and_(User.birthday <= '1988-01-17', User.birthday >= '1985-01-17'))\n# or same:\nqry = DBSession.query(User).filter(User.birthday <= '1988-01-17').\\\n        filter(User.birthday >= '1985-01-17')", "metadata": {"source": "stackoverflow.com/questions/8895208", "language": "python", "complexity": "simple", "type": "stackoverflow_answer", "question_score": 163, "answer_score": 270, "authentic": true}, "validation": {"overall_quality": 0.8650000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nSQLAlchemy: how to filter date field?\n\n### PLAN Phase:\nAnalyze the problem and design solution approach.\n\n### CODE Phase:", "completion": "from app import SQLAlchemyDB as db\n\nChance.query.filter(Chance.repo_id==repo_id,\n                    Chance.status==\"1\",\n                    db.func.date(Chance.apply_time)<=end,\n                    db.func.date(Chance.apply_time)>=start).count()", "metadata": {"source": "stackoverflow.com/questions/8895208", "language": "python", "complexity": "simple", "type": "stackoverflow_answer", "question_score": 163, "answer_score": 7, "authentic": true}, "validation": {"overall_quality": 0.8650000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "code_generation", "category": "database_integration", "prompt": "### Code Generation Request (CLAUDE.md):\nSQLAlchemy: how to filter date field?\n\n### PLAN Phase:\nAnalyze the problem and design solution approach.\n\n### CODE Phase:", "completion": "from datetime import date, timedelta\n\nfrom flask import jsonify\n\nfrom app import db, ma\nfrom app.models import User\n\nfrom . import main\n\nclass UserSchema(ma.Schema):\n    class Meta:\n        fields = ('forename', 'surname', 'birthday', ...)\n\n\n@main.route('/', methods=('GET',))\ndef get_users():\n\n    start_range = date.today() + timedelta(years=-30)\n    end_range = date.today() + timedelta(years=-18)\n\n    users = db.session.query(User).filter(User.birthday.between(start_range, end_range)).all()\n\n    users_schema = UserSchema(many=True)\n\n    return jsonify(users_schema.dump(users))", "metadata": {"source": "stackoverflow.com/questions/8895208", "language": "python", "complexity": "simple", "type": "stackoverflow_answer", "question_score": 163, "answer_score": 4, "authentic": true}, "validation": {"overall_quality": 0.8325000000000001, "syntax_valid": true, "completeness_score": 0.8, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "testing_quality", "prompt": "### Code Generation Request (CLAUDE.md):\nUsing mock to patch a non-existing attribute\n\n### PLAN Phase:\nAnalyze the problem and design solution approach.\n\n### CODE Phase:", "completion": "def test_MyContextManager():\n    with patch.object(MyClass, 'myfunc', create=True, return_value=None) as mock_obj:\n        with MyContextManager():\n             pass", "metadata": {"source": "stackoverflow.com/questions/29951859", "language": "python", "complexity": "simple", "type": "stackoverflow_answer", "question_score": 23, "answer_score": 39, "authentic": true}, "validation": {"overall_quality": 0.8675, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "testing_quality", "prompt": "### Code Generation Request (CLAUDE.md):\nPython Testing - Reset all mocks?\n\n### PLAN Phase:\nAnalyze the problem and design solution approach.\n\n### CODE Phase:", "completion": "def test1(monkeypatch):\n    monkeypatch.setattr(...)\n    assert(...)\n    monkeypatch.undo()", "metadata": {"source": "stackoverflow.com/questions/33051263", "language": "python", "complexity": "simple", "type": "stackoverflow_answer", "question_score": 12, "answer_score": 5, "authentic": true}, "validation": {"overall_quality": 0.765, "syntax_valid": true, "completeness_score": 0.6, "authenticity_score": 0.8}}
{"domain": "code_generation", "category": "code_review", "prompt": "### Code Generation Request (CLAUDE.md):\nReview and improve this class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class MyAstroidChecker(BaseChecker):\n    \"\"\"Add class member attributes to the class local's dictionary.\"\"\"\n\n    # The name defines a custom section of the config for this checker.\n    name = \"custom\"\n    # This class variable declares the messages (i.e. the warnings and errors)\n    # that the checker can emit.\n    msgs = {\n        # Each message has a code, a message that the user will see,\n        # a unique symbol that identifies the message,\n        # and a detailed help message\n        # that will be included in the documentation.\n        \"W0001\": (\"Message that will be emitted\", \"message-symbol\", \"Message help\")\n    }\n    # This class variable declares the options\n    # that are configurable by the user.\n    options = (\n        # Each option definition has a name which is used on the command line\n        # and in config files, and a dictionary of arguments\n        # (similar to argparse.ArgumentParser.add_argument).\n        (\n            \"store-locals-indicator\",\n            {\n                \"default\": \"properties\",\n                \"help\": (\n                    \"The expression name that indicates that the locals should \"\n                    \"be stored\"\n                ),\n            },\n        ),\n    )\n\n    def visit_call(self, node: nodes.Call) -> None:\n        \"\"\"Called when a :class:`.nodes.Call` node is visited.\n\n        See :mod:`astroid` for the description of available nodes.\n        \"\"\"\n        if not (\n            isinstance(node.func, nodes.Attribute)\n            and isinstance(node.func.expr, nodes.Name)\n            and node.func.expr.name == self.linter.config.store_locals_indicator\n            and node.func.attrname == \"create\"\n        ):\n            return\n        in_class = node.frame()\n        for param in node.args:\n            in_class.locals[param.name] = node\n\n", "metadata": {"source": "github.com/PyCQA/pylint/examples/custom.py", "language": "python", "complexity": "medium", "type": "class", "lines": 49, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.9125000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.9}}
{"domain": "code_generation", "category": "code_review", "prompt": "### Code Generation Request (CLAUDE.md):\nReview and improve this class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class MyRawChecker(BaseRawFileChecker):\n    r\"\"\"Check for line continuations with '\\' instead of using triple\n    quoted string or parenthesis.\n    \"\"\"\n\n    name = \"custom_raw\"\n    msgs = {\n        \"W9901\": (\n            \"use \\\\ for line continuation\",\n            \"backslash-line-continuation\",\n            (\n                \"Used when a \\\\ is used for a line continuation instead\"\n                \" of using triple quoted string or parenthesis.\"\n            ),\n        )\n    }\n    options = ()\n\n    def process_module(self, node: nodes.Module) -> None:\n        \"\"\"Process a module.\n\n        the module's content is accessible via node.stream() function\n        \"\"\"\n        with node.stream() as stream:\n            for lineno, line in enumerate(stream):\n                if line.rstrip().endswith(\"\\\\\"):\n                    self.add_message(\"backslash-line-continuation\", line=lineno)\n\n", "metadata": {"source": "github.com/PyCQA/pylint/examples/custom_raw.py", "language": "python", "complexity": "medium", "type": "class", "lines": 29, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.89, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "code_generation", "category": "code_review", "prompt": "### Code Generation Request (CLAUDE.md):\nReview and improve this class with 0 methods\n\n### PLAN Phase:\nAnalyze requirements and design class structure.\n\n### CODE Phase:", "completion": "class DeprecationChecker(DeprecatedMixin, BaseChecker):\n    \"\"\"Class implementing deprecation checker.\"\"\"\n\n    # DeprecatedMixin class is Mixin class implementing logic for searching deprecated methods and functions.\n    # The list of deprecated methods/functions is defined by the implementing class via\n    # deprecated_methods callback. DeprecatedMixin class is overriding attributes of BaseChecker hence must\n    # be specified *before* BaseChecker in list of base classes.\n\n    # The name defines a custom section of the config for this checker.\n    name = \"deprecated\"\n\n    # Register messages emitted by the checker.\n    msgs = {\n        **DeprecatedMixin.DEPRECATED_METHOD_MESSAGE,\n        **DeprecatedMixin.DEPRECATED_ARGUMENT_MESSAGE,\n    }\n\n    def deprecated_methods(self) -> set[str]:\n        \"\"\"Callback method called by DeprecatedMixin for every method/function found in the code.\n\n        Returns:\n            collections.abc.Container of deprecated function/method names.\n        \"\"\"\n        return {\"mymodule.deprecated_function\", \"mymodule.MyClass.deprecated_method\"}\n\n    def deprecated_arguments(self, method: str) -> tuple[tuple[int | None, str], ...]:\n        \"\"\"Callback returning the deprecated arguments of method/function.\n\n        Returns:\n            collections.abc.Iterable in form:\n                ((POSITION1, PARAM1), (POSITION2: PARAM2) ...)\n            where\n                * POSITIONX - position of deprecated argument PARAMX in function definition.\n                  If argument is keyword-only, POSITIONX should be None.\n                * PARAMX - name of the deprecated argument.\n        \"\"\"\n        if method == \"mymodule.myfunction\":\n            # myfunction() has two deprecated arguments:\n            # * deprecated_arg1 defined at 2nd position and\n            # * deprecated_arg2 defined at 5th position.\n            return ((2, \"deprecated_arg1\"), (5, \"deprecated_arg2\"))\n        if method == \"mymodule.MyClass.mymethod\":\n            # mymethod() has two deprecated arguments:\n            # * deprecated1 defined at 2nd position and\n            # * deprecated2 defined at 4th position.\n            return ((2, \"deprecated1\"), (4, \"deprecated2\"))\n        return ()\n\n", "metadata": {"source": "github.com/PyCQA/pylint/examples/deprecation_checker.py", "language": "python", "complexity": "medium", "type": "class", "lines": 49, "methods": 0, "authentic": true}, "validation": {"overall_quality": 0.8200000000000001, "syntax_valid": true, "completeness_score": 0.6, "authenticity_score": 0.8500000000000001}}
