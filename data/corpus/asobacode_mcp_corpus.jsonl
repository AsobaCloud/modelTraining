{"domain": "asobacode_mcp_business_analysis", "category": "asobacode_mcp_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate FastMCP server implementation with AsobaCode patterns for test_github_server functionality\n\n### EXPLORE Phase:\nAnalyze AsobaCode patterns and MCP requirements.\n\n### PLAN Phase:\nDesign implementation with FastMCP, Rich UI, and cost optimization.\n\n### CODE Phase:", "completion": "\"\"\"\nTest suite for Issue #23: GitHub Integration MCP Server\nTests GitHub API integration, repository management, and automation.\n\"\"\"\n\nimport pytest\nimport pytest_asyncio\nfrom unittest.mock import Mock, patch, AsyncMock\nfrom fastmcp import FastMCP\nimport json\nfrom datetime import datetime\n\n\nclass TestGitHubServerFoundation:\n    \"\"\"Test basic GitHub MCP server structure and setup.\"\"\"\n    \n    def test_github_server_module_exists(self):\n        \"\"\"Test that GitHub server module can be imported.\"\"\"\n        try:\n            from asoba_code.servers.github import main\n            assert main is not None, \"GitHub server main module should exist\"\n        except ImportError:\n            pytest.fail(\"GitHub server module not found - need to create\")\n    \n    def test_github_server_fastmcp_instance(self):\n        \"\"\"Test that GitHub server creates FastMCP instance.\"\"\"\n        from asoba_code.servers.github.main import app\n        assert isinstance(app, FastMCP), \"GitHub server should create FastMCP instance\"\n    \n    @pytest.mark.asyncio\n    async def test_github_server_has_required_tools(self):\n        \"\"\"Test that GitHub server registers required tools.\"\"\"\n        from asoba_code.servers.github.main import app\n        \n        required_tools = [\n            \"create_technical_debt_issue\",\n            \"create_automated_pr\", \n            \"analyze_pr_for_tests\",\n            \"get_repository_structure\",\n            \"manage_webhooks\"\n        ]\n        \n        available_tools_dict = await app.get_tools()\n        available_tool_names = list(available_tools_dict.keys())\n        \n        for tool in required_tools:\n            assert tool in available_tool_names, f\"Tool {tool} should be registered\"\n\n\nclass TestGitHubAuthentication:\n    \"\"\"Test GitHub API authentication and authorization.\"\"\"\n    \n    @pytest.fixture\n    def mock_github_client(self):\n        \"\"\"Mock GitHub client for testing.\"\"\"\n        with patch('github.Github') as mock_github:\n            mock_client = Mock()\n            mock_github.return_value = mock_client\n            yield mock_client\n    \n    def test_github_pat_authentication(self, mock_github_client):\n        \"\"\"Test GitHub Personal Access Token authentication.\"\"\"\n        from asoba_code.servers.github.auth import GitHubAuth\n        \n        auth = GitHubAuth(token=\"test_token\")\n        assert auth.token == \"test_token\", \"Should store PAT token\"\n        assert auth.client is not None, \"Should create GitHub client\"\n    \n    def test_github_permissions_validation(self, mock_github_client):\n        \"\"\"Test that GitHub token has required permissions.\"\"\"\n        from asoba_code.servers.github.auth import GitHubAuth\n        \n        # Mock required permissions\n        mock_github_client.get_user.return_value.login = \"test_user\"\n        mock_github_client.get_user.return_value.permissions = [\"repo\", \"issues\", \"pull_requests\"]\n        \n        auth = GitHubAuth(token=\"test_token\")\n        permissions = auth.validate_permissions()\n        \n        assert permissions[\"repo\"] == True, \"Should have repo permissions\"\n        assert permissions[\"issues\"] == True, \"Should have issues permissions\"\n        assert permissions[\"pull_requests\"] == True, \"Should have PR permissions\"\n    \n    def test_rate_limit_handling(self, mock_github_client):\n        \"\"\"Test GitHub API rate limit handling.\"\"\"\n        from asoba_code.servers.github.auth import GitHubAuth\n        \n        # Mock rate limit info\n        mock_github_client.get_rate_limit.return_value.core.remaining = 100\n        mock_github_client.get_rate_limit.return_value.core.reset = datetime.now()\n        \n        auth = GitHubAuth(token=\"test_token\")\n        rate_info = auth.get_rate_limit_info()\n        \n        assert rate_info[\"remaining\"] == 100, \"Should return remaining requests\"\n        assert \"reset_time\" in rate_info, \"Should include reset time\"\n\n\nclass TestRepositoryOperations:\n    \"\"\"Test GitHub repository analysis and management.\"\"\"\n    \n    @pytest.fixture\n    def mock_repo_manager(self):\n        \"\"\"Mock repository manager for testing.\"\"\"\n        from asoba_code.servers.github.repository import RepositoryManager\n        return RepositoryManager(token=\"test_token\")\n    \n    def test_repository_structure_analysis(self, mock_repo_manager):\n        \"\"\"Test repository structure analysis.\"\"\"\n        # Mock repository structure\n        mock_structure = {\n            \"files\": [\"main.py\", \"test.py\", \"README.md\"],\n            \"directories\": [\"src\", \"tests\", \"docs\"],\n            \"languages\": {\"Python\": 85.2, \"Markdown\": 14.8},\n            \"total_files\": 25,\n            \"total_lines\": 1250\n        }\n        \n        with patch.object(mock_repo_manager, 'analyze_structure') as mock_analyze:\n            mock_analyze.return_value = mock_structure\n            \n            result = mock_repo_manager.analyze_structure(\"test/repo\")\n            \n            assert result[\"total_files\"] == 25, \"Should count total files\"\n            assert \"Python\" in result[\"languages\"], \"Should detect Python\"\n            assert \"src\" in result[\"directories\"], \"Should find src directory\"\n    \n    def test_file_content_retrieval(self, mock_repo_manager):\n        \"\"\"Test retrieving file contents from repository.\"\"\"\n        mock_content = {\n            \"content\": \"def hello():\\n    return 'Hello, World!'\",\n            \"encoding\": \"utf-8\",\n            \"size\": 42,\n            \"path\": \"src/main.py\"\n        }\n        \n        with patch.object(mock_repo_manager, 'get_file_content') as mock_get:\n            mock_get.return_value = mock_content\n            \n            result = mock_repo_manager.get_file_content(\"test/repo\", \"src/main.py\")\n            \n            assert \"def hello\" in result[\"content\"], \"Should return file content\"\n            assert result[\"size\"] == 42, \"Should return file size\"\n    \n    def test_repository_metadata_extraction(self, mock_repo_manager):\n        \"\"\"Test extracting repository metadata.\"\"\"\n        mock_metadata = {\n            \"name\": \"test-repo\",\n            \"description\": \"Test repository\",\n            \"language\": \"Python\",\n            \"stars\": 10,\n            \"forks\": 2,\n            \"issues\": 5,\n            \"pull_requests\": 3,\n            \"contributors\": 2,\n            \"last_updated\": \"2024-01-15T10:30:00Z\"\n        }\n        \n        with patch.object(mock_repo_manager, 'get_metadata') as mock_meta:\n            mock_meta.return_value = mock_metadata\n            \n            result = mock_repo_manager.get_metadata(\"test/repo\")\n            \n            assert result[\"name\"] == \"test-repo\", \"Should return repo name\"\n            assert result[\"language\"] == \"Python\", \"Should detect primary language\"\n            assert result[\"issues\"] == 5, \"Should count open issues\"\n\n\nclass TestIssueManagement:\n    \"\"\"Test GitHub issue creation and management.\"\"\"\n    \n    @pytest.fixture\n    def mock_issue_manager(self):\n        \"\"\"Mock issue manager for testing.\"\"\"\n        from asoba_code.servers.github.issues import IssueManager\n        return IssueManager(token=\"test_token\")\n    \n    def test_technical_debt_issue_creation(self, mock_issue_manager):\n        \"\"\"Test creating technical debt issues.\"\"\"\n        technical_debt = {\n            \"type\": \"complexity\",\n            \"file\": \"src/complex.py\",\n            \"function\": \"complex_function\",\n            \"complexity_score\": 15,\n            \"description\": \"Function has high cyclomatic complexity\",\n            \"suggestions\": [\"Break into smaller functions\", \"Use early returns\"]\n        }\n        \n        mock_issue = {\n            \"number\": 123,\n            \"title\": \"Technical Debt: High complexity in complex_function\",\n            \"body\": \"Function has high cyclomatic complexity\\n\\nSuggestions:\\n- Break into smaller functions\\n- Use early returns\",\n            \"labels\": [\"technical-debt\", \"complexity\"],\n            \"assignees\": []\n        }\n        \n        with patch.object(mock_issue_manager, 'create_technical_debt_issue') as mock_create:\n            mock_create.return_value = mock_issue\n            \n            result = mock_issue_manager.create_technical_debt_issue(\"test/repo\", technical_debt)\n            \n            assert result[\"number\"] == 123, \"Should return issue number\"\n            assert \"complexity\" in result[\"title\"], \"Should include complexity in title\"\n            assert \"technical-debt\" in result[\"labels\"], \"Should have technical debt label\"\n    \n    def test_automated_pr_creation(self, mock_issue_manager):\n        \"\"\"Test creating automated pull requests.\"\"\"\n        pr_data = {\n            \"title\": \"Fix: Reduce complexity in complex_function\",\n            \"body\": \"Automated fix for technical debt issue #123\",\n            \"head\": \"feature/fix-complexity\",\n            \"base\": \"main\",\n            \"files\": {\n                \"src/complex.py\": \"def simple_function():\\n    return 'simplified'\"\n            }\n        }\n        \n        mock_pr = {\n            \"number\": 456,\n            \"title\": \"Fix: Reduce complexity in complex_function\",\n            \"state\": \"open\",\n            \"url\": \"https://github.com/test/repo/pull/456\",\n            \"mergeable\": True\n        }\n        \n        with patch.object(mock_issue_manager, 'create_automated_pr') as mock_create:\n            mock_create.return_value = mock_pr\n            \n            result = mock_issue_manager.create_automated_pr(\"test/repo\", pr_data)\n            \n            assert result[\"number\"] == 456, \"Should return PR number\"\n            assert result[\"state\"] == \"open\", \"Should be open PR\"\n            assert result[\"mergeable\"] == True, \"Should be mergeable\"\n    \n    def test_pr_analysis_for_tests(self, mock_issue_manager):\n        \"\"\"Test analyzing PRs for test requirements.\"\"\"\n        pr_number = 456\n        \n        mock_analysis = {\n            \"files_changed\": [\"src/main.py\", \"src/utils.py\"],\n            \"lines_added\": 45,\n            \"lines_removed\": 12,\n            \"test_coverage\": 85.2,\n            \"missing_tests\": [\"test_new_function\", \"test_edge_cases\"],\n            \"suggested_tests\": [\n                {\n                    \"file\": \"tests/test_main.py\",\n                    \"function\": \"test_new_function\",\n                    \"description\": \"Test new function with various inputs\"\n                }\n            ]\n        }\n        \n        with patch.object(mock_issue_manager, 'analyze_pr_for_tests') as mock_analyze:\n            mock_analyze.return_value = mock_analysis\n            \n            result = mock_issue_manager.analyze_pr_for_tests(\"test/repo\", pr_number)\n            \n            assert result[\"test_coverage\"] == 85.2, \"Should calculate test coverage\"\n            assert len(result[\"missing_tests\"]) == 2, \"Should identify missing tests\"\n            assert len(result[\"suggested_tests\"]) == 1, \"Should suggest new tests\"\n\n\nclass TestWebhookManagement:\n    \"\"\"Test GitHub webhook handling and management.\"\"\"\n    \n    @pytest.fixture\n    def mock_webhook_manager(self):\n        \"\"\"Mock webhook manager for testing.\"\"\"\n        from asoba_code.servers.github.webhooks import WebhookManager\n        return WebhookManager(token=\"test_token\")\n    \n    def test_webhook_registration(self, mock_webhook_manager):\n        \"\"\"Test registering webhooks for repository events.\"\"\"\n        webhook_config = {\n            \"url\": \"https://api.example.com/webhook\",\n            \"events\": [\"push\", \"pull_request\", \"issues\"],\n            \"secret\": \"webhook_secret\"\n        }\n        \n        mock_webhook = {\n            \"id\": 789,\n            \"url\": \"https://api.example.com/webhook\",\n            \"events\": [\"push\", \"pull_request\", \"issues\"],\n            \"active\": True\n        }\n        \n        with patch.object(mock_webhook_manager, 'register_webhook') as mock_register:\n            mock_register.return_value = mock_webhook\n            \n            result = mock_webhook_manager.register_webhook(\"test/repo\", webhook_config)\n            \n            assert result[\"id\"] == 789, \"Should return webhook ID\"\n            assert result[\"active\"] == True, \"Should be active webhook\"\n            assert \"pull_request\" in result[\"events\"], \"Should include PR events\"\n    \n    def test_webhook_event_processing(self, mock_webhook_manager):\n        \"\"\"Test processing incoming webhook events.\"\"\"\n        webhook_payload = {\n            \"action\": \"opened\",\n            \"pull_request\": {\n                \"number\": 123,\n                \"title\": \"Add new feature\",\n                \"user\": {\"login\": \"contributor\"},\n                \"base\": {\"ref\": \"main\"},\n                \"head\": {\"ref\": \"feature/new-feature\"}\n            },\n            \"repository\": {\n                \"name\": \"test-repo\",\n                \"full_name\": \"test/repo\"\n            }\n        }\n        \n        mock_processing_result = {\n            \"event_type\": \"pull_request\",\n            \"action\": \"opened\",\n            \"processed\": True,\n            \"actions_taken\": [\"analyze_pr_for_tests\", \"create_test_suggestions\"]\n        }\n        \n        with patch.object(mock_webhook_manager, 'process_event') as mock_process:\n            mock_process.return_value = mock_processing_result\n            \n            result = mock_webhook_manager.process_event(webhook_payload)\n            \n            assert result[\"event_type\"] == \"pull_request\", \"Should identify event type\"\n            assert result[\"processed\"] == True, \"Should process successfully\"\n            assert len(result[\"actions_taken\"]) == 2, \"Should take appropriate actions\"\n\n\n@pytest.mark.asyncio\nclass TestGitHubTools:\n    \"\"\"Test GitHub MCP tools implementation.\"\"\"\n    \n    @pytest_asyncio.fixture\n    async def github_client(self):\n        \"\"\"Create mock GitHub MCP client for testing.\"\"\"\n        mock_client = Mock()\n        \n        def mock_call_tool(tool_name, params):\n            if tool_name == \"create_technical_debt_issue\":\n                return {\n                    \"issue_number\": 123,\n                    \"url\": \"https://github.com/test/repo/issues/123\",\n                    \"title\": \"Technical Debt: High complexity in function\",\n                    \"status\": \"created\"\n                }\n            elif tool_name == \"create_automated_pr\":\n                return {\n                    \"pr_number\": 456,\n                    \"url\": \"https://github.com/test/repo/pull/456\",\n                    \"title\": \"Automated fix for technical debt\",\n                    \"status\": \"created\",\n                    \"mergeable\": True\n                }\n            elif tool_name == \"analyze_pr_for_tests\":\n                return {\n                    \"test_coverage\": 85.2,\n                    \"missing_tests\": [\"test_new_function\"],\n                    \"suggested_tests\": [\n                        {\n                            \"file\": \"tests/test_main.py\",\n                            \"function\": \"test_new_function\",\n                            \"description\": \"Test new function behavior\"\n                        }\n                    ]\n                }\n            elif tool_name == \"get_repository_structure\":\n                return {\n                    \"files\": [\"main.py\", \"test.py\"],\n                    \"directories\": [\"src\", \"tests\"],\n                    \"languages\": {\"Python\": 90.0, \"Markdown\": 10.0},\n                    \"total_files\": 15\n                }\n            elif tool_name == \"manage_webhooks\":\n                return {\n                    \"webhook_id\": 789,\n                    \"url\": \"https://api.example.com/webhook\",\n                    \"events\": [\"push\", \"pull_request\"],\n                    \"status\": \"active\"\n                }\n            else:\n                return {}\n        \n        mock_client.call_tool = AsyncMock(side_effect=mock_call_tool)\n        yield mock_client\n    \n    async def test_create_technical_debt_issue_tool(self, github_client):\n        \"\"\"Test create_technical_debt_issue tool functionality.\"\"\"\n        result = await github_client.call_tool(\n            \"create_technical_debt_issue\",\n            {\n                \"repository\": \"test/repo\",\n                \"debt_type\": \"complexity\",\n                \"file\": \"src/complex.py\",\n                \"function\": \"complex_function\",\n                \"description\": \"Function has high cyclomatic complexity\"\n            }\n        )\n        \n        assert result[\"issue_number\"] == 123, \"Should return issue number\"\n        assert \"complexity\" in result[\"title\"], \"Should include debt type in title\"\n        assert result[\"status\"] == \"created\", \"Should create issue successfully\"\n    \n    async def test_create_automated_pr_tool(self, github_client):\n        \"\"\"Test create_automated_pr tool functionality.\"\"\"\n        result = await github_client.call_tool(\n            \"create_automated_pr\",\n            {\n                \"repository\": \"test/repo\",\n                \"title\": \"Automated fix for technical debt\",\n                \"branch\": \"fix/reduce-complexity\",\n                \"files\": {\n                    \"src/complex.py\": \"def simplified_function():\\n    return 'simple'\"\n                }\n            }\n        )\n        \n        assert result[\"pr_number\"] == 456, \"Should return PR number\"\n        assert result[\"mergeable\"] == True, \"Should be mergeable\"\n        assert result[\"status\"] == \"created\", \"Should create PR successfully\"\n    \n    async def test_analyze_pr_for_tests_tool(self, github_client):\n        \"\"\"Test analyze_pr_for_tests tool functionality.\"\"\"\n        result = await github_client.call_tool(\n            \"analyze_pr_for_tests\",\n            {\n                \"repository\": \"test/repo\",\n                \"pr_number\": 456\n            }\n        )\n        \n        assert result[\"test_coverage\"] == 85.2, \"Should calculate test coverage\"\n        assert len(result[\"missing_tests\"]) == 1, \"Should identify missing tests\"\n        assert len(result[\"suggested_tests\"]) == 1, \"Should suggest new tests\"\n    \n    async def test_get_repository_structure_tool(self, github_client):\n        \"\"\"Test get_repository_structure tool functionality.\"\"\"\n        result = await github_client.call_tool(\n            \"get_repository_structure\",\n            {\n                \"repository\": \"test/repo\"\n            }\n        )\n        \n        assert result[\"total_files\"] == 15, \"Should count total files\"\n        assert \"Python\" in result[\"languages\"], \"Should detect Python\"\n        assert \"src\" in result[\"directories\"], \"Should find src directory\"\n    \n    async def test_manage_webhooks_tool(self, github_client):\n        \"\"\"Test manage_webhooks tool functionality.\"\"\"\n        result = await github_client.call_tool(\n            \"manage_webhooks\",\n            {\n                \"repository\": \"test/repo\",\n                \"webhook_url\": \"https://api.example.com/webhook\",\n                \"events\": [\"push\", \"pull_request\"]\n            }\n        )\n        \n        assert result[\"webhook_id\"] == 789, \"Should return webhook ID\"\n        assert result[\"status\"] == \"active\", \"Should be active webhook\"\n        assert \"pull_request\" in result[\"events\"], \"Should include PR events\"\n\n\nclass TestGitHubServerConfiguration:\n    \"\"\"Test GitHub server configuration and environment setup.\"\"\"\n    \n    def test_github_config_loads(self):\n        \"\"\"Test that GitHub configuration loads correctly.\"\"\"\n        from asoba_code.servers.github.config import GitHubConfig\n        \n        config = GitHubConfig()\n        assert config.base_url == \"https://api.github.com\", \"Should use GitHub API URL\"\n        assert config.timeout == 30, \"Should have reasonable timeout\"\n        assert config.max_retries == 3, \"Should have retry configuration\"\n    \n    def test_webhook_config_validation(self):\n        \"\"\"Test webhook configuration validation.\"\"\"\n        from asoba_code.servers.github.config import WebhookConfig\n        \n        config = WebhookConfig(\n            url=\"https://api.example.com/webhook\",\n            secret=\"test_secret\",\n            events=[\"push\", \"pull_request\"]\n        )\n        \n        assert config.url.startswith(\"https://\"), \"Should require HTTPS\"\n        assert len(config.secret) >= 10, \"Should have secure secret\"\n        assert \"push\" in config.events, \"Should include push events\"\n    \n    def test_rate_limiting_config(self):\n        \"\"\"Test rate limiting configuration.\"\"\"\n        from asoba_code.servers.github.config import RateLimitConfig\n        \n        config = RateLimitConfig()\n        assert config.requests_per_hour == 5000, \"Should have default rate limit\"\n        assert config.burst_limit == 100, \"Should have burst limit\"\n        assert config.retry_after == 60, \"Should have retry delay\"", "metadata": {"source": "asobacode-cli//home/shingai/sort/asoba-code/tests/unit/test_github_server.py", "language": "python", "complexity": "medium", "pattern_type": "fastmcp_servers", "features": {"has_fastmcp": true, "has_rich_ui": false, "has_routing": false, "has_cost_tracking": true, "has_claude_md": false, "function_count": 32, "class_count": 7, "tool_count": 0}, "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.78375, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.65, "asobacode_compliance": 0.7999999999999999}}
{"domain": "asobacode_mcp_business_analysis", "category": "asobacode_mcp_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate FastMCP server implementation with AsobaCode patterns for test_ai_models_server functionality\n\n### EXPLORE Phase:\nAnalyze AsobaCode patterns and MCP requirements.\n\n### PLAN Phase:\nDesign implementation with FastMCP, Rich UI, and cost optimization.\n\n### CODE Phase:", "completion": "\"\"\"\nTest suite for Issue #22: AI Models MCP Server\nTests AWS Bedrock integration, model routing, and cost optimization.\n\"\"\"\n\nimport pytest\nimport asyncio\nfrom unittest.mock import Mock, patch, AsyncMock\nimport json\nfrom decimal import Decimal\nfrom datetime import datetime\n\n# Try to import FastMCP but handle import errors gracefully\ntry:\n    from fastmcp import FastMCP, Client\nexcept ImportError:\n    FastMCP = None\n    Client = None\n\n\nclass TestAIModelsServerFoundation:\n    \"\"\"Test basic AI Models MCP server structure and setup.\"\"\"\n    \n    def test_ai_models_server_module_exists(self):\n        \"\"\"Test that AI models server module can be imported.\"\"\"\n        try:\n            from asoba_code.servers.ai_models import main\n            assert main is not None, \"AI models server main module should exist\"\n        except ImportError:\n            pytest.fail(\"AI models server module not found - need to create\")\n    \n    def test_ai_models_server_fastmcp_instance(self):\n        \"\"\"Test that AI models server creates FastMCP instance.\"\"\"\n        if FastMCP is None:\n            pytest.skip(\"FastMCP not available\")\n            \n        from asoba_code.servers.ai_models.main import app\n        assert isinstance(app, FastMCP), \"AI models server should create FastMCP instance\"\n    \n    def test_ai_models_server_has_required_tools(self):\n        \"\"\"Test that AI models server registers required tools.\"\"\"\n        if FastMCP is None:\n            pytest.skip(\"FastMCP not available\")\n            \n        from asoba_code.servers.ai_models.main import app\n        \n        required_tools = [\n            \"generate_code\",\n            \"analyze_code\", \n            \"refactor_code\",\n            \"get_server_status\"\n        ]\n        \n        # Test that tools are defined in the module\n        import inspect\n        import asoba_code.servers.ai_models.main as main_module\n        \n        for tool in required_tools:\n            assert hasattr(main_module, tool), f\"Tool {tool} should be defined\"\n\n\nclass TestAWSBedrockIntegration:\n    \"\"\"Test AWS Bedrock integration for multi-model support.\"\"\"\n    \n    @pytest.fixture\n    def mock_bedrock_client(self):\n        \"\"\"Mock AWS Bedrock client for testing.\"\"\"\n        with patch('boto3.client') as mock_client:\n            mock_bedrock = Mock()\n            mock_client.return_value = mock_bedrock\n            yield mock_bedrock\n    \n    def test_bedrock_client_initialization(self, mock_bedrock_client):\n        \"\"\"Test that Bedrock client initializes correctly.\"\"\"\n        from asoba_code.servers.ai_models.config import BedrockConfig\n        \n        config = BedrockConfig()\n        assert config.region == \"us-east-1\", \"Should default to us-east-1\"\n        assert config.models is not None, \"Should have model configuration\"\n    \n    def test_claude_35_sonnet_model_available(self, mock_bedrock_client):\n        \"\"\"Test that Claude-3.5 Sonnet model is configured.\"\"\"\n        from asoba_code.servers.ai_models.models import ModelConfig\n        \n        claude_35 = ModelConfig.get_model(\"claude-3.5-sonnet\")\n        assert claude_35 is not None, \"Claude-3.5 Sonnet should be configured\"\n        assert claude_35.complexity_level == \"high\", \"Should handle high complexity tasks\"\n        assert claude_35.cost_per_token > 0, \"Should have cost configuration\"\n    \n    def test_claude_3_haiku_model_available(self, mock_bedrock_client):\n        \"\"\"Test that Claude-3 Haiku model is configured.\"\"\"\n        from asoba_code.servers.ai_models.models import ModelConfig\n        \n        haiku = ModelConfig.get_model(\"claude-3-haiku\")\n        assert haiku is not None, \"Claude-3 Haiku should be configured\"\n        assert haiku.complexity_level == \"low\", \"Should handle low complexity tasks\"\n        assert haiku.cost_per_token < 0.001, \"Should be cost-effective\"\n    \n    def test_gpt4_model_available(self, mock_bedrock_client):\n        \"\"\"Test that GPT-4 model is configured.\"\"\"\n        from asoba_code.servers.ai_models.models import ModelConfig\n        \n        gpt4 = ModelConfig.get_model(\"gpt-4\")\n        assert gpt4 is not None, \"GPT-4 should be configured\"\n        assert gpt4.complexity_level == \"high\", \"Should handle high complexity tasks\"\n    \n    def test_code_llama_model_available(self, mock_bedrock_client):\n        \"\"\"Test that Code Llama model is configured.\"\"\"\n        from asoba_code.servers.ai_models.models import ModelConfig\n        \n        code_llama = ModelConfig.get_model(\"code-llama\")\n        assert code_llama is not None, \"Code Llama should be configured\"\n        assert code_llama.specialty == \"code\", \"Should specialize in code generation\"\n\n\nclass TestIntelligentModelRouting:\n    \"\"\"Test intelligent model routing based on complexity and cost.\"\"\"\n    \n    @pytest.fixture\n    def mock_router(self):\n        \"\"\"Mock model router for testing.\"\"\"\n        from asoba_code.servers.ai_models.routing import ModelRouter\n        return ModelRouter()\n    \n    def test_simple_task_routes_to_haiku(self, mock_router):\n        \"\"\"Test that simple tasks route to cost-effective Claude-3 Haiku.\"\"\"\n        task = {\n            \"type\": \"generate_code\",\n            \"complexity\": \"low\",\n            \"code_length\": 50,\n            \"description\": \"Simple function to add two numbers\"\n        }\n        \n        selected_model = mock_router.select_model(task)\n        assert selected_model == \"claude-3-haiku\", \"Simple tasks should use Haiku for cost efficiency\"\n    \n    def test_complex_task_routes_to_sonnet(self, mock_router):\n        \"\"\"Test that complex tasks route to Claude-3.5 Sonnet.\"\"\"\n        task = {\n            \"type\": \"analyze_code\",\n            \"complexity\": \"high\", \n            \"code_length\": 5000,\n            \"description\": \"Analyze complex architectural patterns and suggest improvements\"\n        }\n        \n        selected_model = mock_router.select_model(task)\n        assert selected_model == \"claude-3.5-sonnet\", \"Complex tasks should use Sonnet for quality\"\n    \n    def test_code_generation_routes_to_code_llama(self, mock_router):\n        \"\"\"Test that code-heavy tasks can route to Code Llama.\"\"\"\n        task = {\n            \"type\": \"generate_code\",\n            \"complexity\": \"medium\",\n            \"code_length\": 500,\n            \"language\": \"python\",\n            \"description\": \"Generate complex algorithm implementation\"\n        }\n        \n        selected_model = mock_router.select_model(task)\n        assert selected_model in [\"code-llama\", \"claude-3.5-sonnet\"], \"Code tasks should use specialized models\"\n\n\nclass TestPromptCaching:\n    \"\"\"Test prompt caching for 90% cost reduction target.\"\"\"\n    \n    @pytest.fixture\n    def mock_cache(self):\n        \"\"\"Mock prompt cache for testing.\"\"\"\n        from asoba_code.servers.ai_models.caching import PromptCache\n        return PromptCache()\n    \n    def test_cache_stores_prompt_responses(self, mock_cache):\n        \"\"\"Test that cache stores prompt responses correctly.\"\"\"\n        prompt = \"Generate a simple Python function\"\n        response = \"def example(): pass\"\n        \n        cache_key = mock_cache.generate_key(prompt, \"claude-3-haiku\")\n        mock_cache.store(cache_key, response, cost=Decimal('0.001'))\n        \n        cached_response = mock_cache.get(cache_key)\n        assert cached_response == response, \"Cache should store and retrieve responses\"\n    \n    def test_cache_hit_reduces_cost(self, mock_cache):\n        \"\"\"Test that cache hits provide significant cost reduction.\"\"\"\n        prompt = \"Generate a simple Python function\"\n        original_cost = Decimal('0.001')\n        \n        cache_key = mock_cache.generate_key(prompt, \"claude-3-haiku\")\n        mock_cache.store(cache_key, \"def example(): pass\", cost=original_cost)\n        \n        cache_hit_cost = mock_cache.get_cost(cache_key)\n        reduction_percentage = (original_cost - cache_hit_cost) / original_cost * 100\n        \n        assert reduction_percentage >= 90, \"Cache should provide ≥90% cost reduction\"\n    \n    def test_cache_key_includes_model_and_params(self, mock_cache):\n        \"\"\"Test that cache keys include model and parameters for accuracy.\"\"\"\n        prompt = \"Generate code\"\n        \n        key1 = mock_cache.generate_key(prompt, \"claude-3-haiku\", temperature=0.1)\n        key2 = mock_cache.generate_key(prompt, \"claude-3.5-sonnet\", temperature=0.1)\n        key3 = mock_cache.generate_key(prompt, \"claude-3-haiku\", temperature=0.9)\n        \n        assert key1 != key2, \"Different models should have different cache keys\"\n        assert key1 != key3, \"Different parameters should have different cache keys\"\n\n\nclass TestCloudWatchCostMonitoring:\n    \"\"\"Test CloudWatch integration for cost tracking.\"\"\"\n    \n    @pytest.fixture\n    def mock_cloudwatch(self):\n        \"\"\"Mock CloudWatch client for testing.\"\"\"\n        with patch('boto3.client') as mock_client:\n            mock_cw = Mock()\n            mock_client.return_value = mock_cw\n            yield mock_cw\n    \n    def test_cost_metrics_sent_to_cloudwatch(self, mock_cloudwatch):\n        \"\"\"Test that cost metrics are sent to CloudWatch.\"\"\"\n        from asoba_code.servers.ai_models.monitoring import CostMonitor\n        \n        monitor = CostMonitor()\n        monitor.record_request_cost(\n            model=\"claude-3.5-sonnet\",\n            input_tokens=100,\n            output_tokens=50,\n            cost=Decimal('0.002')\n        )\n        \n        # Should call put_metric_data\n        mock_cloudwatch.put_metric_data.assert_called()\n        call_args = mock_cloudwatch.put_metric_data.call_args\n        \n        assert \"AI_Models\" in str(call_args), \"Should use AI_Models namespace\"\n        assert \"RequestCost\" in str(call_args), \"Should track request cost metric\"\n    \n    def test_daily_cost_aggregation(self, mock_cloudwatch):\n        \"\"\"Test that daily costs are aggregated and monitored.\"\"\"\n        from asoba_code.servers.ai_models.monitoring import CostMonitor\n        \n        monitor = CostMonitor()\n        daily_cost = monitor.get_daily_cost()\n        \n        assert isinstance(daily_cost, Decimal), \"Daily cost should be a Decimal\"\n        assert daily_cost >= 0, \"Daily cost should be non-negative\"\n\n\n@pytest.mark.asyncio\nclass TestAIModelsTools:\n    \"\"\"Test AI Models MCP tools implementation.\"\"\"\n    \n    @pytest.fixture\n    async def ai_models_client(self):\n        \"\"\"Create MCP client for AI models server testing.\"\"\"\n        # Mock client that returns expected tool responses\n        mock_client = Mock()\n        \n        def mock_call_tool(tool_name, params):\n            if tool_name == \"generate_code\":\n                return {\n                    \"code\": \"def add_numbers(a, b):\\n    return a + b\",\n                    \"model_used\": \"claude-3-haiku\",\n                    \"cost\": 0.001\n                }\n            elif tool_name == \"analyze_code\":\n                return {\n                    \"analysis\": \"Code complexity analysis complete\",\n                    \"suggestions\": [\"Consider using more descriptive variable names\"],\n                    \"complexity_score\": 3\n                }\n            elif tool_name == \"refactor_code\":\n                return {\n                    \"refactored_code\": \"def improved_function(x):\\n    if x <= 0:\\n        return 0\\n    return x * 2 if x < 100 and x % 2 == 0 else x * 3 if x < 100 else x / 2\",\n                    \"improvements\": [\"Reduced nested if statements\", \"Improved readability\"],\n                    \"original_complexity\": 5,\n                    \"new_complexity\": 3\n                }\n            else:\n                return {}\n        \n        mock_client.call_tool = AsyncMock(side_effect=mock_call_tool)\n        yield mock_client\n    \n    async def test_generate_code_tool(self, ai_models_client):\n        \"\"\"Test generate_code tool functionality.\"\"\"\n        result = await ai_models_client.call_tool(\n            \"generate_code\",\n            {\n                \"description\": \"Generate a simple Python function that adds two numbers\",\n                \"language\": \"python\",\n                \"complexity\": \"low\"\n            }\n        )\n        \n        assert result is not None, \"generate_code should return a result\"\n        assert \"def\" in result.get(\"code\", \"\"), \"Should generate Python function\"\n        assert \"model_used\" in result, \"Should indicate which model was used\"\n        assert \"cost\" in result, \"Should include cost information\"\n    \n    async def test_analyze_code_tool(self, ai_models_client):\n        \"\"\"Test analyze_code tool functionality.\"\"\"\n        code_to_analyze = \"\"\"\ndef complex_function(data):\n    result = []\n    for i in range(len(data)):\n        if data[i] > 0:\n            for j in range(len(data)):\n                if i != j and data[j] < 0:\n                    result.append(data[i] + data[j])\n    return result\n\"\"\"\n        \n        result = await ai_models_client.call_tool(\n            \"analyze_code\",\n            {\n                \"code\": code_to_analyze,\n                \"language\": \"python\",\n                \"analysis_type\": \"complexity\"\n            }\n        )\n        \n        assert result is not None, \"analyze_code should return a result\"\n        assert \"analysis\" in result, \"Should provide code analysis\"\n        assert \"suggestions\" in result, \"Should provide improvement suggestions\"\n        assert \"complexity_score\" in result, \"Should calculate complexity\"\n    \n    async def test_refactor_code_tool(self, ai_models_client):\n        \"\"\"Test refactor_code tool functionality.\"\"\"\n        code_to_refactor = \"\"\"\ndef bad_function(x):\n    if x > 0:\n        if x < 100:\n            if x % 2 == 0:\n                return x * 2\n            else:\n                return x * 3\n        else:\n            return x / 2\n    else:\n        return 0\n\"\"\"\n        \n        result = await ai_models_client.call_tool(\n            \"refactor_code\",\n            {\n                \"code\": code_to_refactor,\n                \"language\": \"python\",\n                \"refactor_goals\": [\"reduce_complexity\", \"improve_readability\"]\n            }\n        )\n        \n        assert result is not None, \"refactor_code should return a result\"\n        assert \"refactored_code\" in result, \"Should provide refactored code\"\n        assert \"improvements\" in result, \"Should list improvements made\"\n        assert \"original_complexity\" in result, \"Should show original complexity\"\n        assert \"new_complexity\" in result, \"Should show improved complexity\"\n\n\nclass TestAIModelsServerPerformance:\n    \"\"\"Test AI Models server performance requirements.\"\"\"\n    \n    @pytest.mark.asyncio\n    async def test_response_time_under_2_seconds(self):\n        \"\"\"Test that AI model responses are under 2 seconds for complex operations.\"\"\"\n        # Mock client for performance testing\n        mock_client = Mock()\n        mock_client.call_tool = AsyncMock(return_value={\"code\": \"def test(): pass\"})\n        \n        import time\n        \n        start_time = time.time()\n        await mock_client.call_tool(\n            \"generate_code\",\n            {\n                \"description\": \"Simple function\",\n                \"language\": \"python\",\n                \"complexity\": \"low\"\n            }\n        )\n        elapsed = time.time() - start_time\n        \n        assert elapsed < 2.0, f\"Response time {elapsed}s should be under 2 seconds\"\n    \n    @pytest.mark.asyncio\n    async def test_concurrent_request_handling(self):\n        \"\"\"Test that server can handle multiple concurrent requests.\"\"\"\n        # Mock client for concurrent testing\n        mock_client = Mock()\n        mock_client.call_tool = AsyncMock(return_value={\"code\": \"def test(): pass\"})\n        \n        async def make_request():\n            return await mock_client.call_tool(\n                \"generate_code\",\n                {\n                    \"description\": \"Test function\",\n                    \"language\": \"python\",\n                    \"complexity\": \"low\"\n                }\n            )\n        \n        # Run 10 concurrent requests\n        tasks = [make_request() for _ in range(10)]\n        results = await asyncio.gather(*tasks, return_exceptions=True)\n        \n        # All requests should succeed\n        for result in results:\n            assert not isinstance(result, Exception), \"Concurrent requests should succeed\"\n\n\nclass TestAIModelsServerConfiguration:\n    \"\"\"Test AI Models server configuration and environment setup.\"\"\"\n    \n    def test_server_config_loads_from_yaml(self):\n        \"\"\"Test that server loads configuration from default.yaml.\"\"\"\n        from asoba_code.servers.ai_models.config import load_config\n        \n        config = load_config()\n        assert config is not None, \"Should load configuration\"\n        assert hasattr(config, 'aws'), \"Should have AWS configuration\"\n        assert hasattr(config, 'models'), \"Should have models configuration\"\n    \n    def test_aws_credentials_validation(self):\n        \"\"\"Test that AWS credentials are validated on startup.\"\"\"\n        from asoba_code.servers.ai_models.config import validate_aws_credentials\n        \n        # This should not raise an exception in test environment\n        try:\n            validate_aws_credentials()\n        except Exception as e:\n            # In test environment, we expect credential validation to handle missing creds gracefully\n            assert \"credentials\" in str(e).lower(), \"Should provide clear credential error message\"\n    \n    def test_cost_limits_configuration(self):\n        \"\"\"Test that cost limits are configurable and enforced.\"\"\"\n        from asoba_code.servers.ai_models.config import CostLimits\n        \n        limits = CostLimits()\n        assert limits.daily_limit > 0, \"Should have daily cost limit\"\n        assert limits.monthly_limit > 0, \"Should have monthly cost limit\"\n        assert limits.alert_threshold > 0, \"Should have cost alert threshold\"\n\n\nclass TestMistralIntegration:\n    \"\"\"Test fine-tuned Mistral 7B server integration.\"\"\"\n    \n    def test_mistral_server_discovery(self):\n        \"\"\"Test that Mistral servers can be discovered.\"\"\"\n        from asoba_code.servers.ai_models.discovery import AIServerDiscovery\n        \n        discovery = AIServerDiscovery()\n        assert discovery.status_url is not None, \"Should have status URL configured\"\n        assert discovery.fallback_ip is not None, \"Should have fallback IP configured\"\n    \n    def test_mistral_server_info_dataclass(self):\n        \"\"\"Test ServerInfo dataclass for Mistral server metadata.\"\"\"\n        from asoba_code.servers.ai_models.discovery import ServerInfo\n        \n        server = ServerInfo(\n            ip=\"54.197.142.172\",\n            port=8000,\n            status=\"healthy\",\n            last_ping=datetime.now(),\n            model_type=\"mistral-7b\",\n            region=\"us-east-1\"\n        )\n        \n        assert server.endpoint == \"http://54.197.142.172:8000\"\n        assert server.is_healthy == True\n        assert server.model_type == \"mistral-7b\"\n    \n    @patch('requests.get')\n    def test_mistral_server_discovery_with_mock(self, mock_get):\n        \"\"\"Test server discovery with mocked HTTP response.\"\"\"\n        from asoba_code.servers.ai_models.discovery import AIServerDiscovery\n        \n        # Mock successful response\n        mock_response = Mock()\n        mock_response.json.return_value = {\n            \"servers\": [\n                {\n                    \"ip\": \"54.197.142.172\",\n                    \"port\": 8000,\n                    \"status\": \"healthy\",\n                    \"last_ping\": datetime.now().isoformat(),\n                    \"model_type\": \"mistral-7b\",\n                    \"region\": \"us-east-1\"\n                }\n            ]\n        }\n        mock_response.headers = {'content-type': 'application/json'}\n        mock_get.return_value = mock_response\n        \n        discovery = AIServerDiscovery()\n        servers = discovery.discover_servers()\n        \n        assert len(servers) == 1\n        assert servers[0].ip == \"54.197.142.172\"\n        assert servers[0].model_type == \"mistral-7b\"\n    \n    def test_mistral_client_initialization(self):\n        \"\"\"Test MistralClient initialization with discovery.\"\"\"\n        from asoba_code.servers.ai_models.discovery import AIServerDiscovery, MistralClient\n        \n        discovery = AIServerDiscovery()\n        client = MistralClient(discovery)\n        \n        assert client.discovery == discovery\n        assert client.current_server is None\n    \n    def test_mistral_model_configuration(self):\n        \"\"\"Test that Mistral 7B model is properly configured.\"\"\"\n        from asoba_code.servers.ai_models.models import ModelConfig\n        \n        models = ModelConfig.get_all_models()\n        assert \"mistral-7b-finetuned\" in models, \"Mistral 7B should be registered\"\n        \n        mistral_model = models[\"mistral-7b-finetuned\"]\n        assert mistral_model.complexity_level == \"medium\"\n        assert mistral_model.specialty == \"infrastructure\"\n        assert mistral_model.cost_per_token == Decimal('0.0001')\n    \n    def test_mistral_routing_preference(self):\n        \"\"\"Test that routing prefers Mistral for infrastructure tasks.\"\"\"\n        from asoba_code.servers.ai_models.routing import ModelRouter\n        \n        router = ModelRouter()\n        \n        # Test infrastructure task routing\n        infra_task = {\n            \"type\": \"generate_code\",\n            \"complexity\": \"medium\",\n            \"language\": \"python\",\n            \"code_length\": 500\n        }\n        \n        selected = router.select_model(infra_task)\n        assert selected == \"mistral-7b-finetuned\", \"Should prefer Mistral for infrastructure tasks\"\n    \n    @patch('requests.post')\n    def test_mistral_completion_generation(self, mock_post):\n        \"\"\"Test Mistral completion generation.\"\"\"\n        from asoba_code.servers.ai_models.discovery import AIServerDiscovery, MistralClient, ServerInfo\n        \n        # Mock healthy server\n        mock_server = ServerInfo(\n            ip=\"54.197.142.172\",\n            port=8000,\n            status=\"healthy\",\n            last_ping=datetime.now(),\n            model_type=\"mistral-7b\",\n            region=\"us-east-1\"\n        )\n        \n        # Mock successful completion\n        mock_response = Mock()\n        mock_response.json.return_value = {\n            \"choices\": [{\"text\": \"print('Hello World')\"}]\n        }\n        mock_response.raise_for_status.return_value = None\n        mock_post.return_value = mock_response\n        \n        discovery = AIServerDiscovery()\n        client = MistralClient(discovery)\n        client.current_server = mock_server\n        \n        result = client.generate_completion(\"Generate hello world in Python\")\n        \n        assert \"choices\" in result\n        assert result[\"choices\"][0][\"text\"] == \"print('Hello World')\"\n    \n    def test_mistral_cost_estimation(self):\n        \"\"\"Test Mistral cost estimation.\"\"\"\n        from asoba_code.servers.ai_models.discovery import AIServerDiscovery, MistralClient\n        \n        discovery = AIServerDiscovery()\n        client = MistralClient(discovery)\n        \n        cost = client.estimate_cost(\"Generate hello world\", max_tokens=512)\n        \n        assert cost > 0, \"Should estimate positive cost\"\n        assert cost < Decimal('0.01'), \"Should be very cheap for small requests\"", "metadata": {"source": "asobacode-cli//home/shingai/sort/asoba-code/tests/unit/test_ai_models_server.py", "language": "python", "complexity": "complex", "pattern_type": "fastmcp_servers", "features": {"has_fastmcp": true, "has_rich_ui": false, "has_routing": true, "has_cost_tracking": true, "has_claude_md": true, "function_count": 47, "class_count": 10, "tool_count": 0}, "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.8375, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.7, "asobacode_compliance": 0.8999999999999999}}
{"domain": "asobacode_mcp_business_analysis", "category": "asobacode_mcp_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate multi-provider routing logic with cost optimization\n\n### EXPLORE Phase:\nAnalyze AsobaCode patterns and MCP requirements.\n\n### PLAN Phase:\nDesign implementation with FastMCP, Rich UI, and cost optimization.\n\n### CODE Phase:", "completion": "\"\"\"\nProvider manager for coordinating between different AI model providers.\nHandles provider selection, fallback logic, and unified interface.\n\"\"\"\n\nimport logging\nfrom typing import Any, Dict, List, Optional, Tuple\n\nfrom .base import BaseModelProvider\nfrom .bedrock import BedrockProvider\nfrom .mistral import MistralProvider\nfrom .custom import CustomProvider\n\nlogger = logging.getLogger(__name__)\n\n\nclass ProviderManager:\n    \"\"\"Manages multiple AI model providers with intelligent routing and fallback.\"\"\"\n    \n    def __init__(self, config: Dict[str, Any]):\n        \"\"\"Initialize provider manager with configuration.\"\"\"\n        self.config = config\n        self.ai_config = config.get(\"ai_models\", {})\n        self.providers: Dict[str, BaseModelProvider] = {}\n        \n        # Initialize providers based on configuration\n        self._initialize_providers()\n    \n    def _initialize_providers(self):\n        \"\"\"Initialize available providers based on configuration.\"\"\"\n        provider_configs = self.ai_config.get(\"providers\", {})\n        \n        # Initialize Bedrock provider (default enabled)\n        bedrock_config = provider_configs.get(\"bedrock\", {\"enabled\": True})\n        if bedrock_config.get(\"enabled\", True):\n            try:\n                self.providers[\"bedrock\"] = BedrockProvider(bedrock_config)\n                logger.info(\"Bedrock provider initialized\")\n            except Exception as e:\n                logger.warning(f\"Failed to initialize Bedrock provider: {e}\")\n        \n        # Initialize Mistral provider (default disabled)\n        mistral_config = provider_configs.get(\"mistral\", {\"enabled\": False})\n        if mistral_config.get(\"enabled\", False):\n            try:\n                self.providers[\"mistral\"] = MistralProvider(mistral_config)\n                logger.info(\"Mistral provider initialized\")\n            except Exception as e:\n                logger.warning(f\"Failed to initialize Mistral provider: {e}\")\n        \n        # Initialize Custom provider (default disabled)\n        custom_config = provider_configs.get(\"custom\", {\"enabled\": False})\n        if custom_config.get(\"enabled\", False):\n            try:\n                self.providers[\"custom\"] = CustomProvider(custom_config)\n                logger.info(\"Custom provider initialized\")\n            except Exception as e:\n                logger.warning(f\"Failed to initialize Custom provider: {e}\")\n    \n    def generate_code(\n        self, \n        provider: str, \n        description: str, \n        language: str = \"python\", \n        complexity: str = \"medium\",\n        **kwargs\n    ) -> Dict[str, Any]:\n        \"\"\"Generate code using a specific provider.\"\"\"\n        if provider not in self.providers:\n            raise ValueError(f\"Provider '{provider}' not available\")\n        \n        return self.providers[provider].generate_code(\n            description=description,\n            language=language,\n            complexity=complexity,\n            **kwargs\n        )\n    \n    def generate_code_with_fallback(\n        self, \n        description: str, \n        language: str = \"python\", \n        complexity: str = \"medium\",\n        **kwargs\n    ) -> Dict[str, Any]:\n        \"\"\"Generate code with intelligent provider selection and fallback.\"\"\"\n        # Select best provider for the task\n        task = {\n            \"language\": language,\n            \"complexity\": complexity,\n            \"description\": description\n        }\n        \n        providers_to_try = self._get_provider_fallback_sequence(task)\n        \n        last_error = None\n        for provider_name in providers_to_try:\n            if provider_name not in self.providers:\n                continue\n            \n            provider = self.providers[provider_name]\n            \n            # Check if provider is available\n            if not provider.is_available():\n                logger.warning(f\"Provider {provider_name} not available, trying next\")\n                continue\n            \n            try:\n                logger.info(f\"Attempting code generation with {provider_name}\")\n                result = provider.generate_code(\n                    description=description,\n                    language=language,\n                    complexity=complexity,\n                    **kwargs\n                )\n                \n                # Check if generation was successful\n                if \"error\" not in result and result.get(\"code\"):\n                    logger.info(f\"Code generated successfully with {provider_name}\")\n                    result[\"provider_used\"] = provider_name\n                    return result\n                else:\n                    raise Exception(result.get(\"error\", \"Generation failed\"))\n                    \n            except Exception as e:\n                logger.warning(f\"Provider {provider_name} failed: {e}\")\n                last_error = e\n                continue\n        \n        # All providers failed\n        error_msg = f\"All providers failed. Last error: {last_error}\"\n        logger.error(error_msg)\n        return {\n            \"error\": error_msg,\n            \"code\": f\"# All AI providers failed to generate {language} code\",\n            \"model_used\": \"no-provider-available\",\n            \"cost\": 0.0,\n            \"language\": language,\n            \"complexity\": complexity\n        }\n    \n    def select_provider_for_task(self, task: Dict[str, Any]) -> str:\n        \"\"\"Select the best provider for a given task.\"\"\"\n        language = task.get(\"language\", \"python\")\n        complexity = task.get(\"complexity\", \"medium\")\n        \n        # Get strategy from config\n        strategy = self.ai_config.get(\"fallback_strategy\", \"cost_optimized\")\n        \n        # Infrastructure tasks prefer Mistral (if available)\n        if self._is_infrastructure_task(language) and \"mistral\" in self.providers:\n            mistral_config = self.ai_config.get(\"providers\", {}).get(\"mistral\", {})\n            specialties = mistral_config.get(\"specialties\", [\"infrastructure\", \"yaml\", \"terraform\"])\n            \n            if language in specialties and self.providers[\"mistral\"].is_available():\n                return \"mistral\"\n        \n        # High complexity tasks prefer Bedrock (quality first)\n        if complexity == \"high\" and \"bedrock\" in self.providers:\n            if self.providers[\"bedrock\"].is_available():\n                return \"bedrock\"\n        \n        # Cost-optimized strategy\n        if strategy == \"cost_optimized\":\n            # Try Custom first (potentially cheapest)\n            if \"custom\" in self.providers and self.providers[\"custom\"].is_available():\n                return \"custom\"\n            # Try Mistral second (cheaper than Bedrock)\n            if \"mistral\" in self.providers and self.providers[\"mistral\"].is_available():\n                return \"mistral\"\n            # Fall back to Bedrock\n            if \"bedrock\" in self.providers and self.providers[\"bedrock\"].is_available():\n                return \"bedrock\"\n        \n        # Quality-first strategy\n        elif strategy == \"quality_first\":\n            # Try Bedrock first\n            if \"bedrock\" in self.providers and self.providers[\"bedrock\"].is_available():\n                return \"bedrock\"\n            # Fall back to Custom\n            if \"custom\" in self.providers and self.providers[\"custom\"].is_available():\n                return \"custom\"\n            # Fall back to Mistral\n            if \"mistral\" in self.providers and self.providers[\"mistral\"].is_available():\n                return \"mistral\"\n        \n        # Default fallback order\n        for provider in [\"bedrock\", \"custom\", \"mistral\"]:\n            if provider in self.providers:\n                return provider\n        return \"bedrock\"  # Ultimate fallback\n    \n    def _get_provider_fallback_sequence(self, task: Dict[str, Any]) -> List[str]:\n        \"\"\"Get the sequence of providers to try for a task.\"\"\"\n        primary = self.select_provider_for_task(task)\n        \n        # Build fallback sequence\n        sequence = [primary]\n        \n        # Add other available providers\n        for provider_name in [\"custom\", \"mistral\", \"bedrock\"]:\n            if provider_name != primary and provider_name in self.providers:\n                sequence.append(provider_name)\n        \n        return sequence\n    \n    def _is_infrastructure_task(self, language: str) -> bool:\n        \"\"\"Check if this is an infrastructure-related task.\"\"\"\n        infrastructure_languages = [\n            \"terraform\", \"yaml\", \"yml\", \"kubernetes\", \"k8s\", \n            \"docker\", \"dockerfile\", \"ansible\", \"cloudformation\"\n        ]\n        return language.lower() in infrastructure_languages\n    \n    def get_provider_status(self) -> Dict[str, Any]:\n        \"\"\"Get status of all providers.\"\"\"\n        status = {}\n        \n        for name, provider in self.providers.items():\n            try:\n                is_available = provider.is_available()\n                status[name] = {\n                    \"available\": is_available,\n                    \"type\": type(provider).__name__,\n                    \"config\": self.ai_config.get(\"providers\", {}).get(name, {})\n                }\n            except Exception as e:\n                status[name] = {\n                    \"available\": False,\n                    \"error\": str(e),\n                    \"type\": type(provider).__name__\n                }\n        \n        return {\n            \"providers\": status,\n            \"default_strategy\": self.ai_config.get(\"fallback_strategy\", \"cost_optimized\"),\n            \"total_providers\": len(self.providers),\n            \"available_providers\": len([p for p in status.values() if p.get(\"available\", False)])\n        }", "metadata": {"source": "asobacode-cli//home/shingai/sort/asoba-code/src/asoba_code/servers/ai_models/providers/manager.py", "language": "python", "complexity": "complex", "pattern_type": "routing_logic", "features": {"has_fastmcp": false, "has_rich_ui": false, "has_routing": true, "has_cost_tracking": true, "has_claude_md": false, "function_count": 8, "class_count": 1, "tool_count": 0}, "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.7949999999999999, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.65, "asobacode_compliance": 0.7}}
{"domain": "asobacode_mcp_business_analysis", "category": "asobacode_mcp_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate multi-provider routing logic with cost optimization\n\n### EXPLORE Phase:\nAnalyze AsobaCode patterns and MCP requirements.\n\n### PLAN Phase:\nDesign implementation with FastMCP, Rich UI, and cost optimization.\n\n### CODE Phase:", "completion": "\"\"\"\nCustom Mistral provider implementation.\nWraps the existing MistralClient with the standardized provider interface.\n\"\"\"\n\nfrom decimal import Decimal\nfrom typing import Any, Dict\n\nfrom .base import BaseModelProvider\nfrom ..discovery import AIServerDiscovery, MistralClient\n\n\nclass MistralProvider(BaseModelProvider):\n    \"\"\"Provider for custom fine-tuned Mistral 7B models.\"\"\"\n    \n    def __init__(self, config: Dict[str, Any] = None):\n        \"\"\"Initialize Mistral provider with configuration.\"\"\"\n        self.config = config or {}\n        mistral_config = self.config.get(\"mistral\", {})\n        \n        # Initialize server discovery\n        self._discovery = AIServerDiscovery()\n        \n        # Override URLs from config if provided\n        if \"discovery_url\" in mistral_config:\n            self._discovery.status_url = mistral_config[\"discovery_url\"]\n        if \"fallback_ip\" in mistral_config:\n            self._discovery.fallback_ip = mistral_config[\"fallback_ip\"]\n        \n        # Initialize Mistral client\n        self._mistral_client = MistralClient(self._discovery)\n    \n    def generate_code(\n        self, \n        description: str, \n        language: str = \"python\", \n        complexity: str = \"medium\", \n        **kwargs\n    ) -> Dict[str, Any]:\n        \"\"\"Generate code using custom Mistral 7B model.\"\"\"\n        try:\n            # Prepare prompt for Mistral\n            if complexity == \"low\":\n                prompt = f\"Write simple {language} code to {description}. Keep it basic and well-commented.\"\n            elif complexity == \"high\":\n                prompt = f\"Write sophisticated {language} code to {description}. Include error handling, documentation, and follow best practices.\"\n            else:\n                prompt = f\"Write {language} code to {description}. Include comments and basic error handling.\"\n            \n            # Use existing MistralClient\n            max_tokens = kwargs.get(\"max_tokens\", 512)\n            temperature = kwargs.get(\"temperature\", 0.7)\n            \n            result = self._mistral_client.generate_completion(\n                prompt=prompt,\n                max_tokens=max_tokens,\n                temperature=temperature\n            )\n            \n            # Convert Mistral response format to standardized format\n            if \"choices\" in result and len(result[\"choices\"]) > 0:\n                generated_code = result[\"choices\"][0][\"text\"]\n            else:\n                raise Exception(\"No code generated by Mistral\")\n            \n            # Calculate cost using Mistral's cost estimation\n            cost = self._mistral_client.estimate_cost(prompt, max_tokens)\n            \n            # Return in standardized format\n            return {\n                \"code\": generated_code,\n                \"model_used\": \"mistral-7b-finetuned\",\n                \"cost\": float(cost),\n                \"language\": language,\n                \"complexity\": complexity,\n                \"provider\": \"mistral\",\n                \"server_info\": result.get(\"server_info\", {}),\n                \"usage\": result.get(\"usage\", {})\n            }\n            \n        except Exception as e:\n            # Return error in consistent format\n            return {\n                \"error\": str(e),\n                \"code\": f\"# Error generating {language} code with Mistral: {e}\",\n                \"model_used\": \"mistral-error\",\n                \"cost\": 0.0,\n                \"language\": language,\n                \"complexity\": complexity,\n                \"provider\": \"mistral\"\n            }\n    \n    def is_available(self) -> bool:\n        \"\"\"Check if custom Mistral servers are available.\"\"\"\n        try:\n            # Check if we can find a healthy server\n            healthy_server = self._discovery.get_healthy_server()\n            return healthy_server is not None\n        except Exception:\n            return False\n    \n    def estimate_cost(self, description: str, **kwargs) -> Decimal:\n        \"\"\"Estimate cost for Mistral generation (much cheaper than Bedrock).\"\"\"\n        max_tokens = kwargs.get(\"max_tokens\", 512)\n        return self._mistral_client.estimate_cost(description, max_tokens)", "metadata": {"source": "asobacode-cli//home/shingai/sort/asoba-code/src/asoba_code/servers/ai_models/providers/mistral.py", "language": "python", "complexity": "medium", "pattern_type": "routing_logic", "features": {"has_fastmcp": false, "has_rich_ui": false, "has_routing": true, "has_cost_tracking": true, "has_claude_md": false, "function_count": 4, "class_count": 1, "tool_count": 0}, "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.79125, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.6, "asobacode_compliance": 0.7}}
{"domain": "asobacode_mcp_business_analysis", "category": "asobacode_mcp_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate multi-provider routing logic with cost optimization\n\n### EXPLORE Phase:\nAnalyze AsobaCode patterns and MCP requirements.\n\n### PLAN Phase:\nDesign implementation with FastMCP, Rich UI, and cost optimization.\n\n### CODE Phase:", "completion": "\"\"\"\nBase abstract interface for AI model providers.\nDefines the contract that all providers must implement.\n\"\"\"\n\nfrom abc import ABC, abstractmethod\nfrom decimal import Decimal\nfrom typing import Any, Dict\n\n\nclass BaseModelProvider(ABC):\n    \"\"\"Abstract base class for AI model providers.\"\"\"\n    \n    @abstractmethod\n    def generate_code(\n        self, \n        description: str, \n        language: str = \"python\", \n        complexity: str = \"medium\", \n        **kwargs\n    ) -> Dict[str, Any]:\n        \"\"\"\n        Generate code based on description and parameters.\n        \n        Args:\n            description: Natural language description of what to generate\n            language: Programming language (python, javascript, rust, etc.)\n            complexity: Complexity level (low, medium, high)\n            **kwargs: Additional provider-specific parameters\n        \n        Returns:\n            Dict containing:\n                - code: Generated code string\n                - model_used: Model identifier that was used\n                - cost: Estimated cost as float\n                - language: Language that was used\n                - complexity: Complexity level that was used\n        \"\"\"\n        pass\n    \n    @abstractmethod\n    def is_available(self) -> bool:\n        \"\"\"\n        Check if this provider is currently available.\n        \n        Returns:\n            True if provider can handle requests, False otherwise\n        \"\"\"\n        pass\n    \n    @abstractmethod\n    def estimate_cost(self, description: str, **kwargs) -> Decimal:\n        \"\"\"\n        Estimate the cost for a generation request.\n        \n        Args:\n            description: The description to generate code for\n            **kwargs: Additional parameters that affect cost\n            \n        Returns:\n            Estimated cost as Decimal\n        \"\"\"\n        pass", "metadata": {"source": "asobacode-cli//home/shingai/sort/asoba-code/src/asoba_code/servers/ai_models/providers/base.py", "language": "python", "complexity": "medium", "pattern_type": "routing_logic", "features": {"has_fastmcp": false, "has_rich_ui": false, "has_routing": true, "has_cost_tracking": true, "has_claude_md": false, "function_count": 3, "class_count": 2, "tool_count": 0}, "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.7825, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.55, "asobacode_compliance": 0.7}}
{"domain": "asobacode_mcp_business_analysis", "category": "asobacode_mcp_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate multi-provider routing logic with cost optimization\n\n### EXPLORE Phase:\nAnalyze AsobaCode patterns and MCP requirements.\n\n### PLAN Phase:\nDesign implementation with FastMCP, Rich UI, and cost optimization.\n\n### CODE Phase:", "completion": "\"\"\"\nAWS Bedrock provider implementation.\nWraps the existing BedrockClient with the standardized provider interface.\n\"\"\"\n\nfrom decimal import Decimal\nfrom typing import Any, Dict\n\nfrom .base import BaseModelProvider\nfrom ..bedrock import BedrockClient\n\n\nclass BedrockProvider(BaseModelProvider):\n    \"\"\"Provider for AWS Bedrock models.\"\"\"\n    \n    def __init__(self, config: Dict[str, Any] = None):\n        \"\"\"Initialize Bedrock provider with configuration.\"\"\"\n        self.config = config or {}\n        region = self.config.get(\"region\", \"us-east-1\")\n        \n        # Extract default model from config\n        self.default_model = self.config.get(\"default_model\", \"anthropic.claude-3-5-sonnet-20240620-v1:0\")\n        self.preferred_models = self.config.get(\"preferred_models\", [self.default_model])\n        skip_discovery = self.config.get(\"skip_model_discovery\", True)\n        \n        # Initialize the underlying Bedrock client\n        self._bedrock_client = BedrockClient(region=region, skip_discovery=skip_discovery)\n    \n    def generate_code(\n        self, \n        description: str, \n        language: str = \"python\", \n        complexity: str = \"medium\", \n        **kwargs\n    ) -> Dict[str, Any]:\n        \"\"\"Generate code using AWS Bedrock models.\"\"\"\n        try:\n            # Use configured default model if none specified\n            model_id = kwargs.get(\"model_id\") or self.default_model\n            result = self._bedrock_client.generate_code(\n                description=description,\n                language=language,\n                complexity=complexity,\n                model_id=model_id\n            )\n            \n            # Ensure consistent interface\n            if \"error\" in result:\n                raise Exception(result[\"error\"])\n            \n            return result\n            \n        except Exception as e:\n            # Return error in consistent format\n            return {\n                \"error\": str(e),\n                \"code\": f\"# Error generating {language} code: {e}\",\n                \"model_used\": \"bedrock-error\",\n                \"cost\": 0.0,\n                \"language\": language,\n                \"complexity\": complexity\n            }\n    \n    def is_available(self) -> bool:\n        \"\"\"Check if AWS Bedrock is available.\"\"\"\n        try:\n            # If skip_discovery is enabled, just test the default model\n            if self._bedrock_client.skip_discovery:\n                return self._bedrock_client.test_model_availability(self.default_model)\n            else:\n                # Try to find a working model - this tests AWS credentials and Bedrock access\n                working_model = self._bedrock_client.find_working_model()\n                return working_model is not None and working_model != \"anthropic.claude-3-haiku-20240307-v1:0\"  # Not just fallback\n        except Exception:\n            return False\n    \n    def estimate_cost(self, description: str, **kwargs) -> Decimal:\n        \"\"\"Estimate cost for Bedrock generation.\"\"\"\n        # Use the existing cost estimation from BedrockClient\n        language = kwargs.get(\"language\", \"python\")\n        complexity = kwargs.get(\"complexity\", \"medium\")\n        \n        # Rough token estimation\n        input_tokens = len(description.split()) * 1.3\n        \n        if complexity == \"low\":\n            estimated_output_tokens = 200\n        elif complexity == \"high\":\n            estimated_output_tokens = 800\n        else:\n            estimated_output_tokens = 400\n        \n        # Use default Claude 3.5 Sonnet pricing\n        model_id = \"anthropic.claude-3-5-sonnet-20240620-v1:0\"\n        return self._bedrock_client._estimate_cost(model_id, input_tokens, estimated_output_tokens)", "metadata": {"source": "asobacode-cli//home/shingai/sort/asoba-code/src/asoba_code/servers/ai_models/providers/bedrock.py", "language": "python", "complexity": "medium", "pattern_type": "routing_logic", "features": {"has_fastmcp": false, "has_rich_ui": false, "has_routing": true, "has_cost_tracking": true, "has_claude_md": true, "function_count": 4, "class_count": 1, "tool_count": 0}, "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.78625, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.6, "asobacode_compliance": 0.7}}
{"domain": "asobacode_mcp_business_analysis", "category": "asobacode_mcp_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate multi-provider routing logic with cost optimization\n\n### EXPLORE Phase:\nAnalyze AsobaCode patterns and MCP requirements.\n\n### PLAN Phase:\nDesign implementation with FastMCP, Rich UI, and cost optimization.\n\n### CODE Phase:", "completion": "\"\"\"\nCustom model provider implementation.\nAllows users to configure their own model endpoints and integrate them with AsobaCode.\n\"\"\"\n\nimport json\nimport logging\nfrom decimal import Decimal\nfrom typing import Any, Dict\n\nimport requests\n\nfrom .base import BaseModelProvider\n\nlogger = logging.getLogger(__name__)\n\n\nclass CustomProvider(BaseModelProvider):\n    \"\"\"Provider for custom user-configured models.\"\"\"\n    \n    def __init__(self, config: Dict[str, Any] = None):\n        \"\"\"Initialize Custom provider with configuration.\"\"\"\n        self.config = config or {}\n        self.endpoint_url = self.config.get(\"endpoint_url\", \"\")\n        self.api_key = self.config.get(\"api_key\", \"\")\n        self.default_model = self.config.get(\"default_model\", \"custom-model\")\n        self.models = self.config.get(\"models\", [])\n        self.timeout = self.config.get(\"timeout\", 30)\n        \n        # Validate configuration\n        if not self.endpoint_url:\n            logger.warning(\"Custom provider enabled but no endpoint_url configured\")\n    \n    def generate_code(\n        self, \n        description: str, \n        language: str = \"python\", \n        complexity: str = \"medium\", \n        **kwargs\n    ) -> Dict[str, Any]:\n        \"\"\"Generate code using custom model endpoint.\"\"\"\n        try:\n            if not self.endpoint_url:\n                raise Exception(\"No endpoint URL configured for custom provider\")\n            \n            # Use specified model or default\n            model_id = kwargs.get(\"model_id\") or self.default_model\n            \n            # Construct prompt based on complexity\n            if complexity == \"low\":\n                prompt = f\"Write simple {language} code to {description}. Keep it basic and well-commented.\"\n            elif complexity == \"high\":\n                prompt = f\"Write sophisticated {language} code to {description}. Include error handling, documentation, and follow best practices.\"\n            else:\n                prompt = f\"Write {language} code to {description}. Include comments and basic error handling.\"\n            \n            # Prepare request (OpenAI-compatible format)\n            headers = {\"Content-Type\": \"application/json\"}\n            if self.api_key:\n                headers[\"Authorization\"] = f\"Bearer {self.api_key}\"\n            \n            request_body = {\n                \"model\": model_id,\n                \"messages\": [\n                    {\n                        \"role\": \"user\",\n                        \"content\": prompt\n                    }\n                ],\n                \"max_tokens\": 2048,\n                \"temperature\": 0.3,\n                \"stream\": False\n            }\n            \n            # Make request to custom endpoint\n            response = requests.post(\n                self.endpoint_url,\n                headers=headers,\n                json=request_body,\n                timeout=self.timeout\n            )\n            response.raise_for_status()\n            \n            # Parse response (OpenAI format)\n            response_data = response.json()\n            if \"choices\" in response_data and len(response_data[\"choices\"]) > 0:\n                generated_code = response_data[\"choices\"][0][\"message\"][\"content\"]\n            else:\n                raise Exception(\"Invalid response format from custom endpoint\")\n            \n            # Calculate estimated cost\n            cost = self._estimate_cost(prompt, generated_code)\n            \n            return {\n                \"code\": generated_code,\n                \"model_used\": model_id,\n                \"cost\": float(cost),\n                \"language\": language,\n                \"complexity\": complexity,\n                \"provider\": \"custom\"\n            }\n            \n        except Exception as e:\n            # Return error in consistent format\n            return {\n                \"error\": str(e),\n                \"code\": f\"# Error generating {language} code: {e}\",\n                \"model_used\": \"custom-error\",\n                \"cost\": 0.0,\n                \"language\": language,\n                \"complexity\": complexity,\n                \"provider\": \"custom\"\n            }\n    \n    def is_available(self) -> bool:\n        \"\"\"Check if custom model endpoint is available.\"\"\"\n        try:\n            if not self.endpoint_url:\n                return False\n            \n            # Try a health check or minimal request\n            headers = {\"Content-Type\": \"application/json\"}\n            if self.api_key:\n                headers[\"Authorization\"] = f\"Bearer {self.api_key}\"\n            \n            # Simple test request\n            test_body = {\n                \"model\": self.default_model,\n                \"messages\": [{\"role\": \"user\", \"content\": \"test\"}],\n                \"max_tokens\": 5,\n                \"temperature\": 0.1\n            }\n            \n            response = requests.post(\n                self.endpoint_url,\n                headers=headers,\n                json=test_body,\n                timeout=10\n            )\n            \n            return response.status_code == 200\n            \n        except Exception as e:\n            logger.warning(f\"Custom provider not available: {e}\")\n            return False\n    \n    def estimate_cost(self, description: str, **kwargs) -> Decimal:\n        \"\"\"Estimate cost for custom model generation.\"\"\"\n        # Simple token-based estimation\n        input_tokens = len(description.split()) * 1.3\n        complexity = kwargs.get(\"complexity\", \"medium\")\n        \n        if complexity == \"low\":\n            estimated_output_tokens = 200\n        elif complexity == \"high\":\n            estimated_output_tokens = 800\n        else:\n            estimated_output_tokens = 400\n        \n        return self._estimate_cost(description, \"x\" * int(estimated_output_tokens))\n    \n    def _estimate_cost(self, input_text: str, output_text: str) -> Decimal:\n        \"\"\"Estimate cost based on configured cost multiplier.\"\"\"\n        # Simple estimation based on character count\n        input_chars = len(input_text)\n        output_chars = len(output_text)\n        \n        # Base cost estimation (adjust as needed)\n        cost_multiplier = self.config.get(\"cost_multiplier\", 0.01)\n        base_cost = (input_chars + output_chars) * 0.000001  # Very rough estimation\n        \n        return Decimal(str(base_cost * cost_multiplier))", "metadata": {"source": "asobacode-cli//home/shingai/sort/asoba-code/src/asoba_code/servers/ai_models/providers/custom.py", "language": "python", "complexity": "medium", "pattern_type": "routing_logic", "features": {"has_fastmcp": false, "has_rich_ui": false, "has_routing": true, "has_cost_tracking": true, "has_claude_md": false, "function_count": 5, "class_count": 1, "tool_count": 0}, "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.7949999999999999, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.65, "asobacode_compliance": 0.7}}
{"domain": "asobacode_mcp_business_analysis", "category": "asobacode_mcp_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate Rich terminal UI with AsobaCode conversation patterns\n\n### EXPLORE Phase:\nAnalyze AsobaCode patterns and MCP requirements.\n\n### PLAN Phase:\nDesign implementation with FastMCP, Rich UI, and cost optimization.\n\n### CODE Phase:", "completion": "\"\"\"\nAnimation framework for AsobaCode terminal interface.\n\nProvides context managers for showing thinking animations and token tracking\nduring LLM processing operations.\n\"\"\"\n\nimport time\nimport threading\nfrom typing import Any, Dict, Optional, Union\nfrom contextlib import contextmanager\n\nfrom rich.console import Console\nfrom rich.live import Live\nfrom rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn, TaskID\nfrom rich.text import Text\nfrom rich.panel import Panel\nfrom rich.align import Align\n\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n\nclass TokenTracker:\n    \"\"\"Real-time token usage tracking for LLM operations.\"\"\"\n    \n    def __init__(self):\n        \"\"\"Initialize token tracker.\"\"\"\n        self.input_tokens = 0\n        self.output_tokens = 0\n        self.total_tokens = 0\n        self.cost = 0.0\n        self.start_time = time.time()\n        self.provider = \"unknown\"\n        self.model = \"unknown\"\n        \n    def start_tracking(self, provider: str = \"unknown\", model: str = \"unknown\") -> None:\n        \"\"\"Start tracking for a specific provider and model.\"\"\"\n        self.provider = provider\n        self.model = model\n        self.start_time = time.time()\n        \n    def update_usage(self, usage_data: Dict[str, Any]) -> None:\n        \"\"\"\n        Update token usage with data from provider response.\n        \n        Args:\n            usage_data: Dictionary containing token usage information\n        \"\"\"\n        if \"input_tokens\" in usage_data:\n            self.input_tokens = usage_data[\"input_tokens\"]\n        if \"output_tokens\" in usage_data:\n            self.output_tokens = usage_data[\"output_tokens\"]\n        if \"total_tokens\" in usage_data:\n            self.total_tokens = usage_data[\"total_tokens\"]\n        else:\n            self.total_tokens = self.input_tokens + self.output_tokens\n        if \"cost\" in usage_data:\n            self.cost = usage_data[\"cost\"]\n            \n    def get_current_usage(self) -> Dict[str, Any]:\n        \"\"\"Get current usage statistics.\"\"\"\n        return {\n            \"input_tokens\": self.input_tokens,\n            \"output_tokens\": self.output_tokens,\n            \"total_tokens\": self.total_tokens,\n            \"cost\": self.cost,\n            \"elapsed_time\": time.time() - self.start_time,\n            \"provider\": self.provider,\n            \"model\": self.model\n        }\n        \n    def finalize(self) -> Dict[str, Any]:\n        \"\"\"Finalize tracking and return complete usage data.\"\"\"\n        final_stats = self.get_current_usage()\n        final_stats[\"final\"] = True\n        return final_stats\n\n\nclass ThinkingAnimation:\n    \"\"\"\n    Context manager for brain thinking animations during LLM processing.\n    \n    Shows a brain icon with spinning animation and real-time token usage updates.\n    \"\"\"\n    \n    def __init__(\n        self, \n        message: str, \n        show_tokens: bool = True,\n        console: Optional[Console] = None,\n        fallback_to_static: bool = True\n    ):\n        \"\"\"\n        Initialize thinking animation.\n        \n        Args:\n            message: Message to display with the animation\n            show_tokens: Whether to show token usage information\n            console: Rich console instance (creates new if None)\n            fallback_to_static: Whether to fall back to static text if animations fail\n        \"\"\"\n        self.message = message\n        self.show_tokens = show_tokens\n        self.console = console or Console()\n        self.fallback_to_static = fallback_to_static\n        \n        # Animation state\n        self._live: Optional[Live] = None\n        self._progress: Optional[Progress] = None\n        self._task_id: Optional[TaskID] = None\n        self._token_tracker: Optional[TokenTracker] = None\n        self._running = False\n        self._animation_thread: Optional[threading.Thread] = None\n        \n        # Brain thinking states for animation\n        self._brain_states = [\"🧠\", \"🧠 \", \"🧠  \", \"🧠   \"]\n        self._current_state = 0\n        \n    def __enter__(self) -> 'ThinkingAnimation':\n        \"\"\"Start the thinking animation.\"\"\"\n        try:\n            self._start_animation()\n        except Exception as e:\n            logger.warning(f\"Failed to start animation: {e}\")\n            if self.fallback_to_static:\n                self.console.print(f\"🧠 {self.message}\", style=\"cyan\")\n            else:\n                raise\n        return self\n        \n    def __exit__(self, exc_type, exc_val, exc_tb) -> None:\n        \"\"\"Stop the thinking animation.\"\"\"\n        try:\n            self._stop_animation()\n        except Exception as e:\n            logger.warning(f\"Failed to stop animation cleanly: {e}\")\n            \n    def _start_animation(self) -> None:\n        \"\"\"Start the Rich Live animation.\"\"\"\n        if not self.console.is_terminal or not self.console.legacy_windows:\n            # Use simple progress for non-interactive terminals\n            self._progress = Progress(\n                SpinnerColumn(\"dots\"),\n                TextColumn(\"🧠 {task.description}\"),\n                console=self.console,\n                transient=True\n            )\n            self._live = Live(self._progress, console=self.console, refresh_per_second=4)\n            self._live.start()\n            self._task_id = self._progress.add_task(self.message, total=None)\n        else:\n            # Use custom brain animation for interactive terminals\n            self._running = True\n            self._live = Live(self._get_animation_renderable(), console=self.console, refresh_per_second=2)\n            self._live.start()\n            \n            # Start animation update thread\n            self._animation_thread = threading.Thread(target=self._animate_brain, daemon=True)\n            self._animation_thread.start()\n            \n    def _stop_animation(self) -> None:\n        \"\"\"Stop the animation and clean up.\"\"\"\n        self._running = False\n        \n        if self._animation_thread and self._animation_thread.is_alive():\n            self._animation_thread.join(timeout=1.0)\n            \n        if self._live:\n            self._live.stop()\n            \n        # Show final message\n        if self._token_tracker:\n            final_stats = self._token_tracker.get_current_usage()\n            self._show_completion_message(final_stats)\n        else:\n            self.console.print(f\"✅ {self.message} - Complete\", style=\"green\")\n            \n    def _get_animation_renderable(self):\n        \"\"\"Get the current animation renderable.\"\"\"\n        brain_icon = self._brain_states[self._current_state % len(self._brain_states)]\n        \n        # Build status text\n        status_lines = [f\"{brain_icon} {self.message}\"]\n        \n        if self.show_tokens and self._token_tracker:\n            usage = self._token_tracker.get_current_usage()\n            if usage[\"total_tokens\"] > 0:\n                status_lines.append(\n                    f\"   Input: {usage['input_tokens']} tokens | \"\n                    f\"Output: {usage['output_tokens']} tokens | \"\n                    f\"Cost: ${usage['cost']:.4f}\"\n                )\n            \n        status_text = Text(\"\\n\".join(status_lines), style=\"cyan\")\n        return Align.left(status_text)\n        \n    def _animate_brain(self) -> None:\n        \"\"\"Animation thread function.\"\"\"\n        while self._running:\n            try:\n                self._current_state += 1\n                if self._live:\n                    self._live.update(self._get_animation_renderable())\n                time.sleep(0.5)  # Update every 500ms\n            except Exception as e:\n                logger.debug(f\"Animation update error: {e}\")\n                break\n                \n    def update_message(self, message: str) -> None:\n        \"\"\"\n        Update the animation message.\n        \n        Args:\n            message: New message to display\n        \"\"\"\n        self.message = message\n        try:\n            if self._progress and self._task_id is not None:\n                self._progress.update(self._task_id, description=message)\n            elif self._live and self._running:\n                self._live.update(self._get_animation_renderable())\n        except Exception as e:\n            logger.debug(f\"Failed to update message: {e}\")\n            \n    def update_tokens(\n        self, \n        input_tokens: int = 0, \n        output_tokens: int = 0, \n        cost: float = 0.0,\n        **kwargs\n    ) -> None:\n        \"\"\"\n        Update token usage information.\n        \n        Args:\n            input_tokens: Number of input tokens used\n            output_tokens: Number of output tokens generated\n            cost: Current cost estimate\n            **kwargs: Additional usage data\n        \"\"\"\n        if not self.show_tokens:\n            return\n            \n        if not self._token_tracker:\n            self._token_tracker = TokenTracker()\n            \n        usage_data = {\n            \"input_tokens\": input_tokens,\n            \"output_tokens\": output_tokens,\n            \"cost\": cost,\n            **kwargs\n        }\n        \n        self._token_tracker.update_usage(usage_data)\n        \n        # Update display if animation is running\n        try:\n            if self._live and self._running:\n                self._live.update(self._get_animation_renderable())\n        except Exception as e:\n            logger.debug(f\"Failed to update token display: {e}\")\n            \n    def _show_completion_message(self, final_stats: Dict[str, Any]) -> None:\n        \"\"\"Show completion message with final statistics.\"\"\"\n        elapsed = final_stats.get(\"elapsed_time\", 0)\n        \n        completion_text = f\"✅ {self.message} - Complete ({elapsed:.1f}s)\"\n        \n        if self.show_tokens and final_stats.get(\"total_tokens\", 0) > 0:\n            stats_text = (\n                f\"   📊 {final_stats['input_tokens']} input + \"\n                f\"{final_stats['output_tokens']} output = \"\n                f\"{final_stats['total_tokens']} total tokens | \"\n                f\"💰 ${final_stats['cost']:.4f}\"\n            )\n            \n            if final_stats.get(\"provider\") != \"unknown\":\n                stats_text += f\" | 🤖 {final_stats['provider']}\"\n                \n            self.console.print(completion_text, style=\"green\")\n            self.console.print(stats_text, style=\"dim\")\n        else:\n            self.console.print(completion_text, style=\"green\")\n\n    def set_token_tracker(self, tracker: TokenTracker) -> None:\n        \"\"\"\n        Set an external token tracker.\n        \n        Args:\n            tracker: TokenTracker instance to use\n        \"\"\"\n        self._token_tracker = tracker\n\n\n@contextmanager\ndef thinking_animation(\n    message: str, \n    show_tokens: bool = True,\n    console: Optional[Console] = None\n):\n    \"\"\"\n    Context manager for thinking animations.\n    \n    Args:\n        message: Message to display with animation\n        show_tokens: Whether to show token usage\n        console: Rich console instance\n        \n    Yields:\n        ThinkingAnimation instance for updates\n        \n    Example:\n        with thinking_animation(\"Generating code...\") as anim:\n            # LLM processing happens here\n            anim.update_tokens(input_tokens=100, output_tokens=500, cost=0.025)\n            result = some_llm_call()\n    \"\"\"\n    animation = ThinkingAnimation(message, show_tokens, console)\n    with animation:\n        yield animation\n\n\nclass SimpleProgressIndicator:\n    \"\"\"\n    Simple fallback progress indicator for environments that don't support Rich animations.\n    \"\"\"\n    \n    def __init__(self, message: str, console: Optional[Console] = None):\n        \"\"\"Initialize simple progress indicator.\"\"\"\n        self.message = message\n        self.console = console or Console()\n        self._shown = False\n        \n    def __enter__(self) -> 'SimpleProgressIndicator':\n        \"\"\"Show initial message.\"\"\"\n        self.console.print(f\"🧠 {self.message}...\", style=\"cyan\")\n        self._shown = True\n        return self\n        \n    def __exit__(self, exc_type, exc_val, exc_tb) -> None:\n        \"\"\"Show completion message.\"\"\"\n        if self._shown:\n            self.console.print(f\"✅ {self.message} - Complete\", style=\"green\")\n            \n    def update_message(self, message: str) -> None:\n        \"\"\"Update message (no-op for simple indicator).\"\"\"\n        pass\n        \n    def update_tokens(self, **kwargs) -> None:\n        \"\"\"Update tokens (no-op for simple indicator).\"\"\"\n        pass\n\n\ndef create_thinking_animation(\n    message: str,\n    show_tokens: bool = True,\n    console: Optional[Console] = None,\n    force_simple: bool = False\n) -> Union[ThinkingAnimation, SimpleProgressIndicator]:\n    \"\"\"\n    Factory function to create appropriate animation based on terminal capabilities.\n    \n    Args:\n        message: Message to display\n        show_tokens: Whether to show token usage\n        console: Rich console instance\n        force_simple: Force simple indicator even if Rich is available\n        \n    Returns:\n        Animation instance (either ThinkingAnimation or SimpleProgressIndicator)\n    \"\"\"\n    console = console or Console()\n    \n    if force_simple or not console.is_terminal:\n        return SimpleProgressIndicator(message, console)\n    else:\n        return ThinkingAnimation(message, show_tokens, console)", "metadata": {"source": "asobacode-cli//home/shingai/sort/asoba-code/src/asoba_code/ui/animations.py", "language": "python", "complexity": "complex", "pattern_type": "terminal_ui", "features": {"has_fastmcp": false, "has_rich_ui": true, "has_routing": true, "has_cost_tracking": true, "has_claude_md": false, "function_count": 23, "class_count": 3, "tool_count": 0}, "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.78, "syntax_valid": true, "completeness_score": 0.35, "authenticity_score": 0.55, "asobacode_compliance": 0.7999999999999999}}
{"domain": "asobacode_mcp_business_analysis", "category": "asobacode_mcp_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate Rich terminal UI with AsobaCode conversation patterns with Rich formatting\n\n### EXPLORE Phase:\nAnalyze AsobaCode patterns and MCP requirements.\n\n### PLAN Phase:\nDesign implementation with FastMCP, Rich UI, and cost optimization.\n\n### CODE Phase:", "completion": "\"\"\"\nInteractive configuration UI for AsobaCode.\n\nProvides Rich-based interactive interfaces for managing custom AI models\nand other configuration options without manual YAML editing.\n\"\"\"\n\nimport logging\nfrom typing import Any, Dict, List, Optional, Tuple\n\nimport typer\nfrom rich.console import Console\nfrom rich.panel import Panel\nfrom rich.table import Table\nfrom rich.text import Text\nfrom rich.prompt import Prompt, Confirm\nfrom rich.progress import Progress, SpinnerColumn, TextColumn\n\nfrom ..config.writer import ConfigWriter\nfrom ..config.loader import ConfigLoader\n\nlogger = logging.getLogger(__name__)\n\n\nclass ModelConfigurationUI:\n    \"\"\"Rich-based interactive UI for model configuration management.\"\"\"\n    \n    def __init__(self, config_writer: ConfigWriter, console: Optional[Console] = None):\n        \"\"\"\n        Initialize model configuration UI.\n        \n        Args:\n            config_writer: ConfigWriter instance for persistence\n            console: Rich console instance (creates new if None)\n        \"\"\"\n        self.config_writer = config_writer\n        self.console = console or Console()\n        \n    def show_main_menu(self) -> None:\n        \"\"\"Show the main configuration management menu.\"\"\"\n        self.console.print(\n            Panel.fit(\n                \"[bold cyan]AsobaCode Configuration Manager[/bold cyan]\\n\"\n                \"Manage your custom AI models and settings\",\n                border_style=\"cyan\"\n            )\n        )\n        \n        while True:\n            self.console.print(\"\\n[bold]Available Options:[/bold]\")\n            self.console.print(\"  [cyan]1.[/cyan] View current models\")\n            self.console.print(\"  [cyan]2.[/cyan] Add new custom model\")\n            self.console.print(\"  [cyan]3.[/cyan] Edit existing model\")\n            self.console.print(\"  [cyan]4.[/cyan] Remove model\")\n            self.console.print(\"  [cyan]5.[/cyan] Test model connection\")\n            self.console.print(\"  [cyan]6.[/cyan] Backup/Restore configuration\")\n            self.console.print(\"  [cyan]0.[/cyan] Exit\")\n            \n            choice = Prompt.ask(\n                \"\\n[bold]Select option[/bold]\",\n                choices=[\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\"],\n                default=\"0\"\n            )\n            \n            try:\n                if choice == \"0\":\n                    self.console.print(\"\\n👋 Configuration manager closed.\", style=\"green\")\n                    break\n                elif choice == \"1\":\n                    self.display_model_list()\n                elif choice == \"2\":\n                    self.add_model_wizard()\n                elif choice == \"3\":\n                    self.edit_model_wizard()\n                elif choice == \"4\":\n                    self.remove_model_wizard()\n                elif choice == \"5\":\n                    self.test_model_wizard()\n                elif choice == \"6\":\n                    self.backup_restore_wizard()\n                    \n            except KeyboardInterrupt:\n                self.console.print(\"\\n\\n👋 Configuration manager interrupted.\", style=\"yellow\")\n                break\n            except Exception as e:\n                self.console.print(f\"\\n❌ Error: {e}\", style=\"red\")\n                logger.error(f\"Configuration UI error: {e}\")\n                \n    def display_model_list(self) -> None:\n        \"\"\"Display all configured custom models.\"\"\"\n        models = self.config_writer.list_custom_models()\n        \n        if not models:\n            self.console.print(\n                Panel(\n                    \"[yellow]No custom models configured.[/yellow]\\n\"\n                    \"Use option 2 to add your first custom model.\",\n                    title=\"Custom Models\",\n                    border_style=\"yellow\"\n                )\n            )\n            return\n            \n        table = Table(\n            title=\"🤖 Custom AI Models\",\n            show_header=True,\n            header_style=\"bold cyan\",\n            border_style=\"cyan\"\n        )\n        \n        table.add_column(\"Name\", style=\"bold\")\n        table.add_column(\"Display Name\", style=\"cyan\")\n        table.add_column(\"Endpoint\", style=\"dim\")\n        table.add_column(\"Specialties\", style=\"green\")\n        table.add_column(\"Cost/1K\", style=\"yellow\", justify=\"right\")\n        table.add_column(\"Status\", justify=\"center\")\n        \n        for model in models:\n            specialties = \", \".join(model.get(\"specialties\", []))[:30]\n            if len(specialties) == 30:\n                specialties += \"...\"\n                \n            cost = f\"${model.get('cost_per_1k_tokens', 0.001):.4f}\"\n            \n            # Test connectivity for status (quick check)\n            status = self._get_model_status(model)\n            \n            table.add_row(\n                model.get(\"name\", \"unknown\"),\n                model.get(\"display_name\", \"unnamed\"),\n                model.get(\"endpoint\", \"no endpoint\")[:40] + (\"...\" if len(model.get(\"endpoint\", \"\")) > 40 else \"\"),\n                specialties or \"general\",\n                cost,\n                status\n            )\n            \n        self.console.print(table)\n        \n    def add_model_wizard(self) -> bool:\n        \"\"\"Interactive wizard for adding a new custom model.\"\"\"\n        self.console.print(\n            Panel(\n                \"[bold cyan]Add New Custom Model[/bold cyan]\\n\"\n                \"Configure a local or remote AI model for AsobaCode\",\n                border_style=\"cyan\"\n            )\n        )\n        \n        try:\n            # Get basic information\n            name = Prompt.ask(\n                \"\\n[bold]Model name[/bold] (internal identifier)\",\n                default=\"my-custom-model\"\n            ).strip()\n            \n            if not name:\n                self.console.print(\"❌ Model name cannot be empty\", style=\"red\")\n                return False\n                \n            # Check if model already exists\n            existing_models = self.config_writer.list_custom_models()\n            if any(m.get(\"name\") == name for m in existing_models):\n                self.console.print(f\"❌ Model '{name}' already exists\", style=\"red\")\n                return False\n                \n            display_name = Prompt.ask(\n                \"[bold]Display name[/bold] (human-readable)\",\n                default=name.replace(\"-\", \" \").title()\n            ).strip()\n            \n            endpoint = Prompt.ask(\n                \"[bold]Endpoint URL[/bold]\",\n                default=\"http://localhost:8000/v1/chat/completions\"\n            ).strip()\n            \n            if not endpoint:\n                self.console.print(\"❌ Endpoint URL cannot be empty\", style=\"red\")\n                return False\n                \n            # Optional API key\n            api_key = None\n            if Confirm.ask(\"\\n[bold]Does this model require an API key?[/bold]\", default=False):\n                api_key = Prompt.ask(\n                    \"[bold]API Key[/bold]\",\n                    password=True\n                ).strip() or None\n                \n            # Specialties\n            specialties_input = Prompt.ask(\n                \"\\n[bold]Specialties[/bold] (comma-separated, e.g., 'python,terraform,devops')\",\n                default=\"general\"\n            ).strip()\n            \n            specialties = [s.strip() for s in specialties_input.split(\",\") if s.strip()]\n            \n            # Cost per 1K tokens\n            cost_input = Prompt.ask(\n                \"[bold]Cost per 1000 tokens[/bold] (USD)\",\n                default=\"0.001\"\n            )\n            \n            try:\n                cost_per_1k = float(cost_input)\n            except ValueError:\n                self.console.print(\"❌ Invalid cost format, using default 0.001\", style=\"yellow\")\n                cost_per_1k = 0.001\n                \n            # Test connection before saving\n            self.console.print(\"\\n🔍 Testing model endpoint...\")\n            \n            with Progress(\n                SpinnerColumn(),\n                TextColumn(\"[progress.description]{task.description}\"),\n                console=self.console,\n                transient=True\n            ) as progress:\n                task = progress.add_task(\"Testing connection...\", total=None)\n                validation_result = self.config_writer.validate_model_endpoint(endpoint, api_key)\n                \n            if not validation_result[\"valid\"]:\n                self.console.print(f\"⚠️  Endpoint test failed: {validation_result['error']}\", style=\"yellow\")\n                if not Confirm.ask(\"[bold]Save model anyway?[/bold]\", default=False):\n                    self.console.print(\"❌ Model not saved\", style=\"red\")\n                    return False\n            else:\n                details = validation_result.get(\"details\", {})\n                response_time = details.get(\"response_time\", 0)\n                self.console.print(f\"✅ Endpoint test successful ({response_time:.2f}s)\", style=\"green\")\n                \n            # Save the model\n            success = self.config_writer.add_custom_model(\n                name=name,\n                display_name=display_name,\n                endpoint=endpoint,\n                api_key=api_key,\n                specialties=specialties,\n                cost_per_1k_tokens=cost_per_1k\n            )\n            \n            if success:\n                self.console.print(f\"\\n✅ Model '[bold cyan]{display_name}[/bold cyan]' added successfully!\", style=\"green\")\n                self.console.print(f\"   Internal name: {name}\")\n                self.console.print(f\"   Endpoint: {endpoint}\")\n                if specialties:\n                    self.console.print(f\"   Specialties: {', '.join(specialties)}\")\n                return True\n            else:\n                self.console.print(\"\\n❌ Failed to save model configuration\", style=\"red\")\n                return False\n                \n        except KeyboardInterrupt:\n            self.console.print(\"\\n\\n❌ Model creation cancelled\", style=\"yellow\")\n            return False\n        except Exception as e:\n            self.console.print(f\"\\n❌ Error adding model: {e}\", style=\"red\")\n            logger.error(f\"Error in add_model_wizard: {e}\")\n            return False\n            \n    def edit_model_wizard(self) -> bool:\n        \"\"\"Interactive wizard for editing an existing model.\"\"\"\n        models = self.config_writer.list_custom_models()\n        \n        if not models:\n            self.console.print(\"❌ No custom models found to edit\", style=\"red\")\n            return False\n            \n        self.console.print(\n            Panel(\n                \"[bold cyan]Edit Custom Model[/bold cyan]\\n\"\n                \"Modify an existing model configuration\",\n                border_style=\"cyan\"\n            )\n        )\n        \n        # Show model selection\n        self.console.print(\"\\n[bold]Available models:[/bold]\")\n        for i, model in enumerate(models, 1):\n            display_name = model.get(\"display_name\", model.get(\"name\", \"unnamed\"))\n            self.console.print(f\"  [cyan]{i}.[/cyan] {display_name}\")\n            \n        try:\n            choice = Prompt.ask(\n                \"\\n[bold]Select model to edit[/bold]\",\n                choices=[str(i) for i in range(1, len(models) + 1)],\n                default=\"1\"\n            )\n            \n            model_index = int(choice) - 1\n            model = models[model_index]\n            model_name = model.get(\"name\")\n            \n            self.console.print(f\"\\n[bold]Editing model: {model.get('display_name', model_name)}[/bold]\")\n            \n            # Edit fields (press Enter to keep current value)\n            updates = {}\n            \n            current_display_name = model.get(\"display_name\", \"\")\n            new_display_name = Prompt.ask(\n                f\"[bold]Display name[/bold] [{current_display_name}]\",\n                default=current_display_name\n            ).strip()\n            if new_display_name != current_display_name:\n                updates[\"display_name\"] = new_display_name\n                \n            current_endpoint = model.get(\"endpoint\", \"\")\n            new_endpoint = Prompt.ask(\n                f\"[bold]Endpoint URL[/bold] [{current_endpoint}]\",\n                default=current_endpoint\n            ).strip()\n            if new_endpoint != current_endpoint:\n                updates[\"endpoint\"] = new_endpoint\n                \n            # API key update\n            has_api_key = bool(model.get(\"api_key\"))\n            if has_api_key:\n                if Confirm.ask(\"[bold]Update API key?[/bold]\", default=False):\n                    new_api_key = Prompt.ask(\"[bold]New API Key[/bold]\", password=True).strip()\n                    updates[\"api_key\"] = new_api_key or None\n            else:\n                if Confirm.ask(\"[bold]Add API key?[/bold]\", default=False):\n                    new_api_key = Prompt.ask(\"[bold]API Key[/bold]\", password=True).strip()\n                    updates[\"api_key\"] = new_api_key or None\n                    \n            # Specialties\n            current_specialties = \", \".join(model.get(\"specialties\", []))\n            new_specialties_input = Prompt.ask(\n                f\"[bold]Specialties[/bold] [{current_specialties}]\",\n                default=current_specialties\n            ).strip()\n            new_specialties = [s.strip() for s in new_specialties_input.split(\",\") if s.strip()]\n            if new_specialties != model.get(\"specialties\", []):\n                updates[\"specialties\"] = new_specialties\n                \n            # Cost\n            current_cost = model.get(\"cost_per_1k_tokens\", 0.001)\n            new_cost_input = Prompt.ask(\n                f\"[bold]Cost per 1000 tokens[/bold] [{current_cost}]\",\n                default=str(current_cost)\n            )\n            try:\n                new_cost = float(new_cost_input)\n                if new_cost != current_cost:\n                    updates[\"cost_per_1k_tokens\"] = new_cost\n            except ValueError:\n                self.console.print(\"❌ Invalid cost format, keeping current value\", style=\"yellow\")\n                \n            if not updates:\n                self.console.print(\"ℹ️  No changes made\", style=\"blue\")\n                return True\n                \n            # Apply updates\n            success = self.config_writer.update_custom_model(model_name, updates)\n            \n            if success:\n                self.console.print(f\"\\n✅ Model '[bold cyan]{new_display_name or model.get('display_name')}[/bold cyan]' updated successfully!\", style=\"green\")\n                return True\n            else:\n                self.console.print(\"\\n❌ Failed to update model configuration\", style=\"red\")\n                return False\n                \n        except KeyboardInterrupt:\n            self.console.print(\"\\n\\n❌ Model editing cancelled\", style=\"yellow\")\n            return False\n        except Exception as e:\n            self.console.print(f\"\\n❌ Error editing model: {e}\", style=\"red\")\n            logger.error(f\"Error in edit_model_wizard: {e}\")\n            return False\n            \n    def remove_model_wizard(self) -> bool:\n        \"\"\"Interactive wizard for removing a model.\"\"\"\n        models = self.config_writer.list_custom_models()\n        \n        if not models:\n            self.console.print(\"❌ No custom models found to remove\", style=\"red\")\n            return False\n            \n        self.console.print(\n            Panel(\n                \"[bold red]Remove Custom Model[/bold red]\\n\"\n                \"[yellow]Warning: This action cannot be undone![/yellow]\",\n                border_style=\"red\"\n            )\n        )\n        \n        # Show model selection\n        self.console.print(\"\\n[bold]Available models:[/bold]\")\n        for i, model in enumerate(models, 1):\n            display_name = model.get(\"display_name\", model.get(\"name\", \"unnamed\"))\n            self.console.print(f\"  [cyan]{i}.[/cyan] {display_name}\")\n            \n        try:\n            choice = Prompt.ask(\n                \"\\n[bold]Select model to remove[/bold]\",\n                choices=[str(i) for i in range(1, len(models) + 1)],\n                default=\"1\"\n            )\n            \n            model_index = int(choice) - 1\n            model = models[model_index]\n            model_name = model.get(\"name\")\n            display_name = model.get(\"display_name\", model_name)\n            \n            # Confirmation\n            if not Confirm.ask(\n                f\"\\n[bold red]Are you sure you want to remove '{display_name}'?[/bold red]\",\n                default=False\n            ):\n                self.console.print(\"❌ Model removal cancelled\", style=\"yellow\")\n                return False\n                \n            success = self.config_writer.remove_custom_model(model_name)\n            \n            if success:\n                self.console.print(f\"\\n✅ Model '[bold cyan]{display_name}[/bold cyan]' removed successfully!\", style=\"green\")\n                return True\n            else:\n                self.console.print(\"\\n❌ Failed to remove model\", style=\"red\")\n                return False\n                \n        except KeyboardInterrupt:\n            self.console.print(\"\\n\\n❌ Model removal cancelled\", style=\"yellow\")\n            return False\n        except Exception as e:\n            self.console.print(f\"\\n❌ Error removing model: {e}\", style=\"red\")\n            logger.error(f\"Error in remove_model_wizard: {e}\")\n            return False\n            \n    def test_model_wizard(self) -> None:\n        \"\"\"Interactive wizard for testing model connections.\"\"\"\n        models = self.config_writer.list_custom_models()\n        \n        if not models:\n            self.console.print(\"❌ No custom models found to test\", style=\"red\")\n            return\n            \n        self.console.print(\n            Panel(\n                \"[bold cyan]Test Model Connection[/bold cyan]\\n\"\n                \"Verify that your models are accessible\",\n                border_style=\"cyan\"\n            )\n        )\n        \n        # Option to test all or specific model\n        if len(models) > 1:\n            test_all = Confirm.ask(\"\\n[bold]Test all models?[/bold]\", default=True)\n            \n            if test_all:\n                self._test_all_models(models)\n                return\n                \n        # Test specific model\n        self.console.print(\"\\n[bold]Available models:[/bold]\")\n        for i, model in enumerate(models, 1):\n            display_name = model.get(\"display_name\", model.get(\"name\", \"unnamed\"))\n            self.console.print(f\"  [cyan]{i}.[/cyan] {display_name}\")\n            \n        try:\n            choice = Prompt.ask(\n                \"\\n[bold]Select model to test[/bold]\",\n                choices=[str(i) for i in range(1, len(models) + 1)],\n                default=\"1\"\n            )\n            \n            model_index = int(choice) - 1\n            model = models[model_index]\n            \n            self._test_single_model(model)\n            \n        except KeyboardInterrupt:\n            self.console.print(\"\\n\\n❌ Model testing cancelled\", style=\"yellow\")\n        except Exception as e:\n            self.console.print(f\"\\n❌ Error testing model: {e}\", style=\"red\")\n            logger.error(f\"Error in test_model_wizard: {e}\")\n            \n    def _test_single_model(self, model: Dict[str, Any]) -> None:\n        \"\"\"Test a single model's connection.\"\"\"\n        display_name = model.get(\"display_name\", model.get(\"name\", \"unknown\"))\n        endpoint = model.get(\"endpoint\")\n        api_key = model.get(\"api_key\")\n        \n        self.console.print(f\"\\n🔍 Testing [bold cyan]{display_name}[/bold cyan]...\")\n        self.console.print(f\"   Endpoint: {endpoint}\")\n        \n        with Progress(\n            SpinnerColumn(),\n            TextColumn(\"[progress.description]{task.description}\"),\n            console=self.console,\n            transient=True\n        ) as progress:\n            task = progress.add_task(\"Testing connection...\", total=None)\n            result = self.config_writer.validate_model_endpoint(endpoint, api_key)\n            \n        if result[\"valid\"]:\n            details = result.get(\"details\", {})\n            response_time = details.get(\"response_time\", 0)\n            self.console.print(f\"✅ [bold green]Success![/bold green] Response time: {response_time:.2f}s\")\n            \n            content_type = details.get(\"content_type\", \"unknown\")\n            if content_type:\n                self.console.print(f\"   Content-Type: {content_type}\")\n        else:\n            self.console.print(f\"❌ [bold red]Failed:[/bold red] {result['error']}\")\n            details = result.get(\"details\", {})\n            if \"status_code\" in details:\n                self.console.print(f\"   HTTP Status: {details['status_code']}\")\n                \n    def _test_all_models(self, models: List[Dict[str, Any]]) -> None:\n        \"\"\"Test all models' connections.\"\"\"\n        self.console.print(f\"\\n🔍 Testing {len(models)} models...\\n\")\n        \n        results = []\n        for model in models:\n            display_name = model.get(\"display_name\", model.get(\"name\", \"unknown\"))\n            endpoint = model.get(\"endpoint\")\n            api_key = model.get(\"api_key\")\n            \n            self.console.print(f\"Testing [cyan]{display_name}[/cyan]...\", end=\" \")\n            \n            result = self.config_writer.validate_model_endpoint(endpoint, api_key, timeout=5)\n            \n            if result[\"valid\"]:\n                response_time = result.get(\"details\", {}).get(\"response_time\", 0)\n                self.console.print(f\"✅ ({response_time:.2f}s)\")\n                results.append((model, True, response_time, None))\n            else:\n                self.console.print(f\"❌ {result['error'][:50]}...\")\n                results.append((model, False, 0, result['error']))\n                \n        # Summary\n        successful = sum(1 for _, success, _, _ in results if success)\n        self.console.print(f\"\\n📊 [bold]Test Results:[/bold] {successful}/{len(models)} successful\")\n        \n        if successful < len(models):\n            self.console.print(\"\\n[bold red]Failed models:[/bold red]\")\n            for model, success, _, error in results:\n                if not success:\n                    display_name = model.get(\"display_name\", model.get(\"name\", \"unknown\"))\n                    self.console.print(f\"  ❌ {display_name}: {error}\")\n                    \n    def backup_restore_wizard(self) -> None:\n        \"\"\"Interactive wizard for backup and restore operations.\"\"\"\n        self.console.print(\n            Panel(\n                \"[bold cyan]Backup & Restore[/bold cyan]\\n\"\n                \"Manage configuration backups\",\n                border_style=\"cyan\"\n            )\n        )\n        \n        choice = Prompt.ask(\n            \"\\n[bold]Select operation[/bold]\",\n            choices=[\"backup\", \"restore\", \"cancel\"],\n            default=\"backup\"\n        )\n        \n        try:\n            if choice == \"backup\":\n                backup_path = Prompt.ask(\n                    \"[bold]Backup file path[/bold]\",\n                    default=\"user_config_backup.yaml\"\n                )\n                \n                success = self.config_writer.backup_user_config(backup_path)\n                \n                if success:\n                    self.console.print(f\"✅ Configuration backed up to [cyan]{backup_path}[/cyan]\", style=\"green\")\n                else:\n                    self.console.print(\"❌ Backup failed\", style=\"red\")\n                    \n            elif choice == \"restore\":\n                backup_path = Prompt.ask(\n                    \"[bold]Backup file path[/bold]\",\n                    default=\"user_config_backup.yaml\"\n                )\n                \n                if not Confirm.ask(\n                    f\"\\n[bold red]This will overwrite your current configuration![/bold red]\\n\"\n                    f\"Are you sure you want to restore from '{backup_path}'?\",\n                    default=False\n                ):\n                    self.console.print(\"❌ Restore cancelled\", style=\"yellow\")\n                    return\n                    \n                success = self.config_writer.restore_user_config(backup_path)\n                \n                if success:\n                    self.console.print(f\"✅ Configuration restored from [cyan]{backup_path}[/cyan]\", style=\"green\")\n                else:\n                    self.console.print(\"❌ Restore failed\", style=\"red\")\n                    \n            else:\n                self.console.print(\"❌ Operation cancelled\", style=\"yellow\")\n                \n        except KeyboardInterrupt:\n            self.console.print(\"\\n\\n❌ Operation cancelled\", style=\"yellow\")\n        except Exception as e:\n            self.console.print(f\"\\n❌ Error: {e}\", style=\"red\")\n            logger.error(f\"Error in backup_restore_wizard: {e}\")\n            \n    def _get_model_status(self, model: Dict[str, Any]) -> str:\n        \"\"\"Get quick status of a model (cached or quick test).\"\"\"\n        # For now, return a simple status\n        # In a real implementation, this could cache test results\n        endpoint = model.get(\"endpoint\", \"\")\n        if not endpoint:\n            return \"❌\"\n        elif endpoint.startswith(\"http://localhost\") or endpoint.startswith(\"http://127.0.0.1\"):\n            return \"🟡\"  # Local endpoint - might be up or down\n        else:\n            return \"🟢\"  # Remote endpoint - assume accessible\n\n\ndef create_model_configuration_ui(\n    config_loader: ConfigLoader,\n    console: Optional[Console] = None\n) -> ModelConfigurationUI:\n    \"\"\"\n    Factory function to create ModelConfigurationUI with proper dependencies.\n    \n    Args:\n        config_loader: ConfigLoader instance\n        console: Rich console instance\n        \n    Returns:\n        ModelConfigurationUI instance\n    \"\"\"\n    config_writer = ConfigWriter(config_loader)\n    return ModelConfigurationUI(config_writer, console)", "metadata": {"source": "asobacode-cli//home/shingai/sort/asoba-code/src/asoba_code/ui/config_ui.py", "language": "python", "complexity": "medium", "pattern_type": "terminal_ui", "features": {"has_fastmcp": false, "has_rich_ui": true, "has_routing": false, "has_cost_tracking": true, "has_claude_md": false, "function_count": 12, "class_count": 1, "tool_count": 0}, "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.79125, "syntax_valid": true, "completeness_score": 0.85, "authenticity_score": 0.65, "asobacode_compliance": 0.7}}
{"domain": "asobacode_mcp_business_analysis", "category": "asobacode_mcp_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate natural language CLI conversation flow\n\n### EXPLORE Phase:\nAnalyze AsobaCode patterns and MCP requirements.\n\n### PLAN Phase:\nDesign implementation with FastMCP, Rich UI, and cost optimization.\n\n### CODE Phase:", "completion": "\"\"\"\nAsobaCode Terminal Interface - Main CLI Module\n\nClaude Code-like terminal interface for MCP-based DevOps automation.\nFollowing TDD approach: Implement just enough to pass failing tests.\n\"\"\"\n\nimport asyncio\nimport sys\nfrom pathlib import Path\n\nimport typer\nfrom rich import print as rprint\nfrom rich.console import Console\nfrom rich.panel import Panel\nfrom rich.table import Table\n\nfrom asoba_code.client.manager import MCPClientManager\nfrom asoba_code.config.loader import ConfigLoader\n\n# Global console for Rich formatting\nconsole = Console()\n\n# Create main Typer app\napp = typer.Typer(\n    name=\"asoba-code\",\n    help=\"MCP-based agentic software development support system\",\n    add_completion=False,\n    rich_markup_mode=\"rich\"\n)\n\n# Global state for client manager\nclient_manager: MCPClientManager | None = None\nconfig_loader: ConfigLoader | None = None\ncommand_registry = None  # CommandRegistry - initialized lazily\n\n\ndef ensure_initialized():\n    \"\"\"Ensure client manager and config are initialized.\"\"\"\n    global client_manager, config_loader, command_registry\n\n    if client_manager is not None and config_loader is not None and command_registry is not None:\n        return  # Already initialized\n\n    try:\n        # Initialize configuration\n        config_dir = Path(\"configs\")\n        if not config_dir.exists():\n            config_dir = Path(__file__).parent.parent.parent / \"configs\"\n\n        config_loader = ConfigLoader(str(config_dir))\n        config = config_loader.load_config()\n\n        # Initialize MCP client manager\n        client_manager = MCPClientManager(config_loader)\n        \n        # Initialize command registry\n        command_registry = _initialize_command_registry()\n\n    except Exception as e:\n        console.print(f\"⚠️  Warning: Failed to initialize: {e}\", style=\"yellow\")\n        # Continue with limited functionality\n\n\ndef _initialize_command_registry():\n    \"\"\"Initialize and populate the command registry with AsobaCode commands.\"\"\"\n    from asoba_code.cli.command_registry import (\n        CommandRegistry, \n        CommandCategory, \n        SubcommandSpec, \n        ArgumentSpec\n    )\n    \n    registry = CommandRegistry()\n    \n    # Register system commands\n    registry.register(\n        name=\"servers\",\n        function=servers,\n        aliases=[\"server\", \"list\"],\n        help_text=\"List available MCP servers and their status\",\n        category=CommandCategory.SYSTEM,\n        examples=[\"/servers\", \"/server\"]\n    )\n    \n    registry.register(\n        name=\"status\",\n        function=status,\n        aliases=[\"health\"],\n        help_text=\"Show system status and configuration\",\n        category=CommandCategory.SYSTEM,\n        examples=[\"/status\", \"/health\"]\n    )\n    \n    # Register AI commands with subcommands\n    registry.register(\n        name=\"models\",\n        function=models,\n        aliases=[\"model\"],\n        help_text=\"Manage custom AI models\",\n        category=CommandCategory.AI,\n        subcommands={\n            \"list\": SubcommandSpec(\"list\", \"List all configured models\"),\n            \"add\": SubcommandSpec(\n                \"add\",\n                \"Add a new custom model\",\n                arguments=[\n                    ArgumentSpec(\"name\", \"str\", True, help_text=\"Model identifier\"),\n                    ArgumentSpec(\"endpoint\", \"str\", False, help_text=\"Model endpoint URL\")\n                ]\n            ),\n            \"remove\": SubcommandSpec(\n                \"remove\", \n                \"Remove a custom model\",\n                arguments=[\n                    ArgumentSpec(\"name\", \"str\", True, help_text=\"Model identifier to remove\")\n                ]\n            ),\n            \"test\": SubcommandSpec(\n                \"test\",\n                \"Test model connectivity\", \n                arguments=[\n                    ArgumentSpec(\"name\", \"str\", False, help_text=\"Specific model to test\")\n                ]\n            )\n        },\n        examples=[\n            \"/models list\",\n            \"/models add mymodel\", \n            \"/models test mymodel\",\n            \"/models remove mymodel\"\n        ]\n    )\n    \n    # Register configuration commands\n    registry.register(\n        name=\"configure\",\n        function=configure,\n        aliases=[\"config\", \"settings\"],\n        help_text=\"Interactive configuration management interface\",\n        category=CommandCategory.CONFIG,\n        examples=[\"/configure\", \"/config\", \"/settings\"]\n    )\n    \n    # Register help command (special case)\n    registry.register(\n        name=\"help\",\n        function=lambda: None,  # Help is handled specially\n        aliases=[\"h\", \"?\"],\n        help_text=\"Show help information for commands\",\n        category=CommandCategory.GENERAL,\n        examples=[\"/help\", \"/help models\", \"/help system\"]\n    )\n    \n    return registry\n\n\ndef version_callback(value: bool):\n    \"\"\"Callback for --version flag.\"\"\"\n    if value:\n        rprint(\"asoba-code version 0.1.0\")\n        raise typer.Exit()\n\n\ndef debug_callback(value: bool):\n    \"\"\"Callback for --debug flag.\"\"\"\n    if value:\n        import logging\n        logging.basicConfig(level=logging.DEBUG)\n        console.print(\"🐛 Debug mode enabled\", style=\"yellow\")\n\n\n@app.callback()\ndef main_callback(\n    version: bool | None = typer.Option(\n        None,\n        \"--version\",\n        callback=version_callback,\n        help=\"Show version information\"\n    ),\n    debug: bool | None = typer.Option(\n        False,\n        \"--debug\",\n        callback=debug_callback,\n        help=\"Enable debug logging\"\n    )\n):\n    \"\"\"\n    AsobaCode Terminal Interface\n    \n    MCP-based agentic software development support system connecting local \n    coding environments with GitHub and LLM-based agents for Infrastructure as Code.\n    \"\"\"\n    ensure_initialized()\n\n    if debug and config_loader:\n        console.print(\"📁 Config loaded\", style=\"dim\")\n        console.print(\"🔧 Client manager initialized\", style=\"dim\")\n\n\n@app.command()\ndef servers(\n    health: bool = typer.Option(False, \"--health\", help=\"Show server health status\")\n):\n    \"\"\"List available MCP servers and their status.\"\"\"\n    try:\n        ensure_initialized()  # Make sure everything is initialized\n\n        if client_manager is None:\n            console.print(\"❌ Client manager not initialized\", style=\"red\")\n            return\n\n        # Discover servers\n        servers_info = client_manager.discover_servers()\n\n        if not servers_info:\n            console.print(Panel(\n                \"No MCP servers found.\\n\\n\" +\n                \"Make sure your MCP servers are running and configured in your config files.\",\n                title=\"🔍 MCP Server Discovery\",\n                style=\"cyan\"\n            ))\n            return\n\n        # Create table for server information\n        table = Table(title=\"🖥️  MCP Servers\")\n        table.add_column(\"Server\", style=\"cyan\", no_wrap=True)\n        table.add_column(\"Status\", style=\"green\")\n        table.add_column(\"Capabilities\", style=\"blue\")\n        table.add_column(\"Version\", style=\"magenta\")\n\n        if health:\n            table.add_column(\"Health\", style=\"yellow\")\n\n        for name, info in servers_info.items():\n            status = info.get(\"status\", \"unknown\")\n            capabilities = \", \".join(info.get(\"capabilities\", []))\n            version = info.get(\"version\", \"unknown\")\n\n            row = [name, status, capabilities, version]\n\n            if health:\n                # Sync wrapper for async health check\n                health_status = asyncio.run(client_manager.check_server_health(name))\n                row.append(health_status)\n\n            table.add_row(*row)\n\n        console.print(table)\n\n    except Exception as e:\n        console.print(f\"❌ Error discovering servers: {e}\", style=\"red\")\n        typer.Exit(1)\n\n\n@app.command()\ndef status():\n    \"\"\"Show system status and configuration.\"\"\"\n    try:\n        ensure_initialized()  # Make sure everything is initialized\n\n        # System status panel\n        status_info = []\n\n        # Config information\n        if config_loader:\n            config = config_loader.load_config()\n            config_path = config_loader.config_dir\n            status_info.append(f\"📁 Config: {config_path}\")\n\n            # MCP client info\n            mcp_config = config.get(\"mcp\", {})\n            client_config = mcp_config.get(\"client\", {})\n            timeout = client_config.get(\"timeout\", \"unknown\")\n            status_info.append(f\"⏱️  Timeout: {timeout}s\")\n        else:\n            status_info.append(\"⚠️  Config: Not loaded\")\n\n        # Server count\n        if client_manager:\n            servers_info = client_manager.discover_servers()\n            server_count = len(servers_info)\n            status_info.append(f\"🖥️  Servers: {server_count} discovered\")\n        else:\n            status_info.append(\"❌ Servers: Client manager not available\")\n\n        # Environment info\n        python_version = f\"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}\"\n        status_info.append(f\"🐍 Python: {python_version}\")\n\n        status_text = \"\\n\".join(status_info)\n\n        console.print(Panel(\n            status_text,\n            title=\"📊 AsobaCode Status\",\n            style=\"cyan\"\n        ))\n\n    except Exception as e:\n        console.print(f\"❌ Error getting status: {e}\", style=\"red\")\n        typer.Exit(1)\n\n\n@app.command()\ndef interactive():\n    \"\"\"Start interactive shell mode (like Claude Code).\"\"\"\n    # Ensure everything is initialized\n    ensure_initialized()\n\n    # Clear visual separator like Claude Code\n    console.print()  # Add space above\n\n    # Add a subtle separator line to clearly distinguish from previous terminal content\n    separator = \"─\" * 80\n    console.print(f\"[bright_cyan]{separator}[/bright_cyan]\")\n\n    # Create a bright welcome panel with clear visual separation\n    welcome_text = (\n        \"🚀 [bold bright_cyan]Welcome to AsobaCode Interactive Mode![/bold bright_cyan]\\n\\n\"\n        \"[white]Type your questions or commands naturally:[/white]\\n\"\n        \"[dim]• 'generate a python hello world function'[/dim]\\n\"\n        \"[dim]• 'show status' or 'list servers'[/dim]\\n\"\n        \"[dim]• 'help' for assistance[/dim]\\n\\n\"\n        \"[bright_yellow]Use 'exit' or Ctrl+C to quit[/bright_yellow]\"\n    )\n\n    console.print(Panel(\n        welcome_text,\n        title=\"[bold bright_white]🤖 AsobaCode AI Assistant[/bold bright_white]\",\n        border_style=\"bright_cyan\",\n        padding=(1, 2),\n        width=80\n    ))\n    console.print()  # Add space below\n\n    try:\n        while True:\n            # Get user input with prompt\n            try:\n                query = typer.prompt(\"🤖\", prompt_suffix=\" \")\n\n                if query.lower().strip() in [\"exit\", \"quit\", \"q\"]:\n                    console.print()\n                    console.print(\"👋 [bright_cyan]Goodbye![/bright_cyan]\")\n                    console.print(f\"[bright_cyan]{separator}[/bright_cyan]\")\n                    console.print()\n                    break\n\n                # Process the query using the same logic as ask command\n                process_query(query)\n                console.print()  # Add spacing between interactions\n\n            except KeyboardInterrupt:\n                console.print()\n                console.print(\"👋 [bright_cyan]Goodbye![/bright_cyan]\")\n                console.print(f\"[bright_cyan]{separator}[/bright_cyan]\")\n                console.print()\n                break\n            except EOFError:\n                console.print()\n                console.print(\"👋 [bright_cyan]Goodbye![/bright_cyan]\")\n                console.print(f\"[bright_cyan]{separator}[/bright_cyan]\")\n                console.print()\n                break\n\n    except Exception as e:\n        console.print(f\"❌ Interactive mode error: {e}\", style=\"red\")\n\n\ndef _process_slash_command(query: str) -> bool:\n    \"\"\"\n    Process slash commands using the command registry.\n    \n    Supports advanced features:\n    - Case insensitive commands (/HELP, /Help, /help all work)\n    - Named arguments (/models add mymodel --endpoint http://localhost:8000)\n    - Context-aware help (/help models, /help system)\n    - Command suggestions for typos\n    \"\"\"\n    original_query = query\n    if not query.startswith('/'):\n        return False\n    \n    # Ensure command registry is initialized\n    ensure_initialized()\n    if command_registry is None:\n        console.print(\"❌ Command registry not available\", style=\"red\")\n        return True\n    \n    # Parse command and arguments (case insensitive)\n    command_part = query[1:]  # Remove leading slash\n    parts = command_part.split(' ', 1)\n    command = parts[0].lower()  # Case insensitive command lookup\n    args = parts[1] if len(parts) > 1 else \"\"\n    \n    # Handle help specially for enhanced help system\n    if command in ['help', 'h', '?']:\n        if args:\n            # Check if asking for category help\n            arg_lower = args.strip().lower()\n            if arg_lower in ['system', 'ai', 'config', 'general']:\n                help_text = command_registry.get_help(category=arg_lower)\n            else:\n                # Specific command help (case insensitive)\n                help_text = command_registry.get_help(args.strip().lower())\n        else:\n            # General help overview\n            help_text = command_registry.get_help()\n        \n        console.print(Panel(\n            help_text,\n            title=\"🤖 AsobaCode Help\",\n            style=\"cyan\",\n            padding=(1, 2)\n        ))\n        return True\n    \n    # Execute command through registry\n    result = command_registry.execute(command, args)\n    \n    if result.success:\n        if result.message:\n            console.print(f\"🤖 [cyan]{result.message}[/cyan]\")\n        if result.output:\n            console.print(result.output)\n    else:\n        # Enhanced error messages with better formatting\n        console.print(f\"❌ {result.error}\", style=\"red\")\n        \n        if result.suggestions:\n            console.print(\"💡 Did you mean:\", style=\"yellow\")\n            for suggestion in result.suggestions[:3]:  # Limit to top 3 suggestions\n                console.print(f\"   • /{suggestion}\", style=\"dim\")\n        \n        # Show command help hint for unknown commands\n        if \"Unknown command\" in result.error:\n            console.print(\"\\n💬 Try `/help` to see all available commands\", style=\"dim\")\n    \n    return True\n\n\ndef process_query(query: str):\n    \"\"\"Process a user query - shared logic for ask and interactive commands.\"\"\"\n    if not query or query.strip() == \"\":\n        console.print(\"❌ Please provide a query.\", style=\"red\")\n        return\n\n    # Simple responses for basic queries (MVP implementation)\n    query_lower = query.lower().strip()\n\n    # Handle slash commands using the command registry\n    if query.startswith('/'):\n        if _process_slash_command(query):\n            return\n\n    # Try to generate actual code/content using AI models\n    try:\n        # Import Bedrock client directly\n        from asoba_code.servers.ai_models.bedrock import BedrockClient\n        from asoba_code.servers.ai_models.routing import ModelRouter\n\n        # Detect if this is a code generation request\n        if any(word in query_lower for word in [\"generate\", \"create\", \"write\", \"code\", \"function\", \"class\", \"script\"]):\n            from asoba_code.ui.animations import thinking_animation\n\n            # Extract language and complexity\n            language = \"python\"  # default\n            if \"javascript\" in query_lower or \"js\" in query_lower:\n                language = \"javascript\"\n            elif \"rust\" in query_lower:\n                language = \"rust\"\n            elif \"go\" in query_lower and \"golang\" in query_lower:\n                language = \"go\"\n\n            complexity = \"low\"\n            if \"complex\" in query_lower or \"advanced\" in query_lower:\n                complexity = \"high\"\n            elif \"medium\" in query_lower or \"moderate\" in query_lower:\n                complexity = \"medium\"\n\n            # Initialize router with configuration for multi-provider support\n            if config_loader:\n                config = config_loader.load_config()\n                model_router = ModelRouter(config)\n            else:\n                model_router = ModelRouter()\n\n            # Use thinking animation during generation\n            with thinking_animation(f\"🧠 Generating {language} code...\", show_tokens=True, console=console) as anim:\n                # Update animation with analysis phase\n                anim.update_message(f\"🧠 Analyzing request for {language} generation...\")\n                \n                # Use the new multi-provider routing system\n                result = model_router.generate_code_with_routing(\n                    description=query,\n                    language=language,\n                    complexity=complexity,\n                    code_length=len(query) * 10  # Rough estimate\n                )\n                \n                # Update tokens if available in result\n                if \"actual_tokens\" in result:\n                    token_data = result[\"actual_tokens\"]\n                    anim.update_tokens(\n                        input_tokens=token_data.get(\"input_tokens\", 0),\n                        output_tokens=token_data.get(\"output_tokens\", 0),\n                        cost=result.get(\"cost\", 0.0)\n                    )\n\n            if \"error\" not in result:\n                provider_used = result.get('provider_used', 'unknown')\n                model_used = result.get('model_used', 'unknown')\n                cost = result.get('cost', 0)\n                \n                console.print(Panel(\n                    f\"**Generated {language.title()} Code:**\\n\\n{result.get('code', 'No code generated')}\\n\\n\" +\n                    f\"🤖 Provider: {provider_used}\\n\" +\n                    f\"🔧 Model: {model_used}\\n\" +\n                    f\"💰 Cost: ${cost:.4f}\",\n                    title=\"✨ Multi-Provider AI Code Generation\",\n                    style=\"cyan\"\n                ))\n            else:\n                console.print(f\"❌ Generation failed: {result.get('error', 'Unknown error')}\", style=\"red\")\n            return\n\n    except Exception as e:\n        console.print(f\"⚠️  AI models not available: {e}\", style=\"yellow\")\n\n    # Handle basic queries - actually execute them in interactive mode\n    if any(word in query_lower for word in [\"server\", \"available\", \"list\"]) and not any(word in query_lower for word in [\"generate\", \"create\", \"write\", \"code\"]):\n        console.print(\"🤖 [cyan]Listing available MCP servers...[/cyan]\")\n        servers()  # Actually call the servers command\n        return\n\n    if any(word in query_lower for word in [\"help\", \"what\", \"how\"]):\n        console.print(\"🤖 I'm your AsobaCode assistant! Here are some things you can ask:\", style=\"cyan\")\n        console.print(\"   • 'Generate a Python hello world function' - AI code generation\", style=\"white\")\n        console.print(\"   • 'What servers are available?' - List MCP servers\", style=\"white\")\n        console.print(\"   • 'Show status' - System health information\", style=\"white\")\n        console.print(\"   • Use --help on any command for detailed usage\", style=\"white\")\n        return\n\n    if any(word in query_lower for word in [\"status\", \"health\"]) and not any(word in query_lower for word in [\"generate\", \"create\", \"write\", \"code\"]):\n        console.print(\"🤖 [cyan]Checking system status...[/cyan]\")\n        status()\n        return\n\n    # Default response for unrecognized queries\n    console.print(Panel(\n        f\"🤖 I received your query: '{query}'\\n\\n\" +\n        \"Try asking me to generate code! Examples:\\n\" +\n        \"• 'Generate a Python hello world function'\\n\" +\n        \"• 'Create a JavaScript async function'\\n\" +\n        \"• 'Write a Rust function to parse JSON'\\n\\n\" +\n        \"Other commands:\\n\" +\n        \"• asoba-code servers - List available MCP servers\\n\" +\n        \"• asoba-code status - Show system status\",\n        title=\"💬 AsobaCode Assistant\",\n        style=\"cyan\"\n    ))\n\n\n@app.command()\ndef ask(\n    query: str = typer.Argument(..., help=\"Natural language query or question\")\n):\n    \"\"\"Ask a natural language question to the MCP servers.\"\"\"\n    process_query(query)\n\n\n@app.command()\ndef configure():\n    \"\"\"Interactive configuration management interface.\"\"\"\n    try:\n        ensure_initialized()\n        \n        from asoba_code.ui.config_ui import create_model_configuration_ui\n        \n        # Create configuration UI\n        config_ui = create_model_configuration_ui(config_loader, console)\n        \n        # Show main configuration menu\n        config_ui.show_main_menu()\n        \n    except Exception as e:\n        console.print(f\"❌ Configuration error: {e}\", style=\"red\")\n        raise typer.Exit(1)\n\n\n@app.command()\ndef models(\n    action: str = typer.Argument(\"list\", help=\"Action: list, add, remove, test\"),\n    name: str = typer.Option(None, \"--name\", \"-n\", help=\"Model name for add/remove/test actions\"),\n    endpoint: str = typer.Option(None, \"--endpoint\", \"-e\", help=\"Model endpoint URL for add action\"),\n    display_name: str = typer.Option(None, \"--display\", \"-d\", help=\"Display name for add action\"),\n    api_key: str = typer.Option(None, \"--api-key\", \"-k\", help=\"API key for add action\")\n):\n    \"\"\"Manage custom AI models.\"\"\"\n    try:\n        ensure_initialized()\n        \n        from asoba_code.config.writer import ConfigWriter\n        from asoba_code.ui.config_ui import create_model_configuration_ui\n        \n        config_writer = ConfigWriter(config_loader)\n        config_ui = create_model_configuration_ui(config_loader, console)\n        \n        if action == \"list\":\n            config_ui.display_model_list()\n            \n        elif action == \"add\":\n            if not name or not endpoint:\n                console.print(\"❌ Add action requires --name and --endpoint\", style=\"red\")\n                raise typer.Exit(1)\n                \n            # Quick add without wizard\n            success = config_writer.add_custom_model(\n                name=name,\n                display_name=display_name or name.replace(\"-\", \" \").title(),\n                endpoint=endpoint,\n                api_key=api_key\n            )\n            \n            if success:\n                console.print(f\"✅ Model '{name}' added successfully!\", style=\"green\")\n            else:\n                console.print(f\"❌ Failed to add model '{name}'\", style=\"red\")\n                raise typer.Exit(1)\n                \n        elif action == \"remove\":\n            if not name:\n                console.print(\"❌ Remove action requires --name\", style=\"red\")\n                raise typer.Exit(1)\n                \n            success = config_writer.remove_custom_model(name)\n            \n            if success:\n                console.print(f\"✅ Model '{name}' removed successfully!\", style=\"green\")\n            else:\n                console.print(f\"❌ Failed to remove model '{name}'\", style=\"red\")\n                raise typer.Exit(1)\n                \n        elif action == \"test\":\n            if name:\n                # Test specific model\n                models = config_writer.list_custom_models()\n                model = next((m for m in models if m.get(\"name\") == name), None)\n                \n                if not model:\n                    console.print(f\"❌ Model '{name}' not found\", style=\"red\")\n                    raise typer.Exit(1)\n                    \n                config_ui._test_single_model(model)\n            else:\n                # Test all models\n                models = config_writer.list_custom_models()\n                if models:\n                    config_ui._test_all_models(models)\n                else:\n                    console.print(\"❌ No custom models found to test\", style=\"red\")\n                    \n        else:\n            console.print(f\"❌ Unknown action '{action}'. Use: list, add, remove, test\", style=\"red\")\n            raise typer.Exit(1)\n            \n    except Exception as e:\n        console.print(f\"❌ Models command error: {e}\", style=\"red\")\n        raise typer.Exit(1)\n\n\ndef main():\n    \"\"\"Main entry point for the CLI application.\"\"\"\n    try:\n        # If no arguments provided, start interactive mode\n        if len(sys.argv) == 1:\n            interactive()\n        else:\n            app()\n    except KeyboardInterrupt:\n        console.print(\"\\n👋 Goodbye!\", style=\"yellow\")\n        sys.exit(0)\n    except Exception as e:\n        console.print(f\"💥 Unexpected error: {e}\", style=\"red\")\n        sys.exit(1)\n\n\nif __name__ == \"__main__\":\n    main()\n", "metadata": {"source": "asobacode-cli//home/shingai/sort/asoba-code/src/asoba_code/cli.py", "language": "python", "complexity": "complex", "pattern_type": "conversation_flows", "features": {"has_fastmcp": false, "has_rich_ui": true, "has_routing": true, "has_cost_tracking": true, "has_claude_md": true, "function_count": 14, "class_count": 0, "tool_count": 0}, "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.75875, "syntax_valid": true, "completeness_score": 0.15000000000000002, "authenticity_score": 0.6, "asobacode_compliance": 0.7999999999999999}}
{"domain": "asobacode_mcp_business_analysis", "category": "asobacode_mcp_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate FastMCP server with multiple tools\n\n### EXPLORE Phase:\nAnalyze FastMCP requirements and tool specifications.\n\n### PLAN Phase:\nDesign MCP server with proper decorators and validation.\n\n### CODE Phase:", "completion": "\"\"\"\nFastMCP Complex inputs Example\n\nDemonstrates validation via pydantic with complex models.\n\"\"\"\n\nfrom typing import Annotated\n\nfrom pydantic import BaseModel, Field\n\nfrom fastmcp import FastMCP\n\nmcp = FastMCP(\"Shrimp Tank\")\n\n\nclass ShrimpTank(BaseModel):\n    class Shrimp(BaseModel):\n        name: Annotated[str, Field(max_length=10)]\n\n    shrimp: list[Shrimp]\n\n\n@mcp.tool\ndef name_shrimp(\n    tank: ShrimpTank,\n    # You can use pydantic Field in function signatures for validation.\n    extra_names: Annotated[list[str], Field(max_length=10)],\n) -> list[str]:\n    \"\"\"List all shrimp names in the tank\"\"\"\n    return [shrimp.name for shrimp in tank.shrimp] + extra_names\n", "metadata": {"source": "github.com/jlowin/fastmcp", "language": "python", "complexity": "simple", "pattern_type": "server_implementations", "features": {"tool_count": 0, "async_tools": 0, "type_hints": true, "error_handling": false, "validation": false, "imports": ["from typing import", "from pydantic import", "from fastmcp import"]}, "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.81125, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001, "asobacode_compliance": 0.7}}
{"domain": "asobacode_mcp_business_analysis", "category": "asobacode_mcp_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate FastMCP server with multiple tools\n\n### EXPLORE Phase:\nAnalyze FastMCP requirements and tool specifications.\n\n### PLAN Phase:\nDesign MCP server with proper decorators and validation.\n\n### CODE Phase:", "completion": "\"\"\"\nSimple example showing FastMCP server with command line argument support.\n\nUsage:\n    fastmcp run examples/config_server.py -- --name MyServer --debug\n\"\"\"\n\nimport argparse\n\nfrom fastmcp import FastMCP\n\nparser = argparse.ArgumentParser(description=\"Simple configurable MCP server\")\nparser.add_argument(\n    \"--name\", type=str, default=\"ConfigurableServer\", help=\"Server name\"\n)\nparser.add_argument(\"--debug\", action=\"store_true\", help=\"Enable debug mode\")\n\nargs = parser.parse_args()\n\nserver_name = args.name\nif args.debug:\n    server_name += \" (Debug)\"\n\nmcp = FastMCP(server_name)\n\n\n@mcp.tool\ndef get_status() -> dict[str, str | bool]:\n    \"\"\"Get the current server configuration and status.\"\"\"\n    return {\n        \"server_name\": server_name,\n        \"debug_mode\": args.debug,\n        \"original_name\": args.name,\n    }\n\n\n@mcp.tool\ndef echo_message(message: str) -> str:\n    \"\"\"Echo a message, with debug info if debug mode is enabled.\"\"\"\n    if args.debug:\n        return f\"[DEBUG] Echoing: {message}\"\n    return message\n\n\nif __name__ == \"__main__\":\n    mcp.run()\n", "metadata": {"source": "github.com/jlowin/fastmcp", "language": "python", "complexity": "simple", "pattern_type": "server_implementations", "features": {"tool_count": 0, "async_tools": 0, "type_hints": true, "error_handling": false, "validation": false, "imports": ["from fastmcp import"]}, "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.76, "syntax_valid": true, "completeness_score": 0.5, "authenticity_score": 0.8, "asobacode_compliance": 0.7}}
{"domain": "asobacode_mcp_business_analysis", "category": "asobacode_mcp_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate FastMCP server with multiple tools\n\n### EXPLORE Phase:\nAnalyze FastMCP requirements and tool specifications.\n\n### PLAN Phase:\nDesign MCP server with proper decorators and validation.\n\n### CODE Phase:", "completion": "\"\"\"\nFastMCP Desktop Example\n\nA simple example that exposes the desktop directory as a resource.\n\"\"\"\n\nfrom pathlib import Path\n\nfrom fastmcp import FastMCP\n\n# Create server\nmcp = FastMCP(\"Demo\")\n\n\n@mcp.resource(\"dir://desktop\")\ndef desktop() -> list[str]:\n    \"\"\"List the files in the user's desktop\"\"\"\n    desktop = Path.home() / \"Desktop\"\n    return [str(f) for f in desktop.iterdir()]\n\n\n# Add a dynamic greeting resource\n@mcp.resource(\"greeting://{name}\")\ndef get_greeting(name: str) -> str:\n    \"\"\"Get a personalized greeting\"\"\"\n    return f\"Hello, {name}!\"\n\n\n@mcp.tool\ndef add(a: int, b: int) -> int:\n    \"\"\"Add two numbers\"\"\"\n    return a + b\n", "metadata": {"source": "github.com/jlowin/fastmcp", "language": "python", "complexity": "simple", "pattern_type": "server_implementations", "features": {"tool_count": 0, "async_tools": 0, "type_hints": true, "error_handling": false, "validation": false, "imports": ["from pathlib import", "from fastmcp import"]}, "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.805, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8, "asobacode_compliance": 0.7}}
{"domain": "asobacode_mcp_business_analysis", "category": "asobacode_mcp_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate FastMCP server with multiple tools\n\n### EXPLORE Phase:\nAnalyze FastMCP requirements and tool specifications.\n\n### PLAN Phase:\nDesign MCP server with proper decorators and validation.\n\n### CODE Phase:", "completion": "\"\"\"\nFastMCP Echo Server\n\"\"\"\n\nfrom fastmcp import FastMCP\n\n# Create server\nmcp = FastMCP(\"Echo Server\")\n\n\n@mcp.tool\ndef echo_tool(text: str) -> str:\n    \"\"\"Echo the input text\"\"\"\n    return text\n\n\n@mcp.resource(\"echo://static\")\ndef echo_resource() -> str:\n    return \"Echo!\"\n\n\n@mcp.resource(\"echo://{text}\")\ndef echo_template(text: str) -> str:\n    \"\"\"Echo the input text\"\"\"\n    return f\"Echo: {text}\"\n\n\n@mcp.prompt(\"echo\")\ndef echo_prompt(text: str) -> str:\n    return text\n", "metadata": {"source": "github.com/jlowin/fastmcp", "language": "python", "complexity": "simple", "pattern_type": "server_implementations", "features": {"tool_count": 0, "async_tools": 0, "type_hints": true, "error_handling": false, "validation": false, "imports": ["from fastmcp import"]}, "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.8025, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8, "asobacode_compliance": 0.7}}
{"domain": "asobacode_mcp_business_analysis", "category": "asobacode_mcp_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate FastMCP server with multiple tools\n\n### EXPLORE Phase:\nAnalyze FastMCP requirements and tool specifications.\n\n### PLAN Phase:\nDesign MCP server with proper decorators and validation.\n\n### CODE Phase:", "completion": "import aiohttp\n\nfrom fastmcp.server import FastMCP\nfrom fastmcp.utilities.types import File\n\n\ndef create_server():\n    mcp = FastMCP(name=\"File Demo\", instructions=\"Get files from the server or URL.\")\n\n    @mcp.tool()\n    async def get_test_file_from_server(path: str = \"requirements.txt\") -> File:\n        \"\"\"\n        Get a test file from the server. If the path is not provided, it defaults to 'requirements.txt'.\n        \"\"\"\n        return File(path=path)\n\n    @mcp.tool()\n    async def get_test_pdf_from_url(\n        url: str = \"https://mozilla.github.io/pdf.js/web/compressed.tracemonkey-pldi-09.pdf\",\n    ) -> File:\n        \"\"\"\n        Get a test PDF file from a URL. If the URL is not provided, it defaults to a sample PDF.\n        \"\"\"\n        async with aiohttp.ClientSession() as session:\n            async with session.get(url) as response:\n                pdf_data = await response.read()\n                return File(data=pdf_data, format=\"pdf\")\n\n    return mcp\n\n\nif __name__ == \"__main__\":\n    create_server().run(transport=\"sse\", host=\"0.0.0.0\", port=8001, path=\"/sse\")\n", "metadata": {"source": "github.com/jlowin/fastmcp", "language": "python", "complexity": "simple", "pattern_type": "server_implementations", "features": {"tool_count": 0, "async_tools": 2, "type_hints": true, "error_handling": false, "validation": false, "imports": []}, "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.785, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8, "asobacode_compliance": 0.7}}
{"domain": "asobacode_mcp_business_analysis", "category": "asobacode_mcp_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate FastMCP server with multiple tools\n\n### EXPLORE Phase:\nAnalyze FastMCP requirements and tool specifications.\n\n### PLAN Phase:\nDesign MCP server with proper decorators and validation.\n\n### CODE Phase:", "completion": "\"\"\"\nThis example demonstrates how to set up and use an in-memory FastMCP proxy.\n\nIt illustrates the pattern:\n1. Create an original FastMCP server with some tools.\n2. Create a proxy FastMCP server using ``FastMCP.as_proxy(original_server)``.\n3. Use another Client to connect to the proxy server (in-memory) and interact with the original server's tools through the proxy.\n\"\"\"\n\nimport asyncio\n\nfrom mcp.types import TextContent\n\nfrom fastmcp import FastMCP\nfrom fastmcp.client import Client\n\n\nclass EchoService:\n    \"\"\"A simple service to demonstrate with\"\"\"\n\n    def echo(self, message: str) -> str:\n        return f\"Original server echoes: {message}\"\n\n\nasync def main():\n    print(\"--- In-Memory FastMCP Proxy Example ---\")\n    print(\"This example will walk through setting up an in-memory proxy.\")\n    print(\"-----------------------------------------\")\n\n    # 1. Original Server Setup\n    print(\n        \"\\nStep 1: Setting up the Original Server (OriginalEchoServer) with an 'echo' tool...\"\n    )\n    original_server = FastMCP(\"OriginalEchoServer\")\n    original_server.add_tool(EchoService().echo)\n    print(f\"   -> Original Server '{original_server.name}' created.\")\n\n    # 2. Proxy Server Creation\n    print(\"\\nStep 2: Creating the Proxy Server (InMemoryProxy)...\")\n    print(\n        f\"          (Using FastMCP.as_proxy to wrap '{original_server.name}' directly)\"\n    )\n    proxy_server = FastMCP.as_proxy(original_server, name=\"InMemoryProxy\")\n    print(\n        f\"   -> Proxy Server '{proxy_server.name}' created, proxying '{original_server.name}'.\"\n    )\n\n    # 3. Interacting via Proxy\n    print(\"\\nStep 3: Using a new Client to connect to the Proxy Server and interact...\")\n    async with Client(proxy_server) as final_client:\n        print(f\"   -> Successfully connected to proxy '{proxy_server.name}'.\")\n\n        print(\"\\n   Listing tools available via proxy...\")\n        tools = await final_client.list_tools()\n        if tools:\n            print(\"      Available Tools:\")\n            for tool in tools:\n                print(\n                    f\"        - {tool.name} (Description: {tool.description or 'N/A'})\"\n                )\n        else:\n            print(\"      No tools found via proxy.\")\n\n        message_to_echo = \"Hello, simplified proxied world!\"\n        print(f\"\\n   Calling 'echo' tool via proxy with message: '{message_to_echo}'\")\n        try:\n            result = await final_client.call_tool(\"echo\", {\"message\": message_to_echo})\n            if result and isinstance(result[0], TextContent):\n                print(f\"      Result from proxied 'echo' call: '{result[0].text}'\")\n            else:\n                print(\n                    f\"      Error: Unexpected result format from proxied 'echo' call: {result}\"\n                )\n        except Exception as e:\n            print(f\"      Error calling 'echo' tool via proxy: {e}\")\n\n    print(\"\\n-----------------------------------------\")\n    print(\"--- In-Memory Proxy Example Finished ---\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n", "metadata": {"source": "github.com/jlowin/fastmcp", "language": "python", "complexity": "medium", "pattern_type": "server_implementations", "features": {"tool_count": 0, "async_tools": 1, "type_hints": true, "error_handling": true, "validation": false, "imports": ["from fastmcp import"]}, "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.78, "syntax_valid": true, "completeness_score": 0.6, "authenticity_score": 0.8, "asobacode_compliance": 0.7}}
{"domain": "asobacode_mcp_business_analysis", "category": "asobacode_mcp_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate FastMCP server with multiple tools\n\n### EXPLORE Phase:\nAnalyze FastMCP requirements and tool specifications.\n\n### PLAN Phase:\nDesign MCP server with proper decorators and validation.\n\n### CODE Phase:", "completion": "# /// script\n# dependencies = [\"pydantic-ai-slim[openai]\", \"asyncpg\", \"numpy\", \"pgvector\", \"fastmcp\"]\n# ///\n\n# uv pip install 'pydantic-ai-slim[openai]' asyncpg numpy pgvector fastmcp\n\n\"\"\"\nRecursive memory system inspired by the human brain's clustering of memories.\nUses OpenAI's 'text-embedding-3-small' model and pgvector for efficient similarity search.\n\"\"\"\n\nimport asyncio\nimport math\nimport os\nfrom dataclasses import dataclass\nfrom datetime import datetime, timezone\nfrom pathlib import Path\nfrom typing import Annotated, Any, Self\n\nimport asyncpg\nimport numpy as np\nfrom openai import AsyncOpenAI\nfrom pgvector.asyncpg import register_vector  # Import register_vector\nfrom pydantic import BaseModel, Field\nfrom pydantic_ai import Agent\n\nfrom fastmcp import FastMCP\n\nMAX_DEPTH = 5\nSIMILARITY_THRESHOLD = 0.7\nDECAY_FACTOR = 0.99\nREINFORCEMENT_FACTOR = 1.1\n\nDEFAULT_LLM_MODEL = \"openai:gpt-4o\"\nDEFAULT_EMBEDDING_MODEL = \"text-embedding-3-small\"\n\nmcp = FastMCP(\n    \"memory\",\n    dependencies=[\n        \"pydantic-ai-slim[openai]\",\n        \"asyncpg\",\n        \"numpy\",\n        \"pgvector\",\n    ],\n)\n\nDB_DSN = \"postgresql://postgres:postgres@localhost:54320/memory_db\"\n# reset memory with rm ~/.fastmcp/{USER}/memory/*\nPROFILE_DIR = (\n    Path.home() / \".fastmcp\" / os.environ.get(\"USER\", \"anon\") / \"memory\"\n).resolve()\nPROFILE_DIR.mkdir(parents=True, exist_ok=True)\n\n\ndef cosine_similarity(a: list[float], b: list[float]) -> float:\n    a_array = np.array(a, dtype=np.float64)\n    b_array = np.array(b, dtype=np.float64)\n    return np.dot(a_array, b_array) / (\n        np.linalg.norm(a_array) * np.linalg.norm(b_array)\n    )\n\n\nasync def do_ai(\n    user_prompt: str,\n    system_prompt: str,\n    result_type: type | Annotated,\n    deps=None,\n) -> Any:\n    agent = Agent(\n        DEFAULT_LLM_MODEL,\n        system_prompt=system_prompt,\n        result_type=result_type,\n    )\n    result = await agent.run(user_prompt, deps=deps)\n    return result.data\n\n\n@dataclass\nclass Deps:\n    openai: AsyncOpenAI\n    pool: asyncpg.Pool\n\n\nasync def get_db_pool() -> asyncpg.Pool:\n    async def init(conn):\n        await conn.execute(\"CREATE EXTENSION IF NOT EXISTS vector;\")\n        await register_vector(conn)\n\n    pool = await asyncpg.create_pool(DB_DSN, init=init)\n    return pool\n\n\nclass MemoryNode(BaseModel):\n    id: int | None = None\n    content: str\n    summary: str = \"\"\n    importance: float = 1.0\n    access_count: int = 0\n    timestamp: float = Field(\n        default_factory=lambda: datetime.now(timezone.utc).timestamp()\n    )\n    embedding: list[float]\n\n    @classmethod\n    async def from_content(cls, content: str, deps: Deps):\n        embedding = await get_embedding(content, deps)\n        return cls(content=content, embedding=embedding)\n\n    async def save(self, deps: Deps):\n        async with deps.pool.acquire() as conn:\n            if self.id is None:\n                result = await conn.fetchrow(\n                    \"\"\"\n                    INSERT INTO memories (content, summary, importance, access_count, timestamp, embedding)\n                    VALUES ($1, $2, $3, $4, $5, $6)\n                    RETURNING id\n                    \"\"\",\n                    self.content,\n                    self.summary,\n                    self.importance,\n                    self.access_count,\n                    self.timestamp,\n                    self.embedding,\n                )\n                self.id = result[\"id\"]\n            else:\n                await conn.execute(\n                    \"\"\"\n                    UPDATE memories\n                    SET content = $1, summary = $2, importance = $3,\n                        access_count = $4, timestamp = $5, embedding = $6\n                    WHERE id = $7\n                    \"\"\",\n                    self.content,\n                    self.summary,\n                    self.importance,\n                    self.access_count,\n                    self.timestamp,\n                    self.embedding,\n                    self.id,\n                )\n\n    async def merge_with(self, other: Self, deps: Deps):\n        self.content = await do_ai(\n            f\"{self.content}\\n\\n{other.content}\",\n            \"Combine the following two texts into a single, coherent text.\",\n            str,\n            deps,\n        )\n        self.importance += other.importance\n        self.access_count += other.access_count\n        self.embedding = [(a + b) / 2 for a, b in zip(self.embedding, other.embedding)]\n        self.summary = await do_ai(\n            self.content, \"Summarize the following text concisely.\", str, deps\n        )\n        await self.save(deps)\n        # Delete the merged node from the database\n        if other.id is not None:\n            await delete_memory(other.id, deps)\n\n    def get_effective_importance(self):\n        return self.importance * (1 + math.log(self.access_count + 1))\n\n\nasync def get_embedding(text: str, deps: Deps) -> list[float]:\n    embedding_response = await deps.openai.embeddings.create(\n        input=text,\n        model=DEFAULT_EMBEDDING_MODEL,\n    )\n    return embedding_response.data[0].embedding\n\n\nasync def delete_memory(memory_id: int, deps: Deps):\n    async with deps.pool.acquire() as conn:\n        await conn.execute(\"DELETE FROM memories WHERE id = $1\", memory_id)\n\n\nasync def add_memory(content: str, deps: Deps):\n    new_memory = await MemoryNode.from_content(content, deps)\n    await new_memory.save(deps)\n\n    similar_memories = await find_similar_memories(new_memory.embedding, deps)\n    for memory in similar_memories:\n        if memory.id != new_memory.id:\n            await new_memory.merge_with(memory, deps)\n\n    await update_importance(new_memory.embedding, deps)\n\n    await prune_memories(deps)\n\n    return f\"Remembered: {content}\"\n\n\nasync def find_similar_memories(embedding: list[float], deps: Deps) -> list[MemoryNode]:\n    async with deps.pool.acquire() as conn:\n        rows = await conn.fetch(\n            \"\"\"\n            SELECT id, content, summary, importance, access_count, timestamp, embedding\n            FROM memories\n            ORDER BY embedding <-> $1\n            LIMIT 5\n            \"\"\",\n            embedding,\n        )\n    memories = [\n        MemoryNode(\n            id=row[\"id\"],\n            content=row[\"content\"],\n            summary=row[\"summary\"],\n            importance=row[\"importance\"],\n            access_count=row[\"access_count\"],\n            timestamp=row[\"timestamp\"],\n            embedding=row[\"embedding\"],\n        )\n        for row in rows\n    ]\n    return memories\n\n\nasync def update_importance(user_embedding: list[float], deps: Deps):\n    async with deps.pool.acquire() as conn:\n        rows = await conn.fetch(\n            \"SELECT id, importance, access_count, embedding FROM memories\"\n        )\n        for row in rows:\n            memory_embedding = row[\"embedding\"]\n            similarity = cosine_similarity(user_embedding, memory_embedding)\n            if similarity > SIMILARITY_THRESHOLD:\n                new_importance = row[\"importance\"] * REINFORCEMENT_FACTOR\n                new_access_count = row[\"access_count\"] + 1\n            else:\n                new_importance = row[\"importance\"] * DECAY_FACTOR\n                new_access_count = row[\"access_count\"]\n            await conn.execute(\n                \"\"\"\n                UPDATE memories\n                SET importance = $1, access_count = $2\n                WHERE id = $3\n                \"\"\",\n                new_importance,\n                new_access_count,\n                row[\"id\"],\n            )\n\n\nasync def prune_memories(deps: Deps):\n    async with deps.pool.acquire() as conn:\n        rows = await conn.fetch(\n            \"\"\"\n            SELECT id, importance, access_count\n            FROM memories\n            ORDER BY importance DESC\n            OFFSET $1\n            \"\"\",\n            MAX_DEPTH,\n        )\n        for row in rows:\n            await conn.execute(\"DELETE FROM memories WHERE id = $1\", row[\"id\"])\n\n\nasync def display_memory_tree(deps: Deps) -> str:\n    async with deps.pool.acquire() as conn:\n        rows = await conn.fetch(\n            \"\"\"\n            SELECT content, summary, importance, access_count\n            FROM memories\n            ORDER BY importance DESC\n            LIMIT $1\n            \"\"\",\n            MAX_DEPTH,\n        )\n    result = \"\"\n    for row in rows:\n        effective_importance = row[\"importance\"] * (\n            1 + math.log(row[\"access_count\"] + 1)\n        )\n        summary = row[\"summary\"] or row[\"content\"]\n        result += f\"- {summary} (Importance: {effective_importance:.2f})\\n\"\n    return result\n\n\n@mcp.tool\nasync def remember(\n    contents: list[str] = Field(\n        description=\"List of observations or memories to store\"\n    ),\n):\n    deps = Deps(openai=AsyncOpenAI(), pool=await get_db_pool())\n    try:\n        return \"\\n\".join(\n            await asyncio.gather(*[add_memory(content, deps) for content in contents])\n        )\n    finally:\n        await deps.pool.close()\n\n\n@mcp.tool\nasync def read_profile() -> str:\n    deps = Deps(openai=AsyncOpenAI(), pool=await get_db_pool())\n    profile = await display_memory_tree(deps)\n    await deps.pool.close()\n    return profile\n\n\nasync def initialize_database():\n    pool = await asyncpg.create_pool(\n        \"postgresql://postgres:postgres@localhost:54320/postgres\"\n    )\n    try:\n        async with pool.acquire() as conn:\n            await conn.execute(\"\"\"\n                SELECT pg_terminate_backend(pg_stat_activity.pid)\n                FROM pg_stat_activity\n                WHERE pg_stat_activity.datname = 'memory_db'\n                AND pid <> pg_backend_pid();\n            \"\"\")\n            await conn.execute(\"DROP DATABASE IF EXISTS memory_db;\")\n            await conn.execute(\"CREATE DATABASE memory_db;\")\n    finally:\n        await pool.close()\n\n    pool = await asyncpg.create_pool(DB_DSN)\n    try:\n        async with pool.acquire() as conn:\n            await conn.execute(\"CREATE EXTENSION IF NOT EXISTS vector;\")\n\n            await register_vector(conn)\n\n            await conn.execute(\"\"\"\n                CREATE TABLE IF NOT EXISTS memories (\n                    id SERIAL PRIMARY KEY,\n                    content TEXT NOT NULL,\n                    summary TEXT,\n                    importance REAL NOT NULL,\n                    access_count INT NOT NULL,\n                    timestamp DOUBLE PRECISION NOT NULL,\n                    embedding vector(1536) NOT NULL\n                );\n                CREATE INDEX IF NOT EXISTS idx_memories_embedding ON memories USING hnsw (embedding vector_l2_ops);\n            \"\"\")\n    finally:\n        await pool.close()\n\n\nif __name__ == \"__main__\":\n    asyncio.run(initialize_database())\n", "metadata": {"source": "github.com/jlowin/fastmcp", "language": "python", "complexity": "medium", "pattern_type": "server_implementations", "features": {"tool_count": 0, "async_tools": 16, "type_hints": true, "error_handling": true, "validation": false, "imports": ["from dataclasses import", "from datetime import", "from pathlib import", "from typing import", "from openai import", "from pydantic import", "from pydantic_ai import", "from fastmcp import"]}, "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.82, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.9, "asobacode_compliance": 0.7}}
{"domain": "asobacode_mcp_business_analysis", "category": "asobacode_mcp_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate FastMCP server with multiple tools for check_app_status functionality\n\n### EXPLORE Phase:\nAnalyze FastMCP requirements and tool specifications.\n\n### PLAN Phase:\nDesign MCP server with proper decorators and validation.\n\n### CODE Phase:", "completion": "\"\"\"Example of mounting FastMCP apps together.\n\nThis example demonstrates how to mount FastMCP apps together using\nthe ToolManager's import_tools functionality. It shows how to:\n\n1. Create sub-applications for different domains\n2. Mount those sub-applications to a main application\n3. Access tools with prefixed names and resources with prefixed URIs\n\"\"\"\n\nimport asyncio\nfrom urllib.parse import urlparse\n\nfrom fastmcp import FastMCP\n\n# Weather sub-application\nweather_app = FastMCP(\"Weather App\")\n\n\n@weather_app.tool\ndef get_weather_forecast(location: str) -> str:\n    \"\"\"Get the weather forecast for a location.\"\"\"\n    return f\"Sunny skies for {location} today!\"\n\n\n@weather_app.resource(uri=\"weather://forecast\")\nasync def weather_data():\n    \"\"\"Return current weather data.\"\"\"\n    return {\"temperature\": 72, \"conditions\": \"sunny\", \"humidity\": 45, \"wind_speed\": 5}\n\n\n# News sub-application\nnews_app = FastMCP(\"News App\")\n\n\n@news_app.tool\ndef get_news_headlines() -> list[str]:\n    \"\"\"Get the latest news headlines.\"\"\"\n    return [\n        \"Tech company launches new product\",\n        \"Local team wins championship\",\n        \"Scientists make breakthrough discovery\",\n    ]\n\n\n@news_app.resource(uri=\"news://headlines\")\nasync def news_data():\n    \"\"\"Return latest news data.\"\"\"\n    return {\n        \"top_story\": \"Breaking news: Important event happened\",\n        \"categories\": [\"politics\", \"sports\", \"technology\"],\n        \"sources\": [\"AP\", \"Reuters\", \"Local Sources\"],\n    }\n\n\n# Main application\napp = FastMCP(\n    \"Main App\", dependencies=[\"fastmcp@git+https://github.com/jlowin/fastmcp.git\"]\n)\n\n\n@app.tool\ndef check_app_status() -> dict[str, str]:\n    \"\"\"Check the status of the main application.\"\"\"\n    return {\"status\": \"running\", \"version\": \"1.0.0\", \"uptime\": \"3h 24m\"}\n\n\n# Mount sub-applications\napp.mount(server=weather_app, prefix=\"weather\")\n\napp.mount(server=news_app, prefix=\"news\")\n\n\nasync def get_server_details():\n    \"\"\"Print information about mounted resources.\"\"\"\n    # Print available tools\n    tools = await app.get_tools()\n    print(f\"\\nAvailable tools ({len(tools)}):\")\n    for _, tool in tools.items():\n        print(f\"  - {tool.name}: {tool.description}\")\n\n    # Print available resources\n    print(\"\\nAvailable resources:\")\n\n    # Distinguish between native and imported resources\n    # Native resources would be those directly in the main app (not prefixed)\n\n    resources = await app.get_resources()\n\n    native_resources = [\n        uri\n        for uri, _ in resources.items()\n        if urlparse(uri).netloc not in (\"weather\", \"news\")\n    ]\n\n    # Imported resources - categorized by source app\n    weather_resources = [\n        uri for uri, _ in resources.items() if urlparse(uri).netloc == \"weather\"\n    ]\n    news_resources = [\n        uri for uri, _ in resources.items() if urlparse(uri).netloc == \"news\"\n    ]\n\n    print(f\"  - Native app resources: {native_resources}\")\n    print(f\"  - Imported from weather app: {weather_resources}\")\n    print(f\"  - Imported from news app: {news_resources}\")\n\n    # Let's try to access resources using the prefixed URI\n    weather_data = await app._mcp_read_resource(uri=\"weather://weather/forecast\")\n    print(f\"\\nWeather data from prefixed URI: {weather_data}\")\n\n\nif __name__ == \"__main__\":\n    # First run our async function to display info\n    asyncio.run(get_server_details())\n\n    # Then start the server (uncomment to run the server)\n    app.run()\n", "metadata": {"source": "github.com/jlowin/fastmcp", "language": "python", "complexity": "simple", "pattern_type": "server_implementations", "features": {"tool_count": 1, "async_tools": 3, "type_hints": true, "error_handling": false, "validation": false, "imports": ["from fastmcp import"]}, "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.9225, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8, "asobacode_compliance": 0.8999999999999999}}
{"domain": "asobacode_mcp_business_analysis", "category": "asobacode_mcp_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate FastMCP server with multiple tools\n\n### EXPLORE Phase:\nAnalyze FastMCP requirements and tool specifications.\n\n### PLAN Phase:\nDesign MCP server with proper decorators and validation.\n\n### CODE Phase:", "completion": "\"\"\"\nExample of using sampling to request an LLM completion via Marvin\n\"\"\"\n\nimport asyncio\n\nimport marvin\nfrom mcp.types import TextContent\n\nfrom fastmcp import Client, Context, FastMCP\nfrom fastmcp.client.sampling import RequestContext, SamplingMessage, SamplingParams\n\n# -- Create a server that sends a sampling request to the LLM\n\nmcp = FastMCP(\"Sampling Example\")\n\n\n@mcp.tool\nasync def example_tool(prompt: str, context: Context) -> str:\n    \"\"\"Sample a completion from the LLM.\"\"\"\n    response = await context.sample(\n        \"What is your favorite programming language?\",\n        system_prompt=\"You love languages named after snakes.\",\n    )\n    assert isinstance(response, TextContent)\n    return response.text\n\n\n# -- Create a client that can handle the sampling request\n\n\nasync def sampling_fn(\n    messages: list[SamplingMessage],\n    params: SamplingParams,\n    ctx: RequestContext,\n) -> str:\n    return await marvin.say_async(\n        message=[m.content.text for m in messages],\n        instructions=params.systemPrompt,\n    )\n\n\nasync def run():\n    async with Client(mcp, sampling_handler=sampling_fn) as client:\n        result = await client.call_tool(\n            \"example_tool\", {\"prompt\": \"What is the best programming language?\"}\n        )\n        print(result)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(run())\n", "metadata": {"source": "github.com/jlowin/fastmcp", "language": "python", "complexity": "simple", "pattern_type": "server_implementations", "features": {"tool_count": 0, "async_tools": 3, "type_hints": true, "error_handling": false, "validation": false, "imports": ["from fastmcp import"]}, "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.76625, "syntax_valid": true, "completeness_score": 0.6, "authenticity_score": 0.8500000000000001, "asobacode_compliance": 0.7}}
{"domain": "asobacode_mcp_business_analysis", "category": "asobacode_mcp_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate FastMCP server with multiple tools\n\n### EXPLORE Phase:\nAnalyze FastMCP requirements and tool specifications.\n\n### PLAN Phase:\nDesign MCP server with proper decorators and validation.\n\n### CODE Phase:", "completion": "\"\"\"\nFastMCP Screenshot Example\n\nGive Claude a tool to capture and view screenshots.\n\"\"\"\n\nimport io\n\nfrom fastmcp import FastMCP\nfrom fastmcp.utilities.types import Image\n\n# Create server\nmcp = FastMCP(\"Screenshot Demo\", dependencies=[\"pyautogui\", \"Pillow\"])\n\n\n@mcp.tool\ndef take_screenshot() -> Image:\n    \"\"\"\n    Take a screenshot of the user's screen and return it as an image. Use\n    this tool anytime the user wants you to look at something they're doing.\n    \"\"\"\n    import pyautogui\n\n    buffer = io.BytesIO()\n\n    # if the file exceeds ~1MB, it will be rejected by Claude\n    screenshot = pyautogui.screenshot()\n    screenshot.convert(\"RGB\").save(buffer, format=\"JPEG\", quality=60, optimize=True)\n    return Image(data=buffer.getvalue(), format=\"jpeg\")\n", "metadata": {"source": "github.com/jlowin/fastmcp", "language": "python", "complexity": "simple", "pattern_type": "server_implementations", "features": {"tool_count": 0, "async_tools": 0, "type_hints": true, "error_handling": false, "validation": false, "imports": ["from fastmcp import"]}, "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.805, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8, "asobacode_compliance": 0.7}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate Rich terminal panel for AsobaCode conversation display\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "from typing import List\n\ntry:\n    import attr\nexcept ImportError:\n    print(\"This example requires attrs library\")\n    print(\"pip install attrs\")\n    raise SystemExit()\n\n\n@attr.define\nclass Point3D:\n    x: float\n    y: float\n    z: float = 0\n\n\n@attr.define\nclass Triangle:\n    point1: Point3D\n    point2: Point3D\n    point3: Point3D\n\n\n@attr.define\nclass Model:\n    name: str\n    triangles: List[Triangle] = attr.Factory(list)\n\n\nif __name__ == \"__main__\":\n    model = Model(\n        name=\"Alien#1\",\n        triangles=[\n            Triangle(\n                Point3D(x=20, y=50),\n                Point3D(x=50, y=15, z=-45.34),\n                Point3D(3.1426, 83.2323, -16),\n            )\n        ],\n    )\n\n    from rich.console import Console\n    from rich.pretty import Pretty\n    from rich.table import Column, Table\n    from rich.text import Text\n\n    console = Console()\n\n    table = Table(\"attrs *with* Rich\", Column(Text.from_markup(\"attrs *without* Rich\")))\n\n    table.add_row(Pretty(model), repr(model))\n    console.print(table)\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "medium", "pattern_type": "rich_panels", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.8462500000000002, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8, "asobacode_compliance": 0.8}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate Rich terminal panel for AsobaCode conversation display\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\nThis example shows how to display content in columns.\n\nThe data is pulled from https://randomuser.me\n\"\"\"\n\nimport json\nfrom urllib.request import urlopen\n\nfrom rich.console import Console\nfrom rich.columns import Columns\nfrom rich.panel import Panel\n\n\ndef get_content(user):\n    \"\"\"Extract text from user dict.\"\"\"\n    country = user[\"location\"][\"country\"]\n    name = f\"{user['name']['first']} {user['name']['last']}\"\n    return f\"[b]{name}[/b]\\n[yellow]{country}\"\n\n\nconsole = Console()\n\n\nusers = json.loads(urlopen(\"https://randomuser.me/api/?results=30\").read())[\"results\"]\nconsole.print(users, overflow=\"ignore\", crop=False)\nuser_renderables = [Panel(get_content(user), expand=True) for user in users]\nconsole.print(Columns(user_renderables))\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "simple", "pattern_type": "rich_panels", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.8337500000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8, "asobacode_compliance": 0.8}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate Rich terminal panel for AsobaCode conversation display\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\nA very minimal `cp` clone that displays a progress bar.\n\"\"\"\nimport os\nimport shutil\nimport sys\n\nfrom rich.progress import Progress\n\nif __name__ == \"__main__\":\n    if len(sys.argv) == 3:\n        with Progress() as progress:\n            desc = os.path.basename(sys.argv[1])\n            with progress.open(sys.argv[1], \"rb\", description=desc) as src:\n                with open(sys.argv[2], \"wb\") as dst:\n                    shutil.copyfileobj(src, dst)\n    else:\n        print(\"Copy a file with a progress bar.\")\n        print(\"Usage:\\n\\tpython cp_progress.py SRC DST\")\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "simple", "pattern_type": "rich_panels", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.7975, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001, "asobacode_compliance": 0.7}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate Rich terminal panel for AsobaCode conversation display\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\nA rudimentary URL downloader (like wget or curl) to demonstrate Rich progress bars.\n\"\"\"\n\nimport os.path\nimport sys\nfrom concurrent.futures import ThreadPoolExecutor\nimport signal\nfrom functools import partial\nfrom threading import Event\nfrom typing import Iterable\nfrom urllib.request import urlopen\n\nfrom rich.progress import (\n    BarColumn,\n    DownloadColumn,\n    Progress,\n    TaskID,\n    TextColumn,\n    TimeRemainingColumn,\n    TransferSpeedColumn,\n)\n\nprogress = Progress(\n    TextColumn(\"[bold blue]{task.fields[filename]}\", justify=\"right\"),\n    BarColumn(bar_width=None),\n    \"[progress.percentage]{task.percentage:>3.1f}%\",\n    \"•\",\n    DownloadColumn(),\n    \"•\",\n    TransferSpeedColumn(),\n    \"•\",\n    TimeRemainingColumn(),\n)\n\n\ndone_event = Event()\n\n\ndef handle_sigint(signum, frame):\n    done_event.set()\n\n\nsignal.signal(signal.SIGINT, handle_sigint)\n\n\ndef copy_url(task_id: TaskID, url: str, path: str) -> None:\n    \"\"\"Copy data from a url to a local file.\"\"\"\n    progress.console.log(f\"Requesting {url}\")\n    response = urlopen(url)\n    # This will break if the response doesn't contain content length\n    progress.update(task_id, total=int(response.info()[\"Content-length\"]))\n    with open(path, \"wb\") as dest_file:\n        progress.start_task(task_id)\n        for data in iter(partial(response.read, 32768), b\"\"):\n            dest_file.write(data)\n            progress.update(task_id, advance=len(data))\n            if done_event.is_set():\n                return\n    progress.console.log(f\"Downloaded {path}\")\n\n\ndef download(urls: Iterable[str], dest_dir: str):\n    \"\"\"Download multiple files to the given directory.\"\"\"\n\n    with progress:\n        with ThreadPoolExecutor(max_workers=4) as pool:\n            for url in urls:\n                filename = url.split(\"/\")[-1]\n                dest_path = os.path.join(dest_dir, filename)\n                task_id = progress.add_task(\"download\", filename=filename, start=False)\n                pool.submit(copy_url, task_id, url, dest_path)\n\n\nif __name__ == \"__main__\":\n    # Try with https://releases.ubuntu.com/noble/ubuntu-24.04-desktop-amd64.iso\n    # and https://releases.ubuntu.com/noble/ubuntu-24.04-live-server-amd64.iso\n    if sys.argv[1:]:\n        download(sys.argv[1:], \"./\")\n    else:\n        print(\"Usage:\\n\\tpython downloader.py URL1 URL2 URL3 (etc)\")\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "medium", "pattern_type": "rich_panels", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.7799999999999999, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001, "asobacode_compliance": 0.7}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate Rich terminal panel for AsobaCode conversation display\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\n\nDemonstrates how to create a dynamic group of progress bars,\nshowing multi-level progress for multiple tasks (installing apps in the example),\neach of which consisting of multiple steps.\n\n\"\"\"\n\nimport time\n\nfrom rich.console import Group\nfrom rich.panel import Panel\nfrom rich.live import Live\nfrom rich.progress import (\n    BarColumn,\n    Progress,\n    SpinnerColumn,\n    TextColumn,\n    TimeElapsedColumn,\n)\n\n\ndef run_steps(name, step_times, app_steps_task_id):\n    \"\"\"Run steps for a single app, and update corresponding progress bars.\"\"\"\n\n    for idx, step_time in enumerate(step_times):\n        # add progress bar for this step (time elapsed + spinner)\n        action = step_actions[idx]\n        step_task_id = step_progress.add_task(\"\", action=action, name=name)\n\n        # run steps, update progress\n        for _ in range(step_time):\n            time.sleep(0.5)\n            step_progress.update(step_task_id, advance=1)\n\n        # stop and hide progress bar for this step when done\n        step_progress.stop_task(step_task_id)\n        step_progress.update(step_task_id, visible=False)\n\n        # also update progress bar for current app when step is done\n        app_steps_progress.update(app_steps_task_id, advance=1)\n\n\n# progress bar for current app showing only elapsed time,\n# which will stay visible when app is installed\ncurrent_app_progress = Progress(\n    TimeElapsedColumn(),\n    TextColumn(\"{task.description}\"),\n)\n\n# progress bars for single app steps (will be hidden when step is done)\nstep_progress = Progress(\n    TextColumn(\"  \"),\n    TimeElapsedColumn(),\n    TextColumn(\"[bold purple]{task.fields[action]}\"),\n    SpinnerColumn(\"simpleDots\"),\n)\n# progress bar for current app (progress in steps)\napp_steps_progress = Progress(\n    TextColumn(\n        \"[bold blue]Progress for app {task.fields[name]}: {task.percentage:.0f}%\"\n    ),\n    BarColumn(),\n    TextColumn(\"({task.completed} of {task.total} steps done)\"),\n)\n# overall progress bar\noverall_progress = Progress(\n    TimeElapsedColumn(), BarColumn(), TextColumn(\"{task.description}\")\n)\n# group of progress bars;\n# some are always visible, others will disappear when progress is complete\nprogress_group = Group(\n    Panel(Group(current_app_progress, step_progress, app_steps_progress)),\n    overall_progress,\n)\n\n# tuple specifies how long each step takes for that app\nstep_actions = (\"downloading\", \"configuring\", \"building\", \"installing\")\napps = [\n    (\"one\", (2, 1, 4, 2)),\n    (\"two\", (1, 3, 8, 4)),\n    (\"three\", (2, 1, 3, 2)),\n]\n\n# create overall progress bar\noverall_task_id = overall_progress.add_task(\"\", total=len(apps))\n\n# use own live instance as context manager with group of progress bars,\n# which allows for running multiple different progress bars in parallel,\n# and dynamically showing/hiding them\nwith Live(progress_group):\n    for idx, (name, step_times) in enumerate(apps):\n        # update message on overall progress bar\n        top_descr = \"[bold #AAAAAA](%d out of %d apps installed)\" % (idx, len(apps))\n        overall_progress.update(overall_task_id, description=top_descr)\n\n        # add progress bar for steps of this app, and run the steps\n        current_task_id = current_app_progress.add_task(\"Installing app %s\" % name)\n        app_steps_task_id = app_steps_progress.add_task(\n            \"\", total=len(step_times), name=name\n        )\n        run_steps(name, step_times, app_steps_task_id)\n\n        # stop and hide steps progress bar for this specific app\n        app_steps_progress.update(app_steps_task_id, visible=False)\n        current_app_progress.stop_task(current_task_id)\n        current_app_progress.update(\n            current_task_id, description=\"[bold green]App %s installed!\" % name\n        )\n\n        # increase overall progress now this task is done\n        overall_progress.update(overall_task_id, advance=1)\n\n    # final update for message on overall progress bar\n    overall_progress.update(\n        overall_task_id, description=\"[bold green]%s apps installed, done!\" % len(apps)\n    )\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "complex", "pattern_type": "rich_panels", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.95625, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8, "asobacode_compliance": 1.0}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate Rich terminal panel for AsobaCode conversation display\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\nBasic example to show how to print an traceback of an exception\n\"\"\"\nfrom typing import List, Tuple\n\nfrom rich.console import Console\n\nconsole = Console()\n\n\ndef divide_by(number: float, divisor: float) -> float:\n    \"\"\"Divide any number by zero.\"\"\"\n    # Will throw a ZeroDivisionError if divisor is 0\n    result = number / divisor\n    return result\n\n\ndef divide_all(divides: List[Tuple[float, float]]) -> None:\n    \"\"\"Do something impossible every day.\"\"\"\n\n    for number, divisor in divides:\n        console.print(f\"dividing {number} by {divisor}\")\n        try:\n            result = divide_by(number, divisor)\n        except Exception:\n            console.print_exception(extra_lines=8, show_locals=True)\n        else:\n            console.print(f\" = {result}\")\n\n\nDIVIDES = [\n    (1000, 200),\n    (10000, 500),\n    (1, 0),\n    (0, 1000000),\n    (3.1427, 2),\n    (888, 0),\n    (2**32, 2**16),\n]\n\ndivide_all(DIVIDES)\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "simple", "pattern_type": "rich_panels", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.8537500000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8, "asobacode_compliance": 0.8}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate Rich terminal panel for AsobaCode conversation display\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\nDemonstrates export console output\n\"\"\"\n\nfrom rich.console import Console\nfrom rich.table import Table\n\nconsole = Console(record=True)\n\n\ndef print_table():\n    table = Table(title=\"Star Wars Movies\")\n\n    table.add_column(\"Released\", style=\"cyan\", no_wrap=True)\n    table.add_column(\"Title\", style=\"magenta\")\n    table.add_column(\"Box Office\", justify=\"right\", style=\"green\")\n\n    table.add_row(\"Dec 20, 2019\", \"Star Wars: The Rise of Skywalker\", \"$952,110,690\")\n    table.add_row(\"May 25, 2018\", \"Solo: A Star Wars Story\", \"$393,151,347\")\n    table.add_row(\"Dec 15, 2017\", \"Star Wars Ep. V111: The Last Jedi\", \"$1,332,539,889\")\n    table.add_row(\"Dec 16, 2016\", \"Rogue One: A Star Wars Story\", \"$1,332,439,889\")\n\n    console.print(table)\n\n\n# Prints table\nprint_table()\n\n# Get console output as text\nfile1 = \"table_export_plaintext.txt\"\ntext = console.export_text()\nwith open(file1, \"w\") as file:\n    file.write(text)\nprint(f\"Exported console output as plain text to {file1}\")\n\n# Calling print_table again because console output buffer\n# is flushed once export function is called\nprint_table()\n\n# Get console output as html\n# use clear=False so output is not flushed after export\nfile2 = \"table_export_html.html\"\nhtml = console.export_html(clear=False)\nwith open(file2, \"w\") as file:\n    file.write(html)\nprint(f\"Exported console output as html to {file2}\")\n\n# Export text output to table_export.txt\nfile3 = \"table_export_plaintext2.txt\"\nconsole.save_text(file3, clear=False)\nprint(f\"Exported console output as plain text to {file3}\")\n\n# Export html output to table_export.html\nfile4 = \"table_export_html2.html\"\nconsole.save_html(file4)\nprint(f\"Exported console output as html to {file4}\")\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "medium", "pattern_type": "rich_panels", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.8512500000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8, "asobacode_compliance": 0.8}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate Rich terminal panel for AsobaCode conversation display\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "from typing import List\n\ntry:\n    import attr\nexcept ImportError:\n    print(\"This example requires attrs library\")\n    print(\"pip install attrs\")\n    raise SystemExit()\n\n\n@attr.define\nclass Point3D:\n    x: float\n    y: float\n    z: float = 0\n\n\n@attr.define\nclass Triangle:\n    point1: Point3D\n    point2: Point3D\n    point3: Point3D\n\n\n@attr.define\nclass Model:\n    name: str\n    triangles: List[Triangle] = attr.Factory(list)\n\n\nif __name__ == \"__main__\":\n    model = Model(\n        name=\"Alien#1\",\n        triangles=[\n            Triangle(\n                Point3D(x=20, y=50),\n                Point3D(x=50, y=15, z=-45.34),\n                Point3D(3.1426, 83.2323, -16),\n            )\n        ],\n    )\n\n    from rich.console import Console\n    from rich.pretty import Pretty\n    from rich.table import Column, Table\n    from rich.text import Text\n\n    console = Console()\n\n    table = Table(\"attrs *with* Rich\", Column(Text.from_markup(\"attrs *without* Rich\")))\n\n    table.add_row(Pretty(model), repr(model))\n    console.print(table)\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "medium", "pattern_type": "rich_panels", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.8462500000000002, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8, "asobacode_compliance": 0.8}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate Rich terminal panel for AsobaCode conversation display\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\nThis example shows how to display content in columns.\n\nThe data is pulled from https://randomuser.me\n\"\"\"\n\nimport json\nfrom urllib.request import urlopen\n\nfrom rich.console import Console\nfrom rich.columns import Columns\nfrom rich.panel import Panel\n\n\ndef get_content(user):\n    \"\"\"Extract text from user dict.\"\"\"\n    country = user[\"location\"][\"country\"]\n    name = f\"{user['name']['first']} {user['name']['last']}\"\n    return f\"[b]{name}[/b]\\n[yellow]{country}\"\n\n\nconsole = Console()\n\n\nusers = json.loads(urlopen(\"https://randomuser.me/api/?results=30\").read())[\"results\"]\nconsole.print(users, overflow=\"ignore\", crop=False)\nuser_renderables = [Panel(get_content(user), expand=True) for user in users]\nconsole.print(Columns(user_renderables))\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "simple", "pattern_type": "rich_panels", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.8337500000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8, "asobacode_compliance": 0.8}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate Rich terminal panel for AsobaCode conversation display\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\nA very minimal `cp` clone that displays a progress bar.\n\"\"\"\nimport os\nimport shutil\nimport sys\n\nfrom rich.progress import Progress\n\nif __name__ == \"__main__\":\n    if len(sys.argv) == 3:\n        with Progress() as progress:\n            desc = os.path.basename(sys.argv[1])\n            with progress.open(sys.argv[1], \"rb\", description=desc) as src:\n                with open(sys.argv[2], \"wb\") as dst:\n                    shutil.copyfileobj(src, dst)\n    else:\n        print(\"Copy a file with a progress bar.\")\n        print(\"Usage:\\n\\tpython cp_progress.py SRC DST\")\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "simple", "pattern_type": "rich_panels", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.7975, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001, "asobacode_compliance": 0.7}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate Rich terminal panel for AsobaCode conversation display\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\nA rudimentary URL downloader (like wget or curl) to demonstrate Rich progress bars.\n\"\"\"\n\nimport os.path\nimport sys\nfrom concurrent.futures import ThreadPoolExecutor\nimport signal\nfrom functools import partial\nfrom threading import Event\nfrom typing import Iterable\nfrom urllib.request import urlopen\n\nfrom rich.progress import (\n    BarColumn,\n    DownloadColumn,\n    Progress,\n    TaskID,\n    TextColumn,\n    TimeRemainingColumn,\n    TransferSpeedColumn,\n)\n\nprogress = Progress(\n    TextColumn(\"[bold blue]{task.fields[filename]}\", justify=\"right\"),\n    BarColumn(bar_width=None),\n    \"[progress.percentage]{task.percentage:>3.1f}%\",\n    \"•\",\n    DownloadColumn(),\n    \"•\",\n    TransferSpeedColumn(),\n    \"•\",\n    TimeRemainingColumn(),\n)\n\n\ndone_event = Event()\n\n\ndef handle_sigint(signum, frame):\n    done_event.set()\n\n\nsignal.signal(signal.SIGINT, handle_sigint)\n\n\ndef copy_url(task_id: TaskID, url: str, path: str) -> None:\n    \"\"\"Copy data from a url to a local file.\"\"\"\n    progress.console.log(f\"Requesting {url}\")\n    response = urlopen(url)\n    # This will break if the response doesn't contain content length\n    progress.update(task_id, total=int(response.info()[\"Content-length\"]))\n    with open(path, \"wb\") as dest_file:\n        progress.start_task(task_id)\n        for data in iter(partial(response.read, 32768), b\"\"):\n            dest_file.write(data)\n            progress.update(task_id, advance=len(data))\n            if done_event.is_set():\n                return\n    progress.console.log(f\"Downloaded {path}\")\n\n\ndef download(urls: Iterable[str], dest_dir: str):\n    \"\"\"Download multiple files to the given directory.\"\"\"\n\n    with progress:\n        with ThreadPoolExecutor(max_workers=4) as pool:\n            for url in urls:\n                filename = url.split(\"/\")[-1]\n                dest_path = os.path.join(dest_dir, filename)\n                task_id = progress.add_task(\"download\", filename=filename, start=False)\n                pool.submit(copy_url, task_id, url, dest_path)\n\n\nif __name__ == \"__main__\":\n    # Try with https://releases.ubuntu.com/noble/ubuntu-24.04-desktop-amd64.iso\n    # and https://releases.ubuntu.com/noble/ubuntu-24.04-live-server-amd64.iso\n    if sys.argv[1:]:\n        download(sys.argv[1:], \"./\")\n    else:\n        print(\"Usage:\\n\\tpython downloader.py URL1 URL2 URL3 (etc)\")\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "medium", "pattern_type": "rich_panels", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.7799999999999999, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001, "asobacode_compliance": 0.7}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate Rich terminal panel for AsobaCode conversation display\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\n\nDemonstrates how to create a dynamic group of progress bars,\nshowing multi-level progress for multiple tasks (installing apps in the example),\neach of which consisting of multiple steps.\n\n\"\"\"\n\nimport time\n\nfrom rich.console import Group\nfrom rich.panel import Panel\nfrom rich.live import Live\nfrom rich.progress import (\n    BarColumn,\n    Progress,\n    SpinnerColumn,\n    TextColumn,\n    TimeElapsedColumn,\n)\n\n\ndef run_steps(name, step_times, app_steps_task_id):\n    \"\"\"Run steps for a single app, and update corresponding progress bars.\"\"\"\n\n    for idx, step_time in enumerate(step_times):\n        # add progress bar for this step (time elapsed + spinner)\n        action = step_actions[idx]\n        step_task_id = step_progress.add_task(\"\", action=action, name=name)\n\n        # run steps, update progress\n        for _ in range(step_time):\n            time.sleep(0.5)\n            step_progress.update(step_task_id, advance=1)\n\n        # stop and hide progress bar for this step when done\n        step_progress.stop_task(step_task_id)\n        step_progress.update(step_task_id, visible=False)\n\n        # also update progress bar for current app when step is done\n        app_steps_progress.update(app_steps_task_id, advance=1)\n\n\n# progress bar for current app showing only elapsed time,\n# which will stay visible when app is installed\ncurrent_app_progress = Progress(\n    TimeElapsedColumn(),\n    TextColumn(\"{task.description}\"),\n)\n\n# progress bars for single app steps (will be hidden when step is done)\nstep_progress = Progress(\n    TextColumn(\"  \"),\n    TimeElapsedColumn(),\n    TextColumn(\"[bold purple]{task.fields[action]}\"),\n    SpinnerColumn(\"simpleDots\"),\n)\n# progress bar for current app (progress in steps)\napp_steps_progress = Progress(\n    TextColumn(\n        \"[bold blue]Progress for app {task.fields[name]}: {task.percentage:.0f}%\"\n    ),\n    BarColumn(),\n    TextColumn(\"({task.completed} of {task.total} steps done)\"),\n)\n# overall progress bar\noverall_progress = Progress(\n    TimeElapsedColumn(), BarColumn(), TextColumn(\"{task.description}\")\n)\n# group of progress bars;\n# some are always visible, others will disappear when progress is complete\nprogress_group = Group(\n    Panel(Group(current_app_progress, step_progress, app_steps_progress)),\n    overall_progress,\n)\n\n# tuple specifies how long each step takes for that app\nstep_actions = (\"downloading\", \"configuring\", \"building\", \"installing\")\napps = [\n    (\"one\", (2, 1, 4, 2)),\n    (\"two\", (1, 3, 8, 4)),\n    (\"three\", (2, 1, 3, 2)),\n]\n\n# create overall progress bar\noverall_task_id = overall_progress.add_task(\"\", total=len(apps))\n\n# use own live instance as context manager with group of progress bars,\n# which allows for running multiple different progress bars in parallel,\n# and dynamically showing/hiding them\nwith Live(progress_group):\n    for idx, (name, step_times) in enumerate(apps):\n        # update message on overall progress bar\n        top_descr = \"[bold #AAAAAA](%d out of %d apps installed)\" % (idx, len(apps))\n        overall_progress.update(overall_task_id, description=top_descr)\n\n        # add progress bar for steps of this app, and run the steps\n        current_task_id = current_app_progress.add_task(\"Installing app %s\" % name)\n        app_steps_task_id = app_steps_progress.add_task(\n            \"\", total=len(step_times), name=name\n        )\n        run_steps(name, step_times, app_steps_task_id)\n\n        # stop and hide steps progress bar for this specific app\n        app_steps_progress.update(app_steps_task_id, visible=False)\n        current_app_progress.stop_task(current_task_id)\n        current_app_progress.update(\n            current_task_id, description=\"[bold green]App %s installed!\" % name\n        )\n\n        # increase overall progress now this task is done\n        overall_progress.update(overall_task_id, advance=1)\n\n    # final update for message on overall progress bar\n    overall_progress.update(\n        overall_task_id, description=\"[bold green]%s apps installed, done!\" % len(apps)\n    )\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "complex", "pattern_type": "rich_panels", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.95625, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8, "asobacode_compliance": 1.0}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate Rich terminal panel for AsobaCode conversation display\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\nBasic example to show how to print an traceback of an exception\n\"\"\"\nfrom typing import List, Tuple\n\nfrom rich.console import Console\n\nconsole = Console()\n\n\ndef divide_by(number: float, divisor: float) -> float:\n    \"\"\"Divide any number by zero.\"\"\"\n    # Will throw a ZeroDivisionError if divisor is 0\n    result = number / divisor\n    return result\n\n\ndef divide_all(divides: List[Tuple[float, float]]) -> None:\n    \"\"\"Do something impossible every day.\"\"\"\n\n    for number, divisor in divides:\n        console.print(f\"dividing {number} by {divisor}\")\n        try:\n            result = divide_by(number, divisor)\n        except Exception:\n            console.print_exception(extra_lines=8, show_locals=True)\n        else:\n            console.print(f\" = {result}\")\n\n\nDIVIDES = [\n    (1000, 200),\n    (10000, 500),\n    (1, 0),\n    (0, 1000000),\n    (3.1427, 2),\n    (888, 0),\n    (2**32, 2**16),\n]\n\ndivide_all(DIVIDES)\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "simple", "pattern_type": "rich_panels", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.8537500000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8, "asobacode_compliance": 0.8}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate Rich terminal panel for AsobaCode conversation display\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\nDemonstrates export console output\n\"\"\"\n\nfrom rich.console import Console\nfrom rich.table import Table\n\nconsole = Console(record=True)\n\n\ndef print_table():\n    table = Table(title=\"Star Wars Movies\")\n\n    table.add_column(\"Released\", style=\"cyan\", no_wrap=True)\n    table.add_column(\"Title\", style=\"magenta\")\n    table.add_column(\"Box Office\", justify=\"right\", style=\"green\")\n\n    table.add_row(\"Dec 20, 2019\", \"Star Wars: The Rise of Skywalker\", \"$952,110,690\")\n    table.add_row(\"May 25, 2018\", \"Solo: A Star Wars Story\", \"$393,151,347\")\n    table.add_row(\"Dec 15, 2017\", \"Star Wars Ep. V111: The Last Jedi\", \"$1,332,539,889\")\n    table.add_row(\"Dec 16, 2016\", \"Rogue One: A Star Wars Story\", \"$1,332,439,889\")\n\n    console.print(table)\n\n\n# Prints table\nprint_table()\n\n# Get console output as text\nfile1 = \"table_export_plaintext.txt\"\ntext = console.export_text()\nwith open(file1, \"w\") as file:\n    file.write(text)\nprint(f\"Exported console output as plain text to {file1}\")\n\n# Calling print_table again because console output buffer\n# is flushed once export function is called\nprint_table()\n\n# Get console output as html\n# use clear=False so output is not flushed after export\nfile2 = \"table_export_html.html\"\nhtml = console.export_html(clear=False)\nwith open(file2, \"w\") as file:\n    file.write(html)\nprint(f\"Exported console output as html to {file2}\")\n\n# Export text output to table_export.txt\nfile3 = \"table_export_plaintext2.txt\"\nconsole.save_text(file3, clear=False)\nprint(f\"Exported console output as plain text to {file3}\")\n\n# Export html output to table_export.html\nfile4 = \"table_export_html2.html\"\nconsole.save_html(file4)\nprint(f\"Exported console output as html to {file4}\")\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "medium", "pattern_type": "rich_panels", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.8512500000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8, "asobacode_compliance": 0.8}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate thinking animation with token tracking for AsobaCode\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\nA very minimal `cp` clone that displays a progress bar.\n\"\"\"\nimport os\nimport shutil\nimport sys\n\nfrom rich.progress import Progress\n\nif __name__ == \"__main__\":\n    if len(sys.argv) == 3:\n        with Progress() as progress:\n            desc = os.path.basename(sys.argv[1])\n            with progress.open(sys.argv[1], \"rb\", description=desc) as src:\n                with open(sys.argv[2], \"wb\") as dst:\n                    shutil.copyfileobj(src, dst)\n    else:\n        print(\"Copy a file with a progress bar.\")\n        print(\"Usage:\\n\\tpython cp_progress.py SRC DST\")\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "simple", "pattern_type": "animations", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.7975, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001, "asobacode_compliance": 0.7}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate thinking animation with token tracking for AsobaCode\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\nA rudimentary URL downloader (like wget or curl) to demonstrate Rich progress bars.\n\"\"\"\n\nimport os.path\nimport sys\nfrom concurrent.futures import ThreadPoolExecutor\nimport signal\nfrom functools import partial\nfrom threading import Event\nfrom typing import Iterable\nfrom urllib.request import urlopen\n\nfrom rich.progress import (\n    BarColumn,\n    DownloadColumn,\n    Progress,\n    TaskID,\n    TextColumn,\n    TimeRemainingColumn,\n    TransferSpeedColumn,\n)\n\nprogress = Progress(\n    TextColumn(\"[bold blue]{task.fields[filename]}\", justify=\"right\"),\n    BarColumn(bar_width=None),\n    \"[progress.percentage]{task.percentage:>3.1f}%\",\n    \"•\",\n    DownloadColumn(),\n    \"•\",\n    TransferSpeedColumn(),\n    \"•\",\n    TimeRemainingColumn(),\n)\n\n\ndone_event = Event()\n\n\ndef handle_sigint(signum, frame):\n    done_event.set()\n\n\nsignal.signal(signal.SIGINT, handle_sigint)\n\n\ndef copy_url(task_id: TaskID, url: str, path: str) -> None:\n    \"\"\"Copy data from a url to a local file.\"\"\"\n    progress.console.log(f\"Requesting {url}\")\n    response = urlopen(url)\n    # This will break if the response doesn't contain content length\n    progress.update(task_id, total=int(response.info()[\"Content-length\"]))\n    with open(path, \"wb\") as dest_file:\n        progress.start_task(task_id)\n        for data in iter(partial(response.read, 32768), b\"\"):\n            dest_file.write(data)\n            progress.update(task_id, advance=len(data))\n            if done_event.is_set():\n                return\n    progress.console.log(f\"Downloaded {path}\")\n\n\ndef download(urls: Iterable[str], dest_dir: str):\n    \"\"\"Download multiple files to the given directory.\"\"\"\n\n    with progress:\n        with ThreadPoolExecutor(max_workers=4) as pool:\n            for url in urls:\n                filename = url.split(\"/\")[-1]\n                dest_path = os.path.join(dest_dir, filename)\n                task_id = progress.add_task(\"download\", filename=filename, start=False)\n                pool.submit(copy_url, task_id, url, dest_path)\n\n\nif __name__ == \"__main__\":\n    # Try with https://releases.ubuntu.com/noble/ubuntu-24.04-desktop-amd64.iso\n    # and https://releases.ubuntu.com/noble/ubuntu-24.04-live-server-amd64.iso\n    if sys.argv[1:]:\n        download(sys.argv[1:], \"./\")\n    else:\n        print(\"Usage:\\n\\tpython downloader.py URL1 URL2 URL3 (etc)\")\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "medium", "pattern_type": "animations", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.7799999999999999, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001, "asobacode_compliance": 0.7}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate thinking animation with token tracking for AsobaCode\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\n\nDemonstrates how to create a dynamic group of progress bars,\nshowing multi-level progress for multiple tasks (installing apps in the example),\neach of which consisting of multiple steps.\n\n\"\"\"\n\nimport time\n\nfrom rich.console import Group\nfrom rich.panel import Panel\nfrom rich.live import Live\nfrom rich.progress import (\n    BarColumn,\n    Progress,\n    SpinnerColumn,\n    TextColumn,\n    TimeElapsedColumn,\n)\n\n\ndef run_steps(name, step_times, app_steps_task_id):\n    \"\"\"Run steps for a single app, and update corresponding progress bars.\"\"\"\n\n    for idx, step_time in enumerate(step_times):\n        # add progress bar for this step (time elapsed + spinner)\n        action = step_actions[idx]\n        step_task_id = step_progress.add_task(\"\", action=action, name=name)\n\n        # run steps, update progress\n        for _ in range(step_time):\n            time.sleep(0.5)\n            step_progress.update(step_task_id, advance=1)\n\n        # stop and hide progress bar for this step when done\n        step_progress.stop_task(step_task_id)\n        step_progress.update(step_task_id, visible=False)\n\n        # also update progress bar for current app when step is done\n        app_steps_progress.update(app_steps_task_id, advance=1)\n\n\n# progress bar for current app showing only elapsed time,\n# which will stay visible when app is installed\ncurrent_app_progress = Progress(\n    TimeElapsedColumn(),\n    TextColumn(\"{task.description}\"),\n)\n\n# progress bars for single app steps (will be hidden when step is done)\nstep_progress = Progress(\n    TextColumn(\"  \"),\n    TimeElapsedColumn(),\n    TextColumn(\"[bold purple]{task.fields[action]}\"),\n    SpinnerColumn(\"simpleDots\"),\n)\n# progress bar for current app (progress in steps)\napp_steps_progress = Progress(\n    TextColumn(\n        \"[bold blue]Progress for app {task.fields[name]}: {task.percentage:.0f}%\"\n    ),\n    BarColumn(),\n    TextColumn(\"({task.completed} of {task.total} steps done)\"),\n)\n# overall progress bar\noverall_progress = Progress(\n    TimeElapsedColumn(), BarColumn(), TextColumn(\"{task.description}\")\n)\n# group of progress bars;\n# some are always visible, others will disappear when progress is complete\nprogress_group = Group(\n    Panel(Group(current_app_progress, step_progress, app_steps_progress)),\n    overall_progress,\n)\n\n# tuple specifies how long each step takes for that app\nstep_actions = (\"downloading\", \"configuring\", \"building\", \"installing\")\napps = [\n    (\"one\", (2, 1, 4, 2)),\n    (\"two\", (1, 3, 8, 4)),\n    (\"three\", (2, 1, 3, 2)),\n]\n\n# create overall progress bar\noverall_task_id = overall_progress.add_task(\"\", total=len(apps))\n\n# use own live instance as context manager with group of progress bars,\n# which allows for running multiple different progress bars in parallel,\n# and dynamically showing/hiding them\nwith Live(progress_group):\n    for idx, (name, step_times) in enumerate(apps):\n        # update message on overall progress bar\n        top_descr = \"[bold #AAAAAA](%d out of %d apps installed)\" % (idx, len(apps))\n        overall_progress.update(overall_task_id, description=top_descr)\n\n        # add progress bar for steps of this app, and run the steps\n        current_task_id = current_app_progress.add_task(\"Installing app %s\" % name)\n        app_steps_task_id = app_steps_progress.add_task(\n            \"\", total=len(step_times), name=name\n        )\n        run_steps(name, step_times, app_steps_task_id)\n\n        # stop and hide steps progress bar for this specific app\n        app_steps_progress.update(app_steps_task_id, visible=False)\n        current_app_progress.stop_task(current_task_id)\n        current_app_progress.update(\n            current_task_id, description=\"[bold green]App %s installed!\" % name\n        )\n\n        # increase overall progress now this task is done\n        overall_progress.update(overall_task_id, advance=1)\n\n    # final update for message on overall progress bar\n    overall_progress.update(\n        overall_task_id, description=\"[bold green]%s apps installed, done!\" % len(apps)\n    )\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "complex", "pattern_type": "animations", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.95625, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8, "asobacode_compliance": 1.0}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate thinking animation with token tracking for AsobaCode\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\nA very minimal `cp` clone that displays a progress bar.\n\"\"\"\nimport os\nimport shutil\nimport sys\n\nfrom rich.progress import Progress\n\nif __name__ == \"__main__\":\n    if len(sys.argv) == 3:\n        with Progress() as progress:\n            desc = os.path.basename(sys.argv[1])\n            with progress.open(sys.argv[1], \"rb\", description=desc) as src:\n                with open(sys.argv[2], \"wb\") as dst:\n                    shutil.copyfileobj(src, dst)\n    else:\n        print(\"Copy a file with a progress bar.\")\n        print(\"Usage:\\n\\tpython cp_progress.py SRC DST\")\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "simple", "pattern_type": "animations", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.7975, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001, "asobacode_compliance": 0.7}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate thinking animation with token tracking for AsobaCode\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\nA rudimentary URL downloader (like wget or curl) to demonstrate Rich progress bars.\n\"\"\"\n\nimport os.path\nimport sys\nfrom concurrent.futures import ThreadPoolExecutor\nimport signal\nfrom functools import partial\nfrom threading import Event\nfrom typing import Iterable\nfrom urllib.request import urlopen\n\nfrom rich.progress import (\n    BarColumn,\n    DownloadColumn,\n    Progress,\n    TaskID,\n    TextColumn,\n    TimeRemainingColumn,\n    TransferSpeedColumn,\n)\n\nprogress = Progress(\n    TextColumn(\"[bold blue]{task.fields[filename]}\", justify=\"right\"),\n    BarColumn(bar_width=None),\n    \"[progress.percentage]{task.percentage:>3.1f}%\",\n    \"•\",\n    DownloadColumn(),\n    \"•\",\n    TransferSpeedColumn(),\n    \"•\",\n    TimeRemainingColumn(),\n)\n\n\ndone_event = Event()\n\n\ndef handle_sigint(signum, frame):\n    done_event.set()\n\n\nsignal.signal(signal.SIGINT, handle_sigint)\n\n\ndef copy_url(task_id: TaskID, url: str, path: str) -> None:\n    \"\"\"Copy data from a url to a local file.\"\"\"\n    progress.console.log(f\"Requesting {url}\")\n    response = urlopen(url)\n    # This will break if the response doesn't contain content length\n    progress.update(task_id, total=int(response.info()[\"Content-length\"]))\n    with open(path, \"wb\") as dest_file:\n        progress.start_task(task_id)\n        for data in iter(partial(response.read, 32768), b\"\"):\n            dest_file.write(data)\n            progress.update(task_id, advance=len(data))\n            if done_event.is_set():\n                return\n    progress.console.log(f\"Downloaded {path}\")\n\n\ndef download(urls: Iterable[str], dest_dir: str):\n    \"\"\"Download multiple files to the given directory.\"\"\"\n\n    with progress:\n        with ThreadPoolExecutor(max_workers=4) as pool:\n            for url in urls:\n                filename = url.split(\"/\")[-1]\n                dest_path = os.path.join(dest_dir, filename)\n                task_id = progress.add_task(\"download\", filename=filename, start=False)\n                pool.submit(copy_url, task_id, url, dest_path)\n\n\nif __name__ == \"__main__\":\n    # Try with https://releases.ubuntu.com/noble/ubuntu-24.04-desktop-amd64.iso\n    # and https://releases.ubuntu.com/noble/ubuntu-24.04-live-server-amd64.iso\n    if sys.argv[1:]:\n        download(sys.argv[1:], \"./\")\n    else:\n        print(\"Usage:\\n\\tpython downloader.py URL1 URL2 URL3 (etc)\")\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "medium", "pattern_type": "animations", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.7799999999999999, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001, "asobacode_compliance": 0.7}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate thinking animation with token tracking for AsobaCode\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\n\nDemonstrates how to create a dynamic group of progress bars,\nshowing multi-level progress for multiple tasks (installing apps in the example),\neach of which consisting of multiple steps.\n\n\"\"\"\n\nimport time\n\nfrom rich.console import Group\nfrom rich.panel import Panel\nfrom rich.live import Live\nfrom rich.progress import (\n    BarColumn,\n    Progress,\n    SpinnerColumn,\n    TextColumn,\n    TimeElapsedColumn,\n)\n\n\ndef run_steps(name, step_times, app_steps_task_id):\n    \"\"\"Run steps for a single app, and update corresponding progress bars.\"\"\"\n\n    for idx, step_time in enumerate(step_times):\n        # add progress bar for this step (time elapsed + spinner)\n        action = step_actions[idx]\n        step_task_id = step_progress.add_task(\"\", action=action, name=name)\n\n        # run steps, update progress\n        for _ in range(step_time):\n            time.sleep(0.5)\n            step_progress.update(step_task_id, advance=1)\n\n        # stop and hide progress bar for this step when done\n        step_progress.stop_task(step_task_id)\n        step_progress.update(step_task_id, visible=False)\n\n        # also update progress bar for current app when step is done\n        app_steps_progress.update(app_steps_task_id, advance=1)\n\n\n# progress bar for current app showing only elapsed time,\n# which will stay visible when app is installed\ncurrent_app_progress = Progress(\n    TimeElapsedColumn(),\n    TextColumn(\"{task.description}\"),\n)\n\n# progress bars for single app steps (will be hidden when step is done)\nstep_progress = Progress(\n    TextColumn(\"  \"),\n    TimeElapsedColumn(),\n    TextColumn(\"[bold purple]{task.fields[action]}\"),\n    SpinnerColumn(\"simpleDots\"),\n)\n# progress bar for current app (progress in steps)\napp_steps_progress = Progress(\n    TextColumn(\n        \"[bold blue]Progress for app {task.fields[name]}: {task.percentage:.0f}%\"\n    ),\n    BarColumn(),\n    TextColumn(\"({task.completed} of {task.total} steps done)\"),\n)\n# overall progress bar\noverall_progress = Progress(\n    TimeElapsedColumn(), BarColumn(), TextColumn(\"{task.description}\")\n)\n# group of progress bars;\n# some are always visible, others will disappear when progress is complete\nprogress_group = Group(\n    Panel(Group(current_app_progress, step_progress, app_steps_progress)),\n    overall_progress,\n)\n\n# tuple specifies how long each step takes for that app\nstep_actions = (\"downloading\", \"configuring\", \"building\", \"installing\")\napps = [\n    (\"one\", (2, 1, 4, 2)),\n    (\"two\", (1, 3, 8, 4)),\n    (\"three\", (2, 1, 3, 2)),\n]\n\n# create overall progress bar\noverall_task_id = overall_progress.add_task(\"\", total=len(apps))\n\n# use own live instance as context manager with group of progress bars,\n# which allows for running multiple different progress bars in parallel,\n# and dynamically showing/hiding them\nwith Live(progress_group):\n    for idx, (name, step_times) in enumerate(apps):\n        # update message on overall progress bar\n        top_descr = \"[bold #AAAAAA](%d out of %d apps installed)\" % (idx, len(apps))\n        overall_progress.update(overall_task_id, description=top_descr)\n\n        # add progress bar for steps of this app, and run the steps\n        current_task_id = current_app_progress.add_task(\"Installing app %s\" % name)\n        app_steps_task_id = app_steps_progress.add_task(\n            \"\", total=len(step_times), name=name\n        )\n        run_steps(name, step_times, app_steps_task_id)\n\n        # stop and hide steps progress bar for this specific app\n        app_steps_progress.update(app_steps_task_id, visible=False)\n        current_app_progress.stop_task(current_task_id)\n        current_app_progress.update(\n            current_task_id, description=\"[bold green]App %s installed!\" % name\n        )\n\n        # increase overall progress now this task is done\n        overall_progress.update(overall_task_id, advance=1)\n\n    # final update for message on overall progress bar\n    overall_progress.update(\n        overall_task_id, description=\"[bold green]%s apps installed, done!\" % len(apps)\n    )\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "complex", "pattern_type": "animations", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.95625, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8, "asobacode_compliance": 1.0}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate Rich table for displaying AsobaCode server status\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "from typing import List\n\ntry:\n    import attr\nexcept ImportError:\n    print(\"This example requires attrs library\")\n    print(\"pip install attrs\")\n    raise SystemExit()\n\n\n@attr.define\nclass Point3D:\n    x: float\n    y: float\n    z: float = 0\n\n\n@attr.define\nclass Triangle:\n    point1: Point3D\n    point2: Point3D\n    point3: Point3D\n\n\n@attr.define\nclass Model:\n    name: str\n    triangles: List[Triangle] = attr.Factory(list)\n\n\nif __name__ == \"__main__\":\n    model = Model(\n        name=\"Alien#1\",\n        triangles=[\n            Triangle(\n                Point3D(x=20, y=50),\n                Point3D(x=50, y=15, z=-45.34),\n                Point3D(3.1426, 83.2323, -16),\n            )\n        ],\n    )\n\n    from rich.console import Console\n    from rich.pretty import Pretty\n    from rich.table import Column, Table\n    from rich.text import Text\n\n    console = Console()\n\n    table = Table(\"attrs *with* Rich\", Column(Text.from_markup(\"attrs *without* Rich\")))\n\n    table.add_row(Pretty(model), repr(model))\n    console.print(table)\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "medium", "pattern_type": "tables", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.8462500000000002, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8, "asobacode_compliance": 0.8}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate Rich table for displaying AsobaCode server status\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\nDemonstrates export console output\n\"\"\"\n\nfrom rich.console import Console\nfrom rich.table import Table\n\nconsole = Console(record=True)\n\n\ndef print_table():\n    table = Table(title=\"Star Wars Movies\")\n\n    table.add_column(\"Released\", style=\"cyan\", no_wrap=True)\n    table.add_column(\"Title\", style=\"magenta\")\n    table.add_column(\"Box Office\", justify=\"right\", style=\"green\")\n\n    table.add_row(\"Dec 20, 2019\", \"Star Wars: The Rise of Skywalker\", \"$952,110,690\")\n    table.add_row(\"May 25, 2018\", \"Solo: A Star Wars Story\", \"$393,151,347\")\n    table.add_row(\"Dec 15, 2017\", \"Star Wars Ep. V111: The Last Jedi\", \"$1,332,539,889\")\n    table.add_row(\"Dec 16, 2016\", \"Rogue One: A Star Wars Story\", \"$1,332,439,889\")\n\n    console.print(table)\n\n\n# Prints table\nprint_table()\n\n# Get console output as text\nfile1 = \"table_export_plaintext.txt\"\ntext = console.export_text()\nwith open(file1, \"w\") as file:\n    file.write(text)\nprint(f\"Exported console output as plain text to {file1}\")\n\n# Calling print_table again because console output buffer\n# is flushed once export function is called\nprint_table()\n\n# Get console output as html\n# use clear=False so output is not flushed after export\nfile2 = \"table_export_html.html\"\nhtml = console.export_html(clear=False)\nwith open(file2, \"w\") as file:\n    file.write(html)\nprint(f\"Exported console output as html to {file2}\")\n\n# Export text output to table_export.txt\nfile3 = \"table_export_plaintext2.txt\"\nconsole.save_text(file3, clear=False)\nprint(f\"Exported console output as plain text to {file3}\")\n\n# Export html output to table_export.html\nfile4 = \"table_export_html2.html\"\nconsole.save_html(file4)\nprint(f\"Exported console output as html to {file4}\")\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "medium", "pattern_type": "tables", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.8512500000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8, "asobacode_compliance": 0.8}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate Rich table for displaying AsobaCode server status\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "from typing import List\n\ntry:\n    import attr\nexcept ImportError:\n    print(\"This example requires attrs library\")\n    print(\"pip install attrs\")\n    raise SystemExit()\n\n\n@attr.define\nclass Point3D:\n    x: float\n    y: float\n    z: float = 0\n\n\n@attr.define\nclass Triangle:\n    point1: Point3D\n    point2: Point3D\n    point3: Point3D\n\n\n@attr.define\nclass Model:\n    name: str\n    triangles: List[Triangle] = attr.Factory(list)\n\n\nif __name__ == \"__main__\":\n    model = Model(\n        name=\"Alien#1\",\n        triangles=[\n            Triangle(\n                Point3D(x=20, y=50),\n                Point3D(x=50, y=15, z=-45.34),\n                Point3D(3.1426, 83.2323, -16),\n            )\n        ],\n    )\n\n    from rich.console import Console\n    from rich.pretty import Pretty\n    from rich.table import Column, Table\n    from rich.text import Text\n\n    console = Console()\n\n    table = Table(\"attrs *with* Rich\", Column(Text.from_markup(\"attrs *without* Rich\")))\n\n    table.add_row(Pretty(model), repr(model))\n    console.print(table)\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "medium", "pattern_type": "tables", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.8462500000000002, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8, "asobacode_compliance": 0.8}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate Rich table for displaying AsobaCode server status\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\nDemonstrates export console output\n\"\"\"\n\nfrom rich.console import Console\nfrom rich.table import Table\n\nconsole = Console(record=True)\n\n\ndef print_table():\n    table = Table(title=\"Star Wars Movies\")\n\n    table.add_column(\"Released\", style=\"cyan\", no_wrap=True)\n    table.add_column(\"Title\", style=\"magenta\")\n    table.add_column(\"Box Office\", justify=\"right\", style=\"green\")\n\n    table.add_row(\"Dec 20, 2019\", \"Star Wars: The Rise of Skywalker\", \"$952,110,690\")\n    table.add_row(\"May 25, 2018\", \"Solo: A Star Wars Story\", \"$393,151,347\")\n    table.add_row(\"Dec 15, 2017\", \"Star Wars Ep. V111: The Last Jedi\", \"$1,332,539,889\")\n    table.add_row(\"Dec 16, 2016\", \"Rogue One: A Star Wars Story\", \"$1,332,439,889\")\n\n    console.print(table)\n\n\n# Prints table\nprint_table()\n\n# Get console output as text\nfile1 = \"table_export_plaintext.txt\"\ntext = console.export_text()\nwith open(file1, \"w\") as file:\n    file.write(text)\nprint(f\"Exported console output as plain text to {file1}\")\n\n# Calling print_table again because console output buffer\n# is flushed once export function is called\nprint_table()\n\n# Get console output as html\n# use clear=False so output is not flushed after export\nfile2 = \"table_export_html.html\"\nhtml = console.export_html(clear=False)\nwith open(file2, \"w\") as file:\n    file.write(html)\nprint(f\"Exported console output as html to {file2}\")\n\n# Export text output to table_export.txt\nfile3 = \"table_export_plaintext2.txt\"\nconsole.save_text(file3, clear=False)\nprint(f\"Exported console output as plain text to {file3}\")\n\n# Export html output to table_export.html\nfile4 = \"table_export_html2.html\"\nconsole.save_html(file4)\nprint(f\"Exported console output as html to {file4}\")\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "medium", "pattern_type": "tables", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.8512500000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8, "asobacode_compliance": 0.8}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate interactive terminal prompt for AsobaCode CLI\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\nA rudimentary URL downloader (like wget or curl) to demonstrate Rich progress bars.\n\"\"\"\n\nimport os.path\nimport sys\nfrom concurrent.futures import ThreadPoolExecutor\nimport signal\nfrom functools import partial\nfrom threading import Event\nfrom typing import Iterable\nfrom urllib.request import urlopen\n\nfrom rich.progress import (\n    BarColumn,\n    DownloadColumn,\n    Progress,\n    TaskID,\n    TextColumn,\n    TimeRemainingColumn,\n    TransferSpeedColumn,\n)\n\nprogress = Progress(\n    TextColumn(\"[bold blue]{task.fields[filename]}\", justify=\"right\"),\n    BarColumn(bar_width=None),\n    \"[progress.percentage]{task.percentage:>3.1f}%\",\n    \"•\",\n    DownloadColumn(),\n    \"•\",\n    TransferSpeedColumn(),\n    \"•\",\n    TimeRemainingColumn(),\n)\n\n\ndone_event = Event()\n\n\ndef handle_sigint(signum, frame):\n    done_event.set()\n\n\nsignal.signal(signal.SIGINT, handle_sigint)\n\n\ndef copy_url(task_id: TaskID, url: str, path: str) -> None:\n    \"\"\"Copy data from a url to a local file.\"\"\"\n    progress.console.log(f\"Requesting {url}\")\n    response = urlopen(url)\n    # This will break if the response doesn't contain content length\n    progress.update(task_id, total=int(response.info()[\"Content-length\"]))\n    with open(path, \"wb\") as dest_file:\n        progress.start_task(task_id)\n        for data in iter(partial(response.read, 32768), b\"\"):\n            dest_file.write(data)\n            progress.update(task_id, advance=len(data))\n            if done_event.is_set():\n                return\n    progress.console.log(f\"Downloaded {path}\")\n\n\ndef download(urls: Iterable[str], dest_dir: str):\n    \"\"\"Download multiple files to the given directory.\"\"\"\n\n    with progress:\n        with ThreadPoolExecutor(max_workers=4) as pool:\n            for url in urls:\n                filename = url.split(\"/\")[-1]\n                dest_path = os.path.join(dest_dir, filename)\n                task_id = progress.add_task(\"download\", filename=filename, start=False)\n                pool.submit(copy_url, task_id, url, dest_path)\n\n\nif __name__ == \"__main__\":\n    # Try with https://releases.ubuntu.com/noble/ubuntu-24.04-desktop-amd64.iso\n    # and https://releases.ubuntu.com/noble/ubuntu-24.04-live-server-amd64.iso\n    if sys.argv[1:]:\n        download(sys.argv[1:], \"./\")\n    else:\n        print(\"Usage:\\n\\tpython downloader.py URL1 URL2 URL3 (etc)\")\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "medium", "pattern_type": "interactive", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.7799999999999999, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001, "asobacode_compliance": 0.7}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate interactive terminal prompt for AsobaCode CLI\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\n\nDemonstrates how to create a dynamic group of progress bars,\nshowing multi-level progress for multiple tasks (installing apps in the example),\neach of which consisting of multiple steps.\n\n\"\"\"\n\nimport time\n\nfrom rich.console import Group\nfrom rich.panel import Panel\nfrom rich.live import Live\nfrom rich.progress import (\n    BarColumn,\n    Progress,\n    SpinnerColumn,\n    TextColumn,\n    TimeElapsedColumn,\n)\n\n\ndef run_steps(name, step_times, app_steps_task_id):\n    \"\"\"Run steps for a single app, and update corresponding progress bars.\"\"\"\n\n    for idx, step_time in enumerate(step_times):\n        # add progress bar for this step (time elapsed + spinner)\n        action = step_actions[idx]\n        step_task_id = step_progress.add_task(\"\", action=action, name=name)\n\n        # run steps, update progress\n        for _ in range(step_time):\n            time.sleep(0.5)\n            step_progress.update(step_task_id, advance=1)\n\n        # stop and hide progress bar for this step when done\n        step_progress.stop_task(step_task_id)\n        step_progress.update(step_task_id, visible=False)\n\n        # also update progress bar for current app when step is done\n        app_steps_progress.update(app_steps_task_id, advance=1)\n\n\n# progress bar for current app showing only elapsed time,\n# which will stay visible when app is installed\ncurrent_app_progress = Progress(\n    TimeElapsedColumn(),\n    TextColumn(\"{task.description}\"),\n)\n\n# progress bars for single app steps (will be hidden when step is done)\nstep_progress = Progress(\n    TextColumn(\"  \"),\n    TimeElapsedColumn(),\n    TextColumn(\"[bold purple]{task.fields[action]}\"),\n    SpinnerColumn(\"simpleDots\"),\n)\n# progress bar for current app (progress in steps)\napp_steps_progress = Progress(\n    TextColumn(\n        \"[bold blue]Progress for app {task.fields[name]}: {task.percentage:.0f}%\"\n    ),\n    BarColumn(),\n    TextColumn(\"({task.completed} of {task.total} steps done)\"),\n)\n# overall progress bar\noverall_progress = Progress(\n    TimeElapsedColumn(), BarColumn(), TextColumn(\"{task.description}\")\n)\n# group of progress bars;\n# some are always visible, others will disappear when progress is complete\nprogress_group = Group(\n    Panel(Group(current_app_progress, step_progress, app_steps_progress)),\n    overall_progress,\n)\n\n# tuple specifies how long each step takes for that app\nstep_actions = (\"downloading\", \"configuring\", \"building\", \"installing\")\napps = [\n    (\"one\", (2, 1, 4, 2)),\n    (\"two\", (1, 3, 8, 4)),\n    (\"three\", (2, 1, 3, 2)),\n]\n\n# create overall progress bar\noverall_task_id = overall_progress.add_task(\"\", total=len(apps))\n\n# use own live instance as context manager with group of progress bars,\n# which allows for running multiple different progress bars in parallel,\n# and dynamically showing/hiding them\nwith Live(progress_group):\n    for idx, (name, step_times) in enumerate(apps):\n        # update message on overall progress bar\n        top_descr = \"[bold #AAAAAA](%d out of %d apps installed)\" % (idx, len(apps))\n        overall_progress.update(overall_task_id, description=top_descr)\n\n        # add progress bar for steps of this app, and run the steps\n        current_task_id = current_app_progress.add_task(\"Installing app %s\" % name)\n        app_steps_task_id = app_steps_progress.add_task(\n            \"\", total=len(step_times), name=name\n        )\n        run_steps(name, step_times, app_steps_task_id)\n\n        # stop and hide steps progress bar for this specific app\n        app_steps_progress.update(app_steps_task_id, visible=False)\n        current_app_progress.stop_task(current_task_id)\n        current_app_progress.update(\n            current_task_id, description=\"[bold green]App %s installed!\" % name\n        )\n\n        # increase overall progress now this task is done\n        overall_progress.update(overall_task_id, advance=1)\n\n    # final update for message on overall progress bar\n    overall_progress.update(\n        overall_task_id, description=\"[bold green]%s apps installed, done!\" % len(apps)\n    )\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "complex", "pattern_type": "interactive", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.95625, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8, "asobacode_compliance": 1.0}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate interactive terminal prompt for AsobaCode CLI\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\nA rudimentary URL downloader (like wget or curl) to demonstrate Rich progress bars.\n\"\"\"\n\nimport os.path\nimport sys\nfrom concurrent.futures import ThreadPoolExecutor\nimport signal\nfrom functools import partial\nfrom threading import Event\nfrom typing import Iterable\nfrom urllib.request import urlopen\n\nfrom rich.progress import (\n    BarColumn,\n    DownloadColumn,\n    Progress,\n    TaskID,\n    TextColumn,\n    TimeRemainingColumn,\n    TransferSpeedColumn,\n)\n\nprogress = Progress(\n    TextColumn(\"[bold blue]{task.fields[filename]}\", justify=\"right\"),\n    BarColumn(bar_width=None),\n    \"[progress.percentage]{task.percentage:>3.1f}%\",\n    \"•\",\n    DownloadColumn(),\n    \"•\",\n    TransferSpeedColumn(),\n    \"•\",\n    TimeRemainingColumn(),\n)\n\n\ndone_event = Event()\n\n\ndef handle_sigint(signum, frame):\n    done_event.set()\n\n\nsignal.signal(signal.SIGINT, handle_sigint)\n\n\ndef copy_url(task_id: TaskID, url: str, path: str) -> None:\n    \"\"\"Copy data from a url to a local file.\"\"\"\n    progress.console.log(f\"Requesting {url}\")\n    response = urlopen(url)\n    # This will break if the response doesn't contain content length\n    progress.update(task_id, total=int(response.info()[\"Content-length\"]))\n    with open(path, \"wb\") as dest_file:\n        progress.start_task(task_id)\n        for data in iter(partial(response.read, 32768), b\"\"):\n            dest_file.write(data)\n            progress.update(task_id, advance=len(data))\n            if done_event.is_set():\n                return\n    progress.console.log(f\"Downloaded {path}\")\n\n\ndef download(urls: Iterable[str], dest_dir: str):\n    \"\"\"Download multiple files to the given directory.\"\"\"\n\n    with progress:\n        with ThreadPoolExecutor(max_workers=4) as pool:\n            for url in urls:\n                filename = url.split(\"/\")[-1]\n                dest_path = os.path.join(dest_dir, filename)\n                task_id = progress.add_task(\"download\", filename=filename, start=False)\n                pool.submit(copy_url, task_id, url, dest_path)\n\n\nif __name__ == \"__main__\":\n    # Try with https://releases.ubuntu.com/noble/ubuntu-24.04-desktop-amd64.iso\n    # and https://releases.ubuntu.com/noble/ubuntu-24.04-live-server-amd64.iso\n    if sys.argv[1:]:\n        download(sys.argv[1:], \"./\")\n    else:\n        print(\"Usage:\\n\\tpython downloader.py URL1 URL2 URL3 (etc)\")\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "medium", "pattern_type": "interactive", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.7799999999999999, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001, "asobacode_compliance": 0.7}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate interactive terminal prompt for AsobaCode CLI\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\n\nDemonstrates how to create a dynamic group of progress bars,\nshowing multi-level progress for multiple tasks (installing apps in the example),\neach of which consisting of multiple steps.\n\n\"\"\"\n\nimport time\n\nfrom rich.console import Group\nfrom rich.panel import Panel\nfrom rich.live import Live\nfrom rich.progress import (\n    BarColumn,\n    Progress,\n    SpinnerColumn,\n    TextColumn,\n    TimeElapsedColumn,\n)\n\n\ndef run_steps(name, step_times, app_steps_task_id):\n    \"\"\"Run steps for a single app, and update corresponding progress bars.\"\"\"\n\n    for idx, step_time in enumerate(step_times):\n        # add progress bar for this step (time elapsed + spinner)\n        action = step_actions[idx]\n        step_task_id = step_progress.add_task(\"\", action=action, name=name)\n\n        # run steps, update progress\n        for _ in range(step_time):\n            time.sleep(0.5)\n            step_progress.update(step_task_id, advance=1)\n\n        # stop and hide progress bar for this step when done\n        step_progress.stop_task(step_task_id)\n        step_progress.update(step_task_id, visible=False)\n\n        # also update progress bar for current app when step is done\n        app_steps_progress.update(app_steps_task_id, advance=1)\n\n\n# progress bar for current app showing only elapsed time,\n# which will stay visible when app is installed\ncurrent_app_progress = Progress(\n    TimeElapsedColumn(),\n    TextColumn(\"{task.description}\"),\n)\n\n# progress bars for single app steps (will be hidden when step is done)\nstep_progress = Progress(\n    TextColumn(\"  \"),\n    TimeElapsedColumn(),\n    TextColumn(\"[bold purple]{task.fields[action]}\"),\n    SpinnerColumn(\"simpleDots\"),\n)\n# progress bar for current app (progress in steps)\napp_steps_progress = Progress(\n    TextColumn(\n        \"[bold blue]Progress for app {task.fields[name]}: {task.percentage:.0f}%\"\n    ),\n    BarColumn(),\n    TextColumn(\"({task.completed} of {task.total} steps done)\"),\n)\n# overall progress bar\noverall_progress = Progress(\n    TimeElapsedColumn(), BarColumn(), TextColumn(\"{task.description}\")\n)\n# group of progress bars;\n# some are always visible, others will disappear when progress is complete\nprogress_group = Group(\n    Panel(Group(current_app_progress, step_progress, app_steps_progress)),\n    overall_progress,\n)\n\n# tuple specifies how long each step takes for that app\nstep_actions = (\"downloading\", \"configuring\", \"building\", \"installing\")\napps = [\n    (\"one\", (2, 1, 4, 2)),\n    (\"two\", (1, 3, 8, 4)),\n    (\"three\", (2, 1, 3, 2)),\n]\n\n# create overall progress bar\noverall_task_id = overall_progress.add_task(\"\", total=len(apps))\n\n# use own live instance as context manager with group of progress bars,\n# which allows for running multiple different progress bars in parallel,\n# and dynamically showing/hiding them\nwith Live(progress_group):\n    for idx, (name, step_times) in enumerate(apps):\n        # update message on overall progress bar\n        top_descr = \"[bold #AAAAAA](%d out of %d apps installed)\" % (idx, len(apps))\n        overall_progress.update(overall_task_id, description=top_descr)\n\n        # add progress bar for steps of this app, and run the steps\n        current_task_id = current_app_progress.add_task(\"Installing app %s\" % name)\n        app_steps_task_id = app_steps_progress.add_task(\n            \"\", total=len(step_times), name=name\n        )\n        run_steps(name, step_times, app_steps_task_id)\n\n        # stop and hide steps progress bar for this specific app\n        app_steps_progress.update(app_steps_task_id, visible=False)\n        current_app_progress.stop_task(current_task_id)\n        current_app_progress.update(\n            current_task_id, description=\"[bold green]App %s installed!\" % name\n        )\n\n        # increase overall progress now this task is done\n        overall_progress.update(overall_task_id, advance=1)\n\n    # final update for message on overall progress bar\n    overall_progress.update(\n        overall_task_id, description=\"[bold green]%s apps installed, done!\" % len(apps)\n    )\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "complex", "pattern_type": "interactive", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.95625, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8, "asobacode_compliance": 1.0}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate thinking animation with token tracking for AsobaCode\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"Simple version of 5x5, developed for/with Textual.\"\"\"\n\nfrom __future__ import annotations\n\nfrom pathlib import Path\nfrom typing import TYPE_CHECKING, cast\n\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import Horizontal\nfrom textual.css.query import DOMQuery\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Button, Footer, Label, Markdown\n\nif TYPE_CHECKING:\n    from typing_extensions import Final\n\n\nclass Help(Screen):\n    \"\"\"The help screen for the application.\"\"\"\n\n    BINDINGS = [(\"escape,space,q,question_mark\", \"app.pop_screen\", \"Close\")]\n    \"\"\"Bindings for the help screen.\"\"\"\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the game's help.\n\n        Returns:\n            ComposeResult: The result of composing the help screen.\n        \"\"\"\n        yield Markdown(Path(__file__).with_suffix(\".md\").read_text())\n\n\nclass WinnerMessage(Label):\n    \"\"\"Widget to tell the user they have won.\"\"\"\n\n    MIN_MOVES: Final = 14\n    \"\"\"int: The minimum number of moves you can solve the puzzle in.\"\"\"\n\n    @staticmethod\n    def _plural(value: int) -> str:\n        return \"\" if value == 1 else \"s\"\n\n    def show(self, moves: int) -> None:\n        \"\"\"Show the winner message.\n\n        Args:\n            moves (int): The number of moves required to win.\n        \"\"\"\n        self.update(\n            \"W I N N E R !\\n\\n\\n\"\n            f\"You solved the puzzle in {moves} move{self._plural(moves)}.\"\n            + (\n                (\n                    f\" It is possible to solve the puzzle in {self.MIN_MOVES}, \"\n                    f\"you were {moves - self.MIN_MOVES} move{self._plural(moves - self.MIN_MOVES)} over.\"\n                )\n                if moves > self.MIN_MOVES\n                else \" Well done! That's the minimum number of moves to solve the puzzle!\"\n            )\n        )\n        self.add_class(\"visible\")\n\n    def hide(self) -> None:\n        \"\"\"Hide the winner message.\"\"\"\n        self.remove_class(\"visible\")\n\n\nclass GameHeader(Widget):\n    \"\"\"Header for the game.\n\n    Comprises of the title (``#app-title``), the number of moves ``#moves``\n    and the count of how many cells are turned on (``#progress``).\n    \"\"\"\n\n    moves = reactive(0)\n    \"\"\"int: Keep track of how many moves the player has made.\"\"\"\n\n    filled = reactive(0)\n    \"\"\"int: Keep track of how many cells are filled.\"\"\"\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the game header.\n\n        Returns:\n            ComposeResult: The result of composing the game header.\n        \"\"\"\n        with Horizontal():\n            yield Label(self.app.title, id=\"app-title\")\n            yield Label(id=\"moves\")\n            yield Label(id=\"progress\")\n\n    def watch_moves(self, moves: int):\n        \"\"\"Watch the moves reactive and update when it changes.\n\n        Args:\n            moves (int): The number of moves made.\n        \"\"\"\n        self.query_one(\"#moves\", Label).update(f\"Moves: {moves}\")\n\n    def watch_filled(self, filled: int):\n        \"\"\"Watch the on-count reactive and update when it changes.\n\n        Args:\n            filled (int): The number of cells that are currently on.\n        \"\"\"\n        self.query_one(\"#progress\", Label).update(f\"Filled: {filled}\")\n\n\nclass GameCell(Button):\n    \"\"\"Individual playable cell in the game.\"\"\"\n\n    @staticmethod\n    def at(row: int, col: int) -> str:\n        \"\"\"Get the ID of the cell at the given location.\n\n        Args:\n            row (int): The row of the cell.\n            col (int): The column of the cell.\n\n        Returns:\n            str: A string ID for the cell.\n        \"\"\"\n        return f\"cell-{row}-{col}\"\n\n    def __init__(self, row: int, col: int) -> None:\n        \"\"\"Initialise the game cell.\n\n        Args:\n            row (int): The row of the cell.\n            col (int): The column of the cell.\n        \"\"\"\n        super().__init__(\"\", id=self.at(row, col))\n        self.row = row\n        self.col = col\n\n\nclass GameGrid(Widget):\n    \"\"\"The main playable grid of game cells.\"\"\"\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the game grid.\n\n        Returns:\n            ComposeResult: The result of composing the game grid.\n        \"\"\"\n        for row in range(Game.SIZE):\n            for col in range(Game.SIZE):\n                yield GameCell(row, col)\n\n\nclass Game(Screen):\n    \"\"\"Main 5x5 game grid screen.\"\"\"\n\n    SIZE: Final = 5\n    \"\"\"The size of the game grid. Clue's in the name really.\"\"\"\n\n    BINDINGS = [\n        Binding(\"n\", \"new_game\", \"New Game\"),\n        Binding(\"question_mark\", \"app.push_screen('help')\", \"Help\", key_display=\"?\"),\n        Binding(\"q\", \"app.quit\", \"Quit\"),\n        Binding(\"up,w,k\", \"navigate(-1,0)\", \"Move Up\", False),\n        Binding(\"down,s,j\", \"navigate(1,0)\", \"Move Down\", False),\n        Binding(\"left,a,h\", \"navigate(0,-1)\", \"Move Left\", False),\n        Binding(\"right,d,l\", \"navigate(0,1)\", \"Move Right\", False),\n        Binding(\"space\", \"move\", \"Toggle\", False),\n    ]\n    \"\"\"The bindings for the main game grid.\"\"\"\n\n    @property\n    def filled_cells(self) -> DOMQuery[GameCell]:\n        \"\"\"DOMQuery[GameCell]: The collection of cells that are currently turned on.\"\"\"\n        return cast(DOMQuery[GameCell], self.query(\"GameCell.filled\"))\n\n    @property\n    def filled_count(self) -> int:\n        \"\"\"int: The number of cells that are currently filled.\"\"\"\n        return len(self.filled_cells)\n\n    @property\n    def all_filled(self) -> bool:\n        \"\"\"bool: Are all the cells filled?\"\"\"\n        return self.filled_count == self.SIZE * self.SIZE\n\n    def game_playable(self, playable: bool) -> None:\n        \"\"\"Mark the game as playable, or not.\n\n        Args:\n            playable (bool): Should the game currently be playable?\n        \"\"\"\n        self.query_one(GameGrid).disabled = not playable\n\n    def cell(self, row: int, col: int) -> GameCell:\n        \"\"\"Get the cell at a given location.\n\n        Args:\n            row (int): The row of the cell to get.\n            col (int): The column of the cell to get.\n\n        Returns:\n            GameCell: The cell at that location.\n        \"\"\"\n        return self.query_one(f\"#{GameCell.at(row,col)}\", GameCell)\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the game screen.\n\n        Returns:\n            ComposeResult: The result of composing the game screen.\n        \"\"\"\n        yield GameHeader()\n        yield GameGrid()\n        yield Footer()\n        yield WinnerMessage()\n\n    def toggle_cell(self, row: int, col: int) -> None:\n        \"\"\"Toggle an individual cell, but only if it's in bounds.\n\n        If the row and column would place the cell out of bounds for the\n        game grid, this function call is a no-op. That is, it's safe to call\n        it with an invalid cell coordinate.\n\n        Args:\n            row (int): The row of the cell to toggle.\n            col (int): The column of the cell to toggle.\n        \"\"\"\n        if 0 <= row <= (self.SIZE - 1) and 0 <= col <= (self.SIZE - 1):\n            self.cell(row, col).toggle_class(\"filled\")\n\n    _PATTERN: Final = (-1, 1, 0, 0, 0)\n\n    def toggle_cells(self, cell: GameCell) -> None:\n        \"\"\"Toggle a 5x5 pattern around the given cell.\n\n        Args:\n            cell (GameCell): The cell to toggle the cells around.\n        \"\"\"\n        for row, col in zip(self._PATTERN, reversed(self._PATTERN)):\n            self.toggle_cell(cell.row + row, cell.col + col)\n        self.query_one(GameHeader).filled = self.filled_count\n\n    def make_move_on(self, cell: GameCell) -> None:\n        \"\"\"Make a move on the given cell.\n\n        All relevant cells around the given cell are toggled as per the\n        game's rules.\n\n        Args:\n            cell (GameCell): The cell to make a move on\n        \"\"\"\n        self.toggle_cells(cell)\n        self.query_one(GameHeader).moves += 1\n        if self.all_filled:\n            self.query_one(WinnerMessage).show(self.query_one(GameHeader).moves)\n            self.game_playable(False)\n\n    def on_button_pressed(self, event: GameCell.Pressed) -> None:\n        \"\"\"React to a press of a button on the game grid.\n\n        Args:\n            event (GameCell.Pressed): The event to react to.\n        \"\"\"\n        self.make_move_on(cast(GameCell, event.button))\n\n    def action_new_game(self) -> None:\n        \"\"\"Start a new game.\"\"\"\n        self.query_one(GameHeader).moves = 0\n        self.filled_cells.remove_class(\"filled\")\n        self.query_one(WinnerMessage).hide()\n        middle = self.cell(self.SIZE // 2, self.SIZE // 2)\n        self.toggle_cells(middle)\n        self.set_focus(middle)\n        self.game_playable(True)\n\n    def action_navigate(self, row: int, col: int) -> None:\n        \"\"\"Navigate to a new cell by the given offsets.\n\n        Args:\n            row (int): The row of the cell to navigate to.\n            col (int): The column of the cell to navigate to.\n        \"\"\"\n        if isinstance(self.focused, GameCell):\n            self.set_focus(\n                self.cell(\n                    (self.focused.row + row) % self.SIZE,\n                    (self.focused.col + col) % self.SIZE,\n                )\n            )\n\n    def action_move(self) -> None:\n        \"\"\"Make a move on the current cell.\"\"\"\n        if isinstance(self.focused, GameCell):\n            self.focused.press()\n\n    def on_mount(self) -> None:\n        \"\"\"Get the game started when we first mount.\"\"\"\n        self.action_new_game()\n\n\nclass FiveByFive(App[None]):\n    \"\"\"Main 5x5 application class.\"\"\"\n\n    CSS_PATH = \"five_by_five.tcss\"\n    \"\"\"The name of the stylesheet for the app.\"\"\"\n\n    SCREENS = {\"help\": Help}\n    \"\"\"The pre-loaded screens for the application.\"\"\"\n\n    BINDINGS = [(\"ctrl+d\", \"toggle_dark\", \"Toggle Dark Mode\")]\n    \"\"\"App-level bindings.\"\"\"\n\n    TITLE = \"5x5 -- A little annoying puzzle\"\n    \"\"\"The title of the application.\"\"\"\n\n    def on_mount(self) -> None:\n        \"\"\"Set up the application on startup.\"\"\"\n        self.push_screen(Game())\n\n\nif __name__ == \"__main__\":\n    FiveByFive().run()\n", "metadata": {"source": "github.com/Textualize/textual", "language": "python", "complexity": "complex", "pattern_type": "animations", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.8075, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001, "asobacode_compliance": 0.7}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate thinking animation with token tracking for AsobaCode\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"Simple version of 5x5, developed for/with Textual.\"\"\"\n\nfrom __future__ import annotations\n\nfrom pathlib import Path\nfrom typing import TYPE_CHECKING, cast\n\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import Horizontal\nfrom textual.css.query import DOMQuery\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Button, Footer, Label, Markdown\n\nif TYPE_CHECKING:\n    from typing_extensions import Final\n\n\nclass Help(Screen):\n    \"\"\"The help screen for the application.\"\"\"\n\n    BINDINGS = [(\"escape,space,q,question_mark\", \"app.pop_screen\", \"Close\")]\n    \"\"\"Bindings for the help screen.\"\"\"\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the game's help.\n\n        Returns:\n            ComposeResult: The result of composing the help screen.\n        \"\"\"\n        yield Markdown(Path(__file__).with_suffix(\".md\").read_text())\n\n\nclass WinnerMessage(Label):\n    \"\"\"Widget to tell the user they have won.\"\"\"\n\n    MIN_MOVES: Final = 14\n    \"\"\"int: The minimum number of moves you can solve the puzzle in.\"\"\"\n\n    @staticmethod\n    def _plural(value: int) -> str:\n        return \"\" if value == 1 else \"s\"\n\n    def show(self, moves: int) -> None:\n        \"\"\"Show the winner message.\n\n        Args:\n            moves (int): The number of moves required to win.\n        \"\"\"\n        self.update(\n            \"W I N N E R !\\n\\n\\n\"\n            f\"You solved the puzzle in {moves} move{self._plural(moves)}.\"\n            + (\n                (\n                    f\" It is possible to solve the puzzle in {self.MIN_MOVES}, \"\n                    f\"you were {moves - self.MIN_MOVES} move{self._plural(moves - self.MIN_MOVES)} over.\"\n                )\n                if moves > self.MIN_MOVES\n                else \" Well done! That's the minimum number of moves to solve the puzzle!\"\n            )\n        )\n        self.add_class(\"visible\")\n\n    def hide(self) -> None:\n        \"\"\"Hide the winner message.\"\"\"\n        self.remove_class(\"visible\")\n\n\nclass GameHeader(Widget):\n    \"\"\"Header for the game.\n\n    Comprises of the title (``#app-title``), the number of moves ``#moves``\n    and the count of how many cells are turned on (``#progress``).\n    \"\"\"\n\n    moves = reactive(0)\n    \"\"\"int: Keep track of how many moves the player has made.\"\"\"\n\n    filled = reactive(0)\n    \"\"\"int: Keep track of how many cells are filled.\"\"\"\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the game header.\n\n        Returns:\n            ComposeResult: The result of composing the game header.\n        \"\"\"\n        with Horizontal():\n            yield Label(self.app.title, id=\"app-title\")\n            yield Label(id=\"moves\")\n            yield Label(id=\"progress\")\n\n    def watch_moves(self, moves: int):\n        \"\"\"Watch the moves reactive and update when it changes.\n\n        Args:\n            moves (int): The number of moves made.\n        \"\"\"\n        self.query_one(\"#moves\", Label).update(f\"Moves: {moves}\")\n\n    def watch_filled(self, filled: int):\n        \"\"\"Watch the on-count reactive and update when it changes.\n\n        Args:\n            filled (int): The number of cells that are currently on.\n        \"\"\"\n        self.query_one(\"#progress\", Label).update(f\"Filled: {filled}\")\n\n\nclass GameCell(Button):\n    \"\"\"Individual playable cell in the game.\"\"\"\n\n    @staticmethod\n    def at(row: int, col: int) -> str:\n        \"\"\"Get the ID of the cell at the given location.\n\n        Args:\n            row (int): The row of the cell.\n            col (int): The column of the cell.\n\n        Returns:\n            str: A string ID for the cell.\n        \"\"\"\n        return f\"cell-{row}-{col}\"\n\n    def __init__(self, row: int, col: int) -> None:\n        \"\"\"Initialise the game cell.\n\n        Args:\n            row (int): The row of the cell.\n            col (int): The column of the cell.\n        \"\"\"\n        super().__init__(\"\", id=self.at(row, col))\n        self.row = row\n        self.col = col\n\n\nclass GameGrid(Widget):\n    \"\"\"The main playable grid of game cells.\"\"\"\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the game grid.\n\n        Returns:\n            ComposeResult: The result of composing the game grid.\n        \"\"\"\n        for row in range(Game.SIZE):\n            for col in range(Game.SIZE):\n                yield GameCell(row, col)\n\n\nclass Game(Screen):\n    \"\"\"Main 5x5 game grid screen.\"\"\"\n\n    SIZE: Final = 5\n    \"\"\"The size of the game grid. Clue's in the name really.\"\"\"\n\n    BINDINGS = [\n        Binding(\"n\", \"new_game\", \"New Game\"),\n        Binding(\"question_mark\", \"app.push_screen('help')\", \"Help\", key_display=\"?\"),\n        Binding(\"q\", \"app.quit\", \"Quit\"),\n        Binding(\"up,w,k\", \"navigate(-1,0)\", \"Move Up\", False),\n        Binding(\"down,s,j\", \"navigate(1,0)\", \"Move Down\", False),\n        Binding(\"left,a,h\", \"navigate(0,-1)\", \"Move Left\", False),\n        Binding(\"right,d,l\", \"navigate(0,1)\", \"Move Right\", False),\n        Binding(\"space\", \"move\", \"Toggle\", False),\n    ]\n    \"\"\"The bindings for the main game grid.\"\"\"\n\n    @property\n    def filled_cells(self) -> DOMQuery[GameCell]:\n        \"\"\"DOMQuery[GameCell]: The collection of cells that are currently turned on.\"\"\"\n        return cast(DOMQuery[GameCell], self.query(\"GameCell.filled\"))\n\n    @property\n    def filled_count(self) -> int:\n        \"\"\"int: The number of cells that are currently filled.\"\"\"\n        return len(self.filled_cells)\n\n    @property\n    def all_filled(self) -> bool:\n        \"\"\"bool: Are all the cells filled?\"\"\"\n        return self.filled_count == self.SIZE * self.SIZE\n\n    def game_playable(self, playable: bool) -> None:\n        \"\"\"Mark the game as playable, or not.\n\n        Args:\n            playable (bool): Should the game currently be playable?\n        \"\"\"\n        self.query_one(GameGrid).disabled = not playable\n\n    def cell(self, row: int, col: int) -> GameCell:\n        \"\"\"Get the cell at a given location.\n\n        Args:\n            row (int): The row of the cell to get.\n            col (int): The column of the cell to get.\n\n        Returns:\n            GameCell: The cell at that location.\n        \"\"\"\n        return self.query_one(f\"#{GameCell.at(row,col)}\", GameCell)\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the game screen.\n\n        Returns:\n            ComposeResult: The result of composing the game screen.\n        \"\"\"\n        yield GameHeader()\n        yield GameGrid()\n        yield Footer()\n        yield WinnerMessage()\n\n    def toggle_cell(self, row: int, col: int) -> None:\n        \"\"\"Toggle an individual cell, but only if it's in bounds.\n\n        If the row and column would place the cell out of bounds for the\n        game grid, this function call is a no-op. That is, it's safe to call\n        it with an invalid cell coordinate.\n\n        Args:\n            row (int): The row of the cell to toggle.\n            col (int): The column of the cell to toggle.\n        \"\"\"\n        if 0 <= row <= (self.SIZE - 1) and 0 <= col <= (self.SIZE - 1):\n            self.cell(row, col).toggle_class(\"filled\")\n\n    _PATTERN: Final = (-1, 1, 0, 0, 0)\n\n    def toggle_cells(self, cell: GameCell) -> None:\n        \"\"\"Toggle a 5x5 pattern around the given cell.\n\n        Args:\n            cell (GameCell): The cell to toggle the cells around.\n        \"\"\"\n        for row, col in zip(self._PATTERN, reversed(self._PATTERN)):\n            self.toggle_cell(cell.row + row, cell.col + col)\n        self.query_one(GameHeader).filled = self.filled_count\n\n    def make_move_on(self, cell: GameCell) -> None:\n        \"\"\"Make a move on the given cell.\n\n        All relevant cells around the given cell are toggled as per the\n        game's rules.\n\n        Args:\n            cell (GameCell): The cell to make a move on\n        \"\"\"\n        self.toggle_cells(cell)\n        self.query_one(GameHeader).moves += 1\n        if self.all_filled:\n            self.query_one(WinnerMessage).show(self.query_one(GameHeader).moves)\n            self.game_playable(False)\n\n    def on_button_pressed(self, event: GameCell.Pressed) -> None:\n        \"\"\"React to a press of a button on the game grid.\n\n        Args:\n            event (GameCell.Pressed): The event to react to.\n        \"\"\"\n        self.make_move_on(cast(GameCell, event.button))\n\n    def action_new_game(self) -> None:\n        \"\"\"Start a new game.\"\"\"\n        self.query_one(GameHeader).moves = 0\n        self.filled_cells.remove_class(\"filled\")\n        self.query_one(WinnerMessage).hide()\n        middle = self.cell(self.SIZE // 2, self.SIZE // 2)\n        self.toggle_cells(middle)\n        self.set_focus(middle)\n        self.game_playable(True)\n\n    def action_navigate(self, row: int, col: int) -> None:\n        \"\"\"Navigate to a new cell by the given offsets.\n\n        Args:\n            row (int): The row of the cell to navigate to.\n            col (int): The column of the cell to navigate to.\n        \"\"\"\n        if isinstance(self.focused, GameCell):\n            self.set_focus(\n                self.cell(\n                    (self.focused.row + row) % self.SIZE,\n                    (self.focused.col + col) % self.SIZE,\n                )\n            )\n\n    def action_move(self) -> None:\n        \"\"\"Make a move on the current cell.\"\"\"\n        if isinstance(self.focused, GameCell):\n            self.focused.press()\n\n    def on_mount(self) -> None:\n        \"\"\"Get the game started when we first mount.\"\"\"\n        self.action_new_game()\n\n\nclass FiveByFive(App[None]):\n    \"\"\"Main 5x5 application class.\"\"\"\n\n    CSS_PATH = \"five_by_five.tcss\"\n    \"\"\"The name of the stylesheet for the app.\"\"\"\n\n    SCREENS = {\"help\": Help}\n    \"\"\"The pre-loaded screens for the application.\"\"\"\n\n    BINDINGS = [(\"ctrl+d\", \"toggle_dark\", \"Toggle Dark Mode\")]\n    \"\"\"App-level bindings.\"\"\"\n\n    TITLE = \"5x5 -- A little annoying puzzle\"\n    \"\"\"The title of the application.\"\"\"\n\n    def on_mount(self) -> None:\n        \"\"\"Set up the application on startup.\"\"\"\n        self.push_screen(Game())\n\n\nif __name__ == \"__main__\":\n    FiveByFive().run()\n", "metadata": {"source": "github.com/Textualize/textual", "language": "python", "complexity": "complex", "pattern_type": "animations", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.8075, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001, "asobacode_compliance": 0.7}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate Rich table for displaying AsobaCode server status\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"Simple version of 5x5, developed for/with Textual.\"\"\"\n\nfrom __future__ import annotations\n\nfrom pathlib import Path\nfrom typing import TYPE_CHECKING, cast\n\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import Horizontal\nfrom textual.css.query import DOMQuery\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Button, Footer, Label, Markdown\n\nif TYPE_CHECKING:\n    from typing_extensions import Final\n\n\nclass Help(Screen):\n    \"\"\"The help screen for the application.\"\"\"\n\n    BINDINGS = [(\"escape,space,q,question_mark\", \"app.pop_screen\", \"Close\")]\n    \"\"\"Bindings for the help screen.\"\"\"\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the game's help.\n\n        Returns:\n            ComposeResult: The result of composing the help screen.\n        \"\"\"\n        yield Markdown(Path(__file__).with_suffix(\".md\").read_text())\n\n\nclass WinnerMessage(Label):\n    \"\"\"Widget to tell the user they have won.\"\"\"\n\n    MIN_MOVES: Final = 14\n    \"\"\"int: The minimum number of moves you can solve the puzzle in.\"\"\"\n\n    @staticmethod\n    def _plural(value: int) -> str:\n        return \"\" if value == 1 else \"s\"\n\n    def show(self, moves: int) -> None:\n        \"\"\"Show the winner message.\n\n        Args:\n            moves (int): The number of moves required to win.\n        \"\"\"\n        self.update(\n            \"W I N N E R !\\n\\n\\n\"\n            f\"You solved the puzzle in {moves} move{self._plural(moves)}.\"\n            + (\n                (\n                    f\" It is possible to solve the puzzle in {self.MIN_MOVES}, \"\n                    f\"you were {moves - self.MIN_MOVES} move{self._plural(moves - self.MIN_MOVES)} over.\"\n                )\n                if moves > self.MIN_MOVES\n                else \" Well done! That's the minimum number of moves to solve the puzzle!\"\n            )\n        )\n        self.add_class(\"visible\")\n\n    def hide(self) -> None:\n        \"\"\"Hide the winner message.\"\"\"\n        self.remove_class(\"visible\")\n\n\nclass GameHeader(Widget):\n    \"\"\"Header for the game.\n\n    Comprises of the title (``#app-title``), the number of moves ``#moves``\n    and the count of how many cells are turned on (``#progress``).\n    \"\"\"\n\n    moves = reactive(0)\n    \"\"\"int: Keep track of how many moves the player has made.\"\"\"\n\n    filled = reactive(0)\n    \"\"\"int: Keep track of how many cells are filled.\"\"\"\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the game header.\n\n        Returns:\n            ComposeResult: The result of composing the game header.\n        \"\"\"\n        with Horizontal():\n            yield Label(self.app.title, id=\"app-title\")\n            yield Label(id=\"moves\")\n            yield Label(id=\"progress\")\n\n    def watch_moves(self, moves: int):\n        \"\"\"Watch the moves reactive and update when it changes.\n\n        Args:\n            moves (int): The number of moves made.\n        \"\"\"\n        self.query_one(\"#moves\", Label).update(f\"Moves: {moves}\")\n\n    def watch_filled(self, filled: int):\n        \"\"\"Watch the on-count reactive and update when it changes.\n\n        Args:\n            filled (int): The number of cells that are currently on.\n        \"\"\"\n        self.query_one(\"#progress\", Label).update(f\"Filled: {filled}\")\n\n\nclass GameCell(Button):\n    \"\"\"Individual playable cell in the game.\"\"\"\n\n    @staticmethod\n    def at(row: int, col: int) -> str:\n        \"\"\"Get the ID of the cell at the given location.\n\n        Args:\n            row (int): The row of the cell.\n            col (int): The column of the cell.\n\n        Returns:\n            str: A string ID for the cell.\n        \"\"\"\n        return f\"cell-{row}-{col}\"\n\n    def __init__(self, row: int, col: int) -> None:\n        \"\"\"Initialise the game cell.\n\n        Args:\n            row (int): The row of the cell.\n            col (int): The column of the cell.\n        \"\"\"\n        super().__init__(\"\", id=self.at(row, col))\n        self.row = row\n        self.col = col\n\n\nclass GameGrid(Widget):\n    \"\"\"The main playable grid of game cells.\"\"\"\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the game grid.\n\n        Returns:\n            ComposeResult: The result of composing the game grid.\n        \"\"\"\n        for row in range(Game.SIZE):\n            for col in range(Game.SIZE):\n                yield GameCell(row, col)\n\n\nclass Game(Screen):\n    \"\"\"Main 5x5 game grid screen.\"\"\"\n\n    SIZE: Final = 5\n    \"\"\"The size of the game grid. Clue's in the name really.\"\"\"\n\n    BINDINGS = [\n        Binding(\"n\", \"new_game\", \"New Game\"),\n        Binding(\"question_mark\", \"app.push_screen('help')\", \"Help\", key_display=\"?\"),\n        Binding(\"q\", \"app.quit\", \"Quit\"),\n        Binding(\"up,w,k\", \"navigate(-1,0)\", \"Move Up\", False),\n        Binding(\"down,s,j\", \"navigate(1,0)\", \"Move Down\", False),\n        Binding(\"left,a,h\", \"navigate(0,-1)\", \"Move Left\", False),\n        Binding(\"right,d,l\", \"navigate(0,1)\", \"Move Right\", False),\n        Binding(\"space\", \"move\", \"Toggle\", False),\n    ]\n    \"\"\"The bindings for the main game grid.\"\"\"\n\n    @property\n    def filled_cells(self) -> DOMQuery[GameCell]:\n        \"\"\"DOMQuery[GameCell]: The collection of cells that are currently turned on.\"\"\"\n        return cast(DOMQuery[GameCell], self.query(\"GameCell.filled\"))\n\n    @property\n    def filled_count(self) -> int:\n        \"\"\"int: The number of cells that are currently filled.\"\"\"\n        return len(self.filled_cells)\n\n    @property\n    def all_filled(self) -> bool:\n        \"\"\"bool: Are all the cells filled?\"\"\"\n        return self.filled_count == self.SIZE * self.SIZE\n\n    def game_playable(self, playable: bool) -> None:\n        \"\"\"Mark the game as playable, or not.\n\n        Args:\n            playable (bool): Should the game currently be playable?\n        \"\"\"\n        self.query_one(GameGrid).disabled = not playable\n\n    def cell(self, row: int, col: int) -> GameCell:\n        \"\"\"Get the cell at a given location.\n\n        Args:\n            row (int): The row of the cell to get.\n            col (int): The column of the cell to get.\n\n        Returns:\n            GameCell: The cell at that location.\n        \"\"\"\n        return self.query_one(f\"#{GameCell.at(row,col)}\", GameCell)\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the game screen.\n\n        Returns:\n            ComposeResult: The result of composing the game screen.\n        \"\"\"\n        yield GameHeader()\n        yield GameGrid()\n        yield Footer()\n        yield WinnerMessage()\n\n    def toggle_cell(self, row: int, col: int) -> None:\n        \"\"\"Toggle an individual cell, but only if it's in bounds.\n\n        If the row and column would place the cell out of bounds for the\n        game grid, this function call is a no-op. That is, it's safe to call\n        it with an invalid cell coordinate.\n\n        Args:\n            row (int): The row of the cell to toggle.\n            col (int): The column of the cell to toggle.\n        \"\"\"\n        if 0 <= row <= (self.SIZE - 1) and 0 <= col <= (self.SIZE - 1):\n            self.cell(row, col).toggle_class(\"filled\")\n\n    _PATTERN: Final = (-1, 1, 0, 0, 0)\n\n    def toggle_cells(self, cell: GameCell) -> None:\n        \"\"\"Toggle a 5x5 pattern around the given cell.\n\n        Args:\n            cell (GameCell): The cell to toggle the cells around.\n        \"\"\"\n        for row, col in zip(self._PATTERN, reversed(self._PATTERN)):\n            self.toggle_cell(cell.row + row, cell.col + col)\n        self.query_one(GameHeader).filled = self.filled_count\n\n    def make_move_on(self, cell: GameCell) -> None:\n        \"\"\"Make a move on the given cell.\n\n        All relevant cells around the given cell are toggled as per the\n        game's rules.\n\n        Args:\n            cell (GameCell): The cell to make a move on\n        \"\"\"\n        self.toggle_cells(cell)\n        self.query_one(GameHeader).moves += 1\n        if self.all_filled:\n            self.query_one(WinnerMessage).show(self.query_one(GameHeader).moves)\n            self.game_playable(False)\n\n    def on_button_pressed(self, event: GameCell.Pressed) -> None:\n        \"\"\"React to a press of a button on the game grid.\n\n        Args:\n            event (GameCell.Pressed): The event to react to.\n        \"\"\"\n        self.make_move_on(cast(GameCell, event.button))\n\n    def action_new_game(self) -> None:\n        \"\"\"Start a new game.\"\"\"\n        self.query_one(GameHeader).moves = 0\n        self.filled_cells.remove_class(\"filled\")\n        self.query_one(WinnerMessage).hide()\n        middle = self.cell(self.SIZE // 2, self.SIZE // 2)\n        self.toggle_cells(middle)\n        self.set_focus(middle)\n        self.game_playable(True)\n\n    def action_navigate(self, row: int, col: int) -> None:\n        \"\"\"Navigate to a new cell by the given offsets.\n\n        Args:\n            row (int): The row of the cell to navigate to.\n            col (int): The column of the cell to navigate to.\n        \"\"\"\n        if isinstance(self.focused, GameCell):\n            self.set_focus(\n                self.cell(\n                    (self.focused.row + row) % self.SIZE,\n                    (self.focused.col + col) % self.SIZE,\n                )\n            )\n\n    def action_move(self) -> None:\n        \"\"\"Make a move on the current cell.\"\"\"\n        if isinstance(self.focused, GameCell):\n            self.focused.press()\n\n    def on_mount(self) -> None:\n        \"\"\"Get the game started when we first mount.\"\"\"\n        self.action_new_game()\n\n\nclass FiveByFive(App[None]):\n    \"\"\"Main 5x5 application class.\"\"\"\n\n    CSS_PATH = \"five_by_five.tcss\"\n    \"\"\"The name of the stylesheet for the app.\"\"\"\n\n    SCREENS = {\"help\": Help}\n    \"\"\"The pre-loaded screens for the application.\"\"\"\n\n    BINDINGS = [(\"ctrl+d\", \"toggle_dark\", \"Toggle Dark Mode\")]\n    \"\"\"App-level bindings.\"\"\"\n\n    TITLE = \"5x5 -- A little annoying puzzle\"\n    \"\"\"The title of the application.\"\"\"\n\n    def on_mount(self) -> None:\n        \"\"\"Set up the application on startup.\"\"\"\n        self.push_screen(Game())\n\n\nif __name__ == \"__main__\":\n    FiveByFive().run()\n", "metadata": {"source": "github.com/Textualize/textual", "language": "python", "complexity": "complex", "pattern_type": "tables", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.8075, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001, "asobacode_compliance": 0.7}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate Rich table for displaying AsobaCode server status\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"Simple version of 5x5, developed for/with Textual.\"\"\"\n\nfrom __future__ import annotations\n\nfrom pathlib import Path\nfrom typing import TYPE_CHECKING, cast\n\nfrom textual.app import App, ComposeResult\nfrom textual.binding import Binding\nfrom textual.containers import Horizontal\nfrom textual.css.query import DOMQuery\nfrom textual.reactive import reactive\nfrom textual.screen import Screen\nfrom textual.widget import Widget\nfrom textual.widgets import Button, Footer, Label, Markdown\n\nif TYPE_CHECKING:\n    from typing_extensions import Final\n\n\nclass Help(Screen):\n    \"\"\"The help screen for the application.\"\"\"\n\n    BINDINGS = [(\"escape,space,q,question_mark\", \"app.pop_screen\", \"Close\")]\n    \"\"\"Bindings for the help screen.\"\"\"\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the game's help.\n\n        Returns:\n            ComposeResult: The result of composing the help screen.\n        \"\"\"\n        yield Markdown(Path(__file__).with_suffix(\".md\").read_text())\n\n\nclass WinnerMessage(Label):\n    \"\"\"Widget to tell the user they have won.\"\"\"\n\n    MIN_MOVES: Final = 14\n    \"\"\"int: The minimum number of moves you can solve the puzzle in.\"\"\"\n\n    @staticmethod\n    def _plural(value: int) -> str:\n        return \"\" if value == 1 else \"s\"\n\n    def show(self, moves: int) -> None:\n        \"\"\"Show the winner message.\n\n        Args:\n            moves (int): The number of moves required to win.\n        \"\"\"\n        self.update(\n            \"W I N N E R !\\n\\n\\n\"\n            f\"You solved the puzzle in {moves} move{self._plural(moves)}.\"\n            + (\n                (\n                    f\" It is possible to solve the puzzle in {self.MIN_MOVES}, \"\n                    f\"you were {moves - self.MIN_MOVES} move{self._plural(moves - self.MIN_MOVES)} over.\"\n                )\n                if moves > self.MIN_MOVES\n                else \" Well done! That's the minimum number of moves to solve the puzzle!\"\n            )\n        )\n        self.add_class(\"visible\")\n\n    def hide(self) -> None:\n        \"\"\"Hide the winner message.\"\"\"\n        self.remove_class(\"visible\")\n\n\nclass GameHeader(Widget):\n    \"\"\"Header for the game.\n\n    Comprises of the title (``#app-title``), the number of moves ``#moves``\n    and the count of how many cells are turned on (``#progress``).\n    \"\"\"\n\n    moves = reactive(0)\n    \"\"\"int: Keep track of how many moves the player has made.\"\"\"\n\n    filled = reactive(0)\n    \"\"\"int: Keep track of how many cells are filled.\"\"\"\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the game header.\n\n        Returns:\n            ComposeResult: The result of composing the game header.\n        \"\"\"\n        with Horizontal():\n            yield Label(self.app.title, id=\"app-title\")\n            yield Label(id=\"moves\")\n            yield Label(id=\"progress\")\n\n    def watch_moves(self, moves: int):\n        \"\"\"Watch the moves reactive and update when it changes.\n\n        Args:\n            moves (int): The number of moves made.\n        \"\"\"\n        self.query_one(\"#moves\", Label).update(f\"Moves: {moves}\")\n\n    def watch_filled(self, filled: int):\n        \"\"\"Watch the on-count reactive and update when it changes.\n\n        Args:\n            filled (int): The number of cells that are currently on.\n        \"\"\"\n        self.query_one(\"#progress\", Label).update(f\"Filled: {filled}\")\n\n\nclass GameCell(Button):\n    \"\"\"Individual playable cell in the game.\"\"\"\n\n    @staticmethod\n    def at(row: int, col: int) -> str:\n        \"\"\"Get the ID of the cell at the given location.\n\n        Args:\n            row (int): The row of the cell.\n            col (int): The column of the cell.\n\n        Returns:\n            str: A string ID for the cell.\n        \"\"\"\n        return f\"cell-{row}-{col}\"\n\n    def __init__(self, row: int, col: int) -> None:\n        \"\"\"Initialise the game cell.\n\n        Args:\n            row (int): The row of the cell.\n            col (int): The column of the cell.\n        \"\"\"\n        super().__init__(\"\", id=self.at(row, col))\n        self.row = row\n        self.col = col\n\n\nclass GameGrid(Widget):\n    \"\"\"The main playable grid of game cells.\"\"\"\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the game grid.\n\n        Returns:\n            ComposeResult: The result of composing the game grid.\n        \"\"\"\n        for row in range(Game.SIZE):\n            for col in range(Game.SIZE):\n                yield GameCell(row, col)\n\n\nclass Game(Screen):\n    \"\"\"Main 5x5 game grid screen.\"\"\"\n\n    SIZE: Final = 5\n    \"\"\"The size of the game grid. Clue's in the name really.\"\"\"\n\n    BINDINGS = [\n        Binding(\"n\", \"new_game\", \"New Game\"),\n        Binding(\"question_mark\", \"app.push_screen('help')\", \"Help\", key_display=\"?\"),\n        Binding(\"q\", \"app.quit\", \"Quit\"),\n        Binding(\"up,w,k\", \"navigate(-1,0)\", \"Move Up\", False),\n        Binding(\"down,s,j\", \"navigate(1,0)\", \"Move Down\", False),\n        Binding(\"left,a,h\", \"navigate(0,-1)\", \"Move Left\", False),\n        Binding(\"right,d,l\", \"navigate(0,1)\", \"Move Right\", False),\n        Binding(\"space\", \"move\", \"Toggle\", False),\n    ]\n    \"\"\"The bindings for the main game grid.\"\"\"\n\n    @property\n    def filled_cells(self) -> DOMQuery[GameCell]:\n        \"\"\"DOMQuery[GameCell]: The collection of cells that are currently turned on.\"\"\"\n        return cast(DOMQuery[GameCell], self.query(\"GameCell.filled\"))\n\n    @property\n    def filled_count(self) -> int:\n        \"\"\"int: The number of cells that are currently filled.\"\"\"\n        return len(self.filled_cells)\n\n    @property\n    def all_filled(self) -> bool:\n        \"\"\"bool: Are all the cells filled?\"\"\"\n        return self.filled_count == self.SIZE * self.SIZE\n\n    def game_playable(self, playable: bool) -> None:\n        \"\"\"Mark the game as playable, or not.\n\n        Args:\n            playable (bool): Should the game currently be playable?\n        \"\"\"\n        self.query_one(GameGrid).disabled = not playable\n\n    def cell(self, row: int, col: int) -> GameCell:\n        \"\"\"Get the cell at a given location.\n\n        Args:\n            row (int): The row of the cell to get.\n            col (int): The column of the cell to get.\n\n        Returns:\n            GameCell: The cell at that location.\n        \"\"\"\n        return self.query_one(f\"#{GameCell.at(row,col)}\", GameCell)\n\n    def compose(self) -> ComposeResult:\n        \"\"\"Compose the game screen.\n\n        Returns:\n            ComposeResult: The result of composing the game screen.\n        \"\"\"\n        yield GameHeader()\n        yield GameGrid()\n        yield Footer()\n        yield WinnerMessage()\n\n    def toggle_cell(self, row: int, col: int) -> None:\n        \"\"\"Toggle an individual cell, but only if it's in bounds.\n\n        If the row and column would place the cell out of bounds for the\n        game grid, this function call is a no-op. That is, it's safe to call\n        it with an invalid cell coordinate.\n\n        Args:\n            row (int): The row of the cell to toggle.\n            col (int): The column of the cell to toggle.\n        \"\"\"\n        if 0 <= row <= (self.SIZE - 1) and 0 <= col <= (self.SIZE - 1):\n            self.cell(row, col).toggle_class(\"filled\")\n\n    _PATTERN: Final = (-1, 1, 0, 0, 0)\n\n    def toggle_cells(self, cell: GameCell) -> None:\n        \"\"\"Toggle a 5x5 pattern around the given cell.\n\n        Args:\n            cell (GameCell): The cell to toggle the cells around.\n        \"\"\"\n        for row, col in zip(self._PATTERN, reversed(self._PATTERN)):\n            self.toggle_cell(cell.row + row, cell.col + col)\n        self.query_one(GameHeader).filled = self.filled_count\n\n    def make_move_on(self, cell: GameCell) -> None:\n        \"\"\"Make a move on the given cell.\n\n        All relevant cells around the given cell are toggled as per the\n        game's rules.\n\n        Args:\n            cell (GameCell): The cell to make a move on\n        \"\"\"\n        self.toggle_cells(cell)\n        self.query_one(GameHeader).moves += 1\n        if self.all_filled:\n            self.query_one(WinnerMessage).show(self.query_one(GameHeader).moves)\n            self.game_playable(False)\n\n    def on_button_pressed(self, event: GameCell.Pressed) -> None:\n        \"\"\"React to a press of a button on the game grid.\n\n        Args:\n            event (GameCell.Pressed): The event to react to.\n        \"\"\"\n        self.make_move_on(cast(GameCell, event.button))\n\n    def action_new_game(self) -> None:\n        \"\"\"Start a new game.\"\"\"\n        self.query_one(GameHeader).moves = 0\n        self.filled_cells.remove_class(\"filled\")\n        self.query_one(WinnerMessage).hide()\n        middle = self.cell(self.SIZE // 2, self.SIZE // 2)\n        self.toggle_cells(middle)\n        self.set_focus(middle)\n        self.game_playable(True)\n\n    def action_navigate(self, row: int, col: int) -> None:\n        \"\"\"Navigate to a new cell by the given offsets.\n\n        Args:\n            row (int): The row of the cell to navigate to.\n            col (int): The column of the cell to navigate to.\n        \"\"\"\n        if isinstance(self.focused, GameCell):\n            self.set_focus(\n                self.cell(\n                    (self.focused.row + row) % self.SIZE,\n                    (self.focused.col + col) % self.SIZE,\n                )\n            )\n\n    def action_move(self) -> None:\n        \"\"\"Make a move on the current cell.\"\"\"\n        if isinstance(self.focused, GameCell):\n            self.focused.press()\n\n    def on_mount(self) -> None:\n        \"\"\"Get the game started when we first mount.\"\"\"\n        self.action_new_game()\n\n\nclass FiveByFive(App[None]):\n    \"\"\"Main 5x5 application class.\"\"\"\n\n    CSS_PATH = \"five_by_five.tcss\"\n    \"\"\"The name of the stylesheet for the app.\"\"\"\n\n    SCREENS = {\"help\": Help}\n    \"\"\"The pre-loaded screens for the application.\"\"\"\n\n    BINDINGS = [(\"ctrl+d\", \"toggle_dark\", \"Toggle Dark Mode\")]\n    \"\"\"App-level bindings.\"\"\"\n\n    TITLE = \"5x5 -- A little annoying puzzle\"\n    \"\"\"The title of the application.\"\"\"\n\n    def on_mount(self) -> None:\n        \"\"\"Set up the application on startup.\"\"\"\n        self.push_screen(Game())\n\n\nif __name__ == \"__main__\":\n    FiveByFive().run()\n", "metadata": {"source": "github.com/Textualize/textual", "language": "python", "complexity": "complex", "pattern_type": "tables", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.8075, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001, "asobacode_compliance": 0.7}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate Rich terminal panel for AsobaCode conversation display\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "from typing import List\n\ntry:\n    import attr\nexcept ImportError:\n    print(\"This example requires attrs library\")\n    print(\"pip install attrs\")\n    raise SystemExit()\n\n\n@attr.define\nclass Point3D:\n    x: float\n    y: float\n    z: float = 0\n\n\n@attr.define\nclass Triangle:\n    point1: Point3D\n    point2: Point3D\n    point3: Point3D\n\n\n@attr.define\nclass Model:\n    name: str\n    triangles: List[Triangle] = attr.Factory(list)\n\n\nif __name__ == \"__main__\":\n    model = Model(\n        name=\"Alien#1\",\n        triangles=[\n            Triangle(\n                Point3D(x=20, y=50),\n                Point3D(x=50, y=15, z=-45.34),\n                Point3D(3.1426, 83.2323, -16),\n            )\n        ],\n    )\n\n    from rich.console import Console\n    from rich.pretty import Pretty\n    from rich.table import Column, Table\n    from rich.text import Text\n\n    console = Console()\n\n    table = Table(\"attrs *with* Rich\", Column(Text.from_markup(\"attrs *without* Rich\")))\n\n    table.add_row(Pretty(model), repr(model))\n    console.print(table)\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "medium", "pattern_type": "rich_panels", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.8462500000000002, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8, "asobacode_compliance": 0.8}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate Rich terminal panel for AsobaCode conversation display\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\nThis example shows how to display content in columns.\n\nThe data is pulled from https://randomuser.me\n\"\"\"\n\nimport json\nfrom urllib.request import urlopen\n\nfrom rich.console import Console\nfrom rich.columns import Columns\nfrom rich.panel import Panel\n\n\ndef get_content(user):\n    \"\"\"Extract text from user dict.\"\"\"\n    country = user[\"location\"][\"country\"]\n    name = f\"{user['name']['first']} {user['name']['last']}\"\n    return f\"[b]{name}[/b]\\n[yellow]{country}\"\n\n\nconsole = Console()\n\n\nusers = json.loads(urlopen(\"https://randomuser.me/api/?results=30\").read())[\"results\"]\nconsole.print(users, overflow=\"ignore\", crop=False)\nuser_renderables = [Panel(get_content(user), expand=True) for user in users]\nconsole.print(Columns(user_renderables))\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "simple", "pattern_type": "rich_panels", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.8337500000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8, "asobacode_compliance": 0.8}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate Rich terminal panel for AsobaCode conversation display\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\nA very minimal `cp` clone that displays a progress bar.\n\"\"\"\nimport os\nimport shutil\nimport sys\n\nfrom rich.progress import Progress\n\nif __name__ == \"__main__\":\n    if len(sys.argv) == 3:\n        with Progress() as progress:\n            desc = os.path.basename(sys.argv[1])\n            with progress.open(sys.argv[1], \"rb\", description=desc) as src:\n                with open(sys.argv[2], \"wb\") as dst:\n                    shutil.copyfileobj(src, dst)\n    else:\n        print(\"Copy a file with a progress bar.\")\n        print(\"Usage:\\n\\tpython cp_progress.py SRC DST\")\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "simple", "pattern_type": "rich_panels", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.7975, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001, "asobacode_compliance": 0.7}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate Rich terminal panel for AsobaCode conversation display\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\nA rudimentary URL downloader (like wget or curl) to demonstrate Rich progress bars.\n\"\"\"\n\nimport os.path\nimport sys\nfrom concurrent.futures import ThreadPoolExecutor\nimport signal\nfrom functools import partial\nfrom threading import Event\nfrom typing import Iterable\nfrom urllib.request import urlopen\n\nfrom rich.progress import (\n    BarColumn,\n    DownloadColumn,\n    Progress,\n    TaskID,\n    TextColumn,\n    TimeRemainingColumn,\n    TransferSpeedColumn,\n)\n\nprogress = Progress(\n    TextColumn(\"[bold blue]{task.fields[filename]}\", justify=\"right\"),\n    BarColumn(bar_width=None),\n    \"[progress.percentage]{task.percentage:>3.1f}%\",\n    \"•\",\n    DownloadColumn(),\n    \"•\",\n    TransferSpeedColumn(),\n    \"•\",\n    TimeRemainingColumn(),\n)\n\n\ndone_event = Event()\n\n\ndef handle_sigint(signum, frame):\n    done_event.set()\n\n\nsignal.signal(signal.SIGINT, handle_sigint)\n\n\ndef copy_url(task_id: TaskID, url: str, path: str) -> None:\n    \"\"\"Copy data from a url to a local file.\"\"\"\n    progress.console.log(f\"Requesting {url}\")\n    response = urlopen(url)\n    # This will break if the response doesn't contain content length\n    progress.update(task_id, total=int(response.info()[\"Content-length\"]))\n    with open(path, \"wb\") as dest_file:\n        progress.start_task(task_id)\n        for data in iter(partial(response.read, 32768), b\"\"):\n            dest_file.write(data)\n            progress.update(task_id, advance=len(data))\n            if done_event.is_set():\n                return\n    progress.console.log(f\"Downloaded {path}\")\n\n\ndef download(urls: Iterable[str], dest_dir: str):\n    \"\"\"Download multiple files to the given directory.\"\"\"\n\n    with progress:\n        with ThreadPoolExecutor(max_workers=4) as pool:\n            for url in urls:\n                filename = url.split(\"/\")[-1]\n                dest_path = os.path.join(dest_dir, filename)\n                task_id = progress.add_task(\"download\", filename=filename, start=False)\n                pool.submit(copy_url, task_id, url, dest_path)\n\n\nif __name__ == \"__main__\":\n    # Try with https://releases.ubuntu.com/noble/ubuntu-24.04-desktop-amd64.iso\n    # and https://releases.ubuntu.com/noble/ubuntu-24.04-live-server-amd64.iso\n    if sys.argv[1:]:\n        download(sys.argv[1:], \"./\")\n    else:\n        print(\"Usage:\\n\\tpython downloader.py URL1 URL2 URL3 (etc)\")\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "medium", "pattern_type": "rich_panels", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.7799999999999999, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001, "asobacode_compliance": 0.7}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate Rich terminal panel for AsobaCode conversation display\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\n\nDemonstrates how to create a dynamic group of progress bars,\nshowing multi-level progress for multiple tasks (installing apps in the example),\neach of which consisting of multiple steps.\n\n\"\"\"\n\nimport time\n\nfrom rich.console import Group\nfrom rich.panel import Panel\nfrom rich.live import Live\nfrom rich.progress import (\n    BarColumn,\n    Progress,\n    SpinnerColumn,\n    TextColumn,\n    TimeElapsedColumn,\n)\n\n\ndef run_steps(name, step_times, app_steps_task_id):\n    \"\"\"Run steps for a single app, and update corresponding progress bars.\"\"\"\n\n    for idx, step_time in enumerate(step_times):\n        # add progress bar for this step (time elapsed + spinner)\n        action = step_actions[idx]\n        step_task_id = step_progress.add_task(\"\", action=action, name=name)\n\n        # run steps, update progress\n        for _ in range(step_time):\n            time.sleep(0.5)\n            step_progress.update(step_task_id, advance=1)\n\n        # stop and hide progress bar for this step when done\n        step_progress.stop_task(step_task_id)\n        step_progress.update(step_task_id, visible=False)\n\n        # also update progress bar for current app when step is done\n        app_steps_progress.update(app_steps_task_id, advance=1)\n\n\n# progress bar for current app showing only elapsed time,\n# which will stay visible when app is installed\ncurrent_app_progress = Progress(\n    TimeElapsedColumn(),\n    TextColumn(\"{task.description}\"),\n)\n\n# progress bars for single app steps (will be hidden when step is done)\nstep_progress = Progress(\n    TextColumn(\"  \"),\n    TimeElapsedColumn(),\n    TextColumn(\"[bold purple]{task.fields[action]}\"),\n    SpinnerColumn(\"simpleDots\"),\n)\n# progress bar for current app (progress in steps)\napp_steps_progress = Progress(\n    TextColumn(\n        \"[bold blue]Progress for app {task.fields[name]}: {task.percentage:.0f}%\"\n    ),\n    BarColumn(),\n    TextColumn(\"({task.completed} of {task.total} steps done)\"),\n)\n# overall progress bar\noverall_progress = Progress(\n    TimeElapsedColumn(), BarColumn(), TextColumn(\"{task.description}\")\n)\n# group of progress bars;\n# some are always visible, others will disappear when progress is complete\nprogress_group = Group(\n    Panel(Group(current_app_progress, step_progress, app_steps_progress)),\n    overall_progress,\n)\n\n# tuple specifies how long each step takes for that app\nstep_actions = (\"downloading\", \"configuring\", \"building\", \"installing\")\napps = [\n    (\"one\", (2, 1, 4, 2)),\n    (\"two\", (1, 3, 8, 4)),\n    (\"three\", (2, 1, 3, 2)),\n]\n\n# create overall progress bar\noverall_task_id = overall_progress.add_task(\"\", total=len(apps))\n\n# use own live instance as context manager with group of progress bars,\n# which allows for running multiple different progress bars in parallel,\n# and dynamically showing/hiding them\nwith Live(progress_group):\n    for idx, (name, step_times) in enumerate(apps):\n        # update message on overall progress bar\n        top_descr = \"[bold #AAAAAA](%d out of %d apps installed)\" % (idx, len(apps))\n        overall_progress.update(overall_task_id, description=top_descr)\n\n        # add progress bar for steps of this app, and run the steps\n        current_task_id = current_app_progress.add_task(\"Installing app %s\" % name)\n        app_steps_task_id = app_steps_progress.add_task(\n            \"\", total=len(step_times), name=name\n        )\n        run_steps(name, step_times, app_steps_task_id)\n\n        # stop and hide steps progress bar for this specific app\n        app_steps_progress.update(app_steps_task_id, visible=False)\n        current_app_progress.stop_task(current_task_id)\n        current_app_progress.update(\n            current_task_id, description=\"[bold green]App %s installed!\" % name\n        )\n\n        # increase overall progress now this task is done\n        overall_progress.update(overall_task_id, advance=1)\n\n    # final update for message on overall progress bar\n    overall_progress.update(\n        overall_task_id, description=\"[bold green]%s apps installed, done!\" % len(apps)\n    )\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "complex", "pattern_type": "rich_panels", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.95625, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8, "asobacode_compliance": 1.0}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate Rich terminal panel for AsobaCode conversation display\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\nBasic example to show how to print an traceback of an exception\n\"\"\"\nfrom typing import List, Tuple\n\nfrom rich.console import Console\n\nconsole = Console()\n\n\ndef divide_by(number: float, divisor: float) -> float:\n    \"\"\"Divide any number by zero.\"\"\"\n    # Will throw a ZeroDivisionError if divisor is 0\n    result = number / divisor\n    return result\n\n\ndef divide_all(divides: List[Tuple[float, float]]) -> None:\n    \"\"\"Do something impossible every day.\"\"\"\n\n    for number, divisor in divides:\n        console.print(f\"dividing {number} by {divisor}\")\n        try:\n            result = divide_by(number, divisor)\n        except Exception:\n            console.print_exception(extra_lines=8, show_locals=True)\n        else:\n            console.print(f\" = {result}\")\n\n\nDIVIDES = [\n    (1000, 200),\n    (10000, 500),\n    (1, 0),\n    (0, 1000000),\n    (3.1427, 2),\n    (888, 0),\n    (2**32, 2**16),\n]\n\ndivide_all(DIVIDES)\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "simple", "pattern_type": "rich_panels", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.8537500000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8, "asobacode_compliance": 0.8}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate Rich terminal panel for AsobaCode conversation display\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\nDemonstrates export console output\n\"\"\"\n\nfrom rich.console import Console\nfrom rich.table import Table\n\nconsole = Console(record=True)\n\n\ndef print_table():\n    table = Table(title=\"Star Wars Movies\")\n\n    table.add_column(\"Released\", style=\"cyan\", no_wrap=True)\n    table.add_column(\"Title\", style=\"magenta\")\n    table.add_column(\"Box Office\", justify=\"right\", style=\"green\")\n\n    table.add_row(\"Dec 20, 2019\", \"Star Wars: The Rise of Skywalker\", \"$952,110,690\")\n    table.add_row(\"May 25, 2018\", \"Solo: A Star Wars Story\", \"$393,151,347\")\n    table.add_row(\"Dec 15, 2017\", \"Star Wars Ep. V111: The Last Jedi\", \"$1,332,539,889\")\n    table.add_row(\"Dec 16, 2016\", \"Rogue One: A Star Wars Story\", \"$1,332,439,889\")\n\n    console.print(table)\n\n\n# Prints table\nprint_table()\n\n# Get console output as text\nfile1 = \"table_export_plaintext.txt\"\ntext = console.export_text()\nwith open(file1, \"w\") as file:\n    file.write(text)\nprint(f\"Exported console output as plain text to {file1}\")\n\n# Calling print_table again because console output buffer\n# is flushed once export function is called\nprint_table()\n\n# Get console output as html\n# use clear=False so output is not flushed after export\nfile2 = \"table_export_html.html\"\nhtml = console.export_html(clear=False)\nwith open(file2, \"w\") as file:\n    file.write(html)\nprint(f\"Exported console output as html to {file2}\")\n\n# Export text output to table_export.txt\nfile3 = \"table_export_plaintext2.txt\"\nconsole.save_text(file3, clear=False)\nprint(f\"Exported console output as plain text to {file3}\")\n\n# Export html output to table_export.html\nfile4 = \"table_export_html2.html\"\nconsole.save_html(file4)\nprint(f\"Exported console output as html to {file4}\")\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "medium", "pattern_type": "rich_panels", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.8512500000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8, "asobacode_compliance": 0.8}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate Rich terminal panel for AsobaCode conversation display\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "from typing import List\n\ntry:\n    import attr\nexcept ImportError:\n    print(\"This example requires attrs library\")\n    print(\"pip install attrs\")\n    raise SystemExit()\n\n\n@attr.define\nclass Point3D:\n    x: float\n    y: float\n    z: float = 0\n\n\n@attr.define\nclass Triangle:\n    point1: Point3D\n    point2: Point3D\n    point3: Point3D\n\n\n@attr.define\nclass Model:\n    name: str\n    triangles: List[Triangle] = attr.Factory(list)\n\n\nif __name__ == \"__main__\":\n    model = Model(\n        name=\"Alien#1\",\n        triangles=[\n            Triangle(\n                Point3D(x=20, y=50),\n                Point3D(x=50, y=15, z=-45.34),\n                Point3D(3.1426, 83.2323, -16),\n            )\n        ],\n    )\n\n    from rich.console import Console\n    from rich.pretty import Pretty\n    from rich.table import Column, Table\n    from rich.text import Text\n\n    console = Console()\n\n    table = Table(\"attrs *with* Rich\", Column(Text.from_markup(\"attrs *without* Rich\")))\n\n    table.add_row(Pretty(model), repr(model))\n    console.print(table)\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "medium", "pattern_type": "rich_panels", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.8462500000000002, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8, "asobacode_compliance": 0.8}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate Rich terminal panel for AsobaCode conversation display\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\nThis example shows how to display content in columns.\n\nThe data is pulled from https://randomuser.me\n\"\"\"\n\nimport json\nfrom urllib.request import urlopen\n\nfrom rich.console import Console\nfrom rich.columns import Columns\nfrom rich.panel import Panel\n\n\ndef get_content(user):\n    \"\"\"Extract text from user dict.\"\"\"\n    country = user[\"location\"][\"country\"]\n    name = f\"{user['name']['first']} {user['name']['last']}\"\n    return f\"[b]{name}[/b]\\n[yellow]{country}\"\n\n\nconsole = Console()\n\n\nusers = json.loads(urlopen(\"https://randomuser.me/api/?results=30\").read())[\"results\"]\nconsole.print(users, overflow=\"ignore\", crop=False)\nuser_renderables = [Panel(get_content(user), expand=True) for user in users]\nconsole.print(Columns(user_renderables))\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "simple", "pattern_type": "rich_panels", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.8337500000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8, "asobacode_compliance": 0.8}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate Rich terminal panel for AsobaCode conversation display\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\nA very minimal `cp` clone that displays a progress bar.\n\"\"\"\nimport os\nimport shutil\nimport sys\n\nfrom rich.progress import Progress\n\nif __name__ == \"__main__\":\n    if len(sys.argv) == 3:\n        with Progress() as progress:\n            desc = os.path.basename(sys.argv[1])\n            with progress.open(sys.argv[1], \"rb\", description=desc) as src:\n                with open(sys.argv[2], \"wb\") as dst:\n                    shutil.copyfileobj(src, dst)\n    else:\n        print(\"Copy a file with a progress bar.\")\n        print(\"Usage:\\n\\tpython cp_progress.py SRC DST\")\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "simple", "pattern_type": "rich_panels", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.7975, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001, "asobacode_compliance": 0.7}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate Rich terminal panel for AsobaCode conversation display\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\nA rudimentary URL downloader (like wget or curl) to demonstrate Rich progress bars.\n\"\"\"\n\nimport os.path\nimport sys\nfrom concurrent.futures import ThreadPoolExecutor\nimport signal\nfrom functools import partial\nfrom threading import Event\nfrom typing import Iterable\nfrom urllib.request import urlopen\n\nfrom rich.progress import (\n    BarColumn,\n    DownloadColumn,\n    Progress,\n    TaskID,\n    TextColumn,\n    TimeRemainingColumn,\n    TransferSpeedColumn,\n)\n\nprogress = Progress(\n    TextColumn(\"[bold blue]{task.fields[filename]}\", justify=\"right\"),\n    BarColumn(bar_width=None),\n    \"[progress.percentage]{task.percentage:>3.1f}%\",\n    \"•\",\n    DownloadColumn(),\n    \"•\",\n    TransferSpeedColumn(),\n    \"•\",\n    TimeRemainingColumn(),\n)\n\n\ndone_event = Event()\n\n\ndef handle_sigint(signum, frame):\n    done_event.set()\n\n\nsignal.signal(signal.SIGINT, handle_sigint)\n\n\ndef copy_url(task_id: TaskID, url: str, path: str) -> None:\n    \"\"\"Copy data from a url to a local file.\"\"\"\n    progress.console.log(f\"Requesting {url}\")\n    response = urlopen(url)\n    # This will break if the response doesn't contain content length\n    progress.update(task_id, total=int(response.info()[\"Content-length\"]))\n    with open(path, \"wb\") as dest_file:\n        progress.start_task(task_id)\n        for data in iter(partial(response.read, 32768), b\"\"):\n            dest_file.write(data)\n            progress.update(task_id, advance=len(data))\n            if done_event.is_set():\n                return\n    progress.console.log(f\"Downloaded {path}\")\n\n\ndef download(urls: Iterable[str], dest_dir: str):\n    \"\"\"Download multiple files to the given directory.\"\"\"\n\n    with progress:\n        with ThreadPoolExecutor(max_workers=4) as pool:\n            for url in urls:\n                filename = url.split(\"/\")[-1]\n                dest_path = os.path.join(dest_dir, filename)\n                task_id = progress.add_task(\"download\", filename=filename, start=False)\n                pool.submit(copy_url, task_id, url, dest_path)\n\n\nif __name__ == \"__main__\":\n    # Try with https://releases.ubuntu.com/noble/ubuntu-24.04-desktop-amd64.iso\n    # and https://releases.ubuntu.com/noble/ubuntu-24.04-live-server-amd64.iso\n    if sys.argv[1:]:\n        download(sys.argv[1:], \"./\")\n    else:\n        print(\"Usage:\\n\\tpython downloader.py URL1 URL2 URL3 (etc)\")\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "medium", "pattern_type": "rich_panels", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.7799999999999999, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001, "asobacode_compliance": 0.7}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate Rich terminal panel for AsobaCode conversation display\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\n\nDemonstrates how to create a dynamic group of progress bars,\nshowing multi-level progress for multiple tasks (installing apps in the example),\neach of which consisting of multiple steps.\n\n\"\"\"\n\nimport time\n\nfrom rich.console import Group\nfrom rich.panel import Panel\nfrom rich.live import Live\nfrom rich.progress import (\n    BarColumn,\n    Progress,\n    SpinnerColumn,\n    TextColumn,\n    TimeElapsedColumn,\n)\n\n\ndef run_steps(name, step_times, app_steps_task_id):\n    \"\"\"Run steps for a single app, and update corresponding progress bars.\"\"\"\n\n    for idx, step_time in enumerate(step_times):\n        # add progress bar for this step (time elapsed + spinner)\n        action = step_actions[idx]\n        step_task_id = step_progress.add_task(\"\", action=action, name=name)\n\n        # run steps, update progress\n        for _ in range(step_time):\n            time.sleep(0.5)\n            step_progress.update(step_task_id, advance=1)\n\n        # stop and hide progress bar for this step when done\n        step_progress.stop_task(step_task_id)\n        step_progress.update(step_task_id, visible=False)\n\n        # also update progress bar for current app when step is done\n        app_steps_progress.update(app_steps_task_id, advance=1)\n\n\n# progress bar for current app showing only elapsed time,\n# which will stay visible when app is installed\ncurrent_app_progress = Progress(\n    TimeElapsedColumn(),\n    TextColumn(\"{task.description}\"),\n)\n\n# progress bars for single app steps (will be hidden when step is done)\nstep_progress = Progress(\n    TextColumn(\"  \"),\n    TimeElapsedColumn(),\n    TextColumn(\"[bold purple]{task.fields[action]}\"),\n    SpinnerColumn(\"simpleDots\"),\n)\n# progress bar for current app (progress in steps)\napp_steps_progress = Progress(\n    TextColumn(\n        \"[bold blue]Progress for app {task.fields[name]}: {task.percentage:.0f}%\"\n    ),\n    BarColumn(),\n    TextColumn(\"({task.completed} of {task.total} steps done)\"),\n)\n# overall progress bar\noverall_progress = Progress(\n    TimeElapsedColumn(), BarColumn(), TextColumn(\"{task.description}\")\n)\n# group of progress bars;\n# some are always visible, others will disappear when progress is complete\nprogress_group = Group(\n    Panel(Group(current_app_progress, step_progress, app_steps_progress)),\n    overall_progress,\n)\n\n# tuple specifies how long each step takes for that app\nstep_actions = (\"downloading\", \"configuring\", \"building\", \"installing\")\napps = [\n    (\"one\", (2, 1, 4, 2)),\n    (\"two\", (1, 3, 8, 4)),\n    (\"three\", (2, 1, 3, 2)),\n]\n\n# create overall progress bar\noverall_task_id = overall_progress.add_task(\"\", total=len(apps))\n\n# use own live instance as context manager with group of progress bars,\n# which allows for running multiple different progress bars in parallel,\n# and dynamically showing/hiding them\nwith Live(progress_group):\n    for idx, (name, step_times) in enumerate(apps):\n        # update message on overall progress bar\n        top_descr = \"[bold #AAAAAA](%d out of %d apps installed)\" % (idx, len(apps))\n        overall_progress.update(overall_task_id, description=top_descr)\n\n        # add progress bar for steps of this app, and run the steps\n        current_task_id = current_app_progress.add_task(\"Installing app %s\" % name)\n        app_steps_task_id = app_steps_progress.add_task(\n            \"\", total=len(step_times), name=name\n        )\n        run_steps(name, step_times, app_steps_task_id)\n\n        # stop and hide steps progress bar for this specific app\n        app_steps_progress.update(app_steps_task_id, visible=False)\n        current_app_progress.stop_task(current_task_id)\n        current_app_progress.update(\n            current_task_id, description=\"[bold green]App %s installed!\" % name\n        )\n\n        # increase overall progress now this task is done\n        overall_progress.update(overall_task_id, advance=1)\n\n    # final update for message on overall progress bar\n    overall_progress.update(\n        overall_task_id, description=\"[bold green]%s apps installed, done!\" % len(apps)\n    )\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "complex", "pattern_type": "rich_panels", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.95625, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8, "asobacode_compliance": 1.0}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate Rich terminal panel for AsobaCode conversation display\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\nBasic example to show how to print an traceback of an exception\n\"\"\"\nfrom typing import List, Tuple\n\nfrom rich.console import Console\n\nconsole = Console()\n\n\ndef divide_by(number: float, divisor: float) -> float:\n    \"\"\"Divide any number by zero.\"\"\"\n    # Will throw a ZeroDivisionError if divisor is 0\n    result = number / divisor\n    return result\n\n\ndef divide_all(divides: List[Tuple[float, float]]) -> None:\n    \"\"\"Do something impossible every day.\"\"\"\n\n    for number, divisor in divides:\n        console.print(f\"dividing {number} by {divisor}\")\n        try:\n            result = divide_by(number, divisor)\n        except Exception:\n            console.print_exception(extra_lines=8, show_locals=True)\n        else:\n            console.print(f\" = {result}\")\n\n\nDIVIDES = [\n    (1000, 200),\n    (10000, 500),\n    (1, 0),\n    (0, 1000000),\n    (3.1427, 2),\n    (888, 0),\n    (2**32, 2**16),\n]\n\ndivide_all(DIVIDES)\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "simple", "pattern_type": "rich_panels", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.8537500000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8, "asobacode_compliance": 0.8}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate Rich terminal panel for AsobaCode conversation display\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\nDemonstrates export console output\n\"\"\"\n\nfrom rich.console import Console\nfrom rich.table import Table\n\nconsole = Console(record=True)\n\n\ndef print_table():\n    table = Table(title=\"Star Wars Movies\")\n\n    table.add_column(\"Released\", style=\"cyan\", no_wrap=True)\n    table.add_column(\"Title\", style=\"magenta\")\n    table.add_column(\"Box Office\", justify=\"right\", style=\"green\")\n\n    table.add_row(\"Dec 20, 2019\", \"Star Wars: The Rise of Skywalker\", \"$952,110,690\")\n    table.add_row(\"May 25, 2018\", \"Solo: A Star Wars Story\", \"$393,151,347\")\n    table.add_row(\"Dec 15, 2017\", \"Star Wars Ep. V111: The Last Jedi\", \"$1,332,539,889\")\n    table.add_row(\"Dec 16, 2016\", \"Rogue One: A Star Wars Story\", \"$1,332,439,889\")\n\n    console.print(table)\n\n\n# Prints table\nprint_table()\n\n# Get console output as text\nfile1 = \"table_export_plaintext.txt\"\ntext = console.export_text()\nwith open(file1, \"w\") as file:\n    file.write(text)\nprint(f\"Exported console output as plain text to {file1}\")\n\n# Calling print_table again because console output buffer\n# is flushed once export function is called\nprint_table()\n\n# Get console output as html\n# use clear=False so output is not flushed after export\nfile2 = \"table_export_html.html\"\nhtml = console.export_html(clear=False)\nwith open(file2, \"w\") as file:\n    file.write(html)\nprint(f\"Exported console output as html to {file2}\")\n\n# Export text output to table_export.txt\nfile3 = \"table_export_plaintext2.txt\"\nconsole.save_text(file3, clear=False)\nprint(f\"Exported console output as plain text to {file3}\")\n\n# Export html output to table_export.html\nfile4 = \"table_export_html2.html\"\nconsole.save_html(file4)\nprint(f\"Exported console output as html to {file4}\")\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "medium", "pattern_type": "rich_panels", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.8512500000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8, "asobacode_compliance": 0.8}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate thinking animation with token tracking for AsobaCode\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\nA very minimal `cp` clone that displays a progress bar.\n\"\"\"\nimport os\nimport shutil\nimport sys\n\nfrom rich.progress import Progress\n\nif __name__ == \"__main__\":\n    if len(sys.argv) == 3:\n        with Progress() as progress:\n            desc = os.path.basename(sys.argv[1])\n            with progress.open(sys.argv[1], \"rb\", description=desc) as src:\n                with open(sys.argv[2], \"wb\") as dst:\n                    shutil.copyfileobj(src, dst)\n    else:\n        print(\"Copy a file with a progress bar.\")\n        print(\"Usage:\\n\\tpython cp_progress.py SRC DST\")\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "simple", "pattern_type": "animations", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.7975, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001, "asobacode_compliance": 0.7}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate thinking animation with token tracking for AsobaCode\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\nA rudimentary URL downloader (like wget or curl) to demonstrate Rich progress bars.\n\"\"\"\n\nimport os.path\nimport sys\nfrom concurrent.futures import ThreadPoolExecutor\nimport signal\nfrom functools import partial\nfrom threading import Event\nfrom typing import Iterable\nfrom urllib.request import urlopen\n\nfrom rich.progress import (\n    BarColumn,\n    DownloadColumn,\n    Progress,\n    TaskID,\n    TextColumn,\n    TimeRemainingColumn,\n    TransferSpeedColumn,\n)\n\nprogress = Progress(\n    TextColumn(\"[bold blue]{task.fields[filename]}\", justify=\"right\"),\n    BarColumn(bar_width=None),\n    \"[progress.percentage]{task.percentage:>3.1f}%\",\n    \"•\",\n    DownloadColumn(),\n    \"•\",\n    TransferSpeedColumn(),\n    \"•\",\n    TimeRemainingColumn(),\n)\n\n\ndone_event = Event()\n\n\ndef handle_sigint(signum, frame):\n    done_event.set()\n\n\nsignal.signal(signal.SIGINT, handle_sigint)\n\n\ndef copy_url(task_id: TaskID, url: str, path: str) -> None:\n    \"\"\"Copy data from a url to a local file.\"\"\"\n    progress.console.log(f\"Requesting {url}\")\n    response = urlopen(url)\n    # This will break if the response doesn't contain content length\n    progress.update(task_id, total=int(response.info()[\"Content-length\"]))\n    with open(path, \"wb\") as dest_file:\n        progress.start_task(task_id)\n        for data in iter(partial(response.read, 32768), b\"\"):\n            dest_file.write(data)\n            progress.update(task_id, advance=len(data))\n            if done_event.is_set():\n                return\n    progress.console.log(f\"Downloaded {path}\")\n\n\ndef download(urls: Iterable[str], dest_dir: str):\n    \"\"\"Download multiple files to the given directory.\"\"\"\n\n    with progress:\n        with ThreadPoolExecutor(max_workers=4) as pool:\n            for url in urls:\n                filename = url.split(\"/\")[-1]\n                dest_path = os.path.join(dest_dir, filename)\n                task_id = progress.add_task(\"download\", filename=filename, start=False)\n                pool.submit(copy_url, task_id, url, dest_path)\n\n\nif __name__ == \"__main__\":\n    # Try with https://releases.ubuntu.com/noble/ubuntu-24.04-desktop-amd64.iso\n    # and https://releases.ubuntu.com/noble/ubuntu-24.04-live-server-amd64.iso\n    if sys.argv[1:]:\n        download(sys.argv[1:], \"./\")\n    else:\n        print(\"Usage:\\n\\tpython downloader.py URL1 URL2 URL3 (etc)\")\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "medium", "pattern_type": "animations", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.7799999999999999, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001, "asobacode_compliance": 0.7}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate thinking animation with token tracking for AsobaCode\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\n\nDemonstrates how to create a dynamic group of progress bars,\nshowing multi-level progress for multiple tasks (installing apps in the example),\neach of which consisting of multiple steps.\n\n\"\"\"\n\nimport time\n\nfrom rich.console import Group\nfrom rich.panel import Panel\nfrom rich.live import Live\nfrom rich.progress import (\n    BarColumn,\n    Progress,\n    SpinnerColumn,\n    TextColumn,\n    TimeElapsedColumn,\n)\n\n\ndef run_steps(name, step_times, app_steps_task_id):\n    \"\"\"Run steps for a single app, and update corresponding progress bars.\"\"\"\n\n    for idx, step_time in enumerate(step_times):\n        # add progress bar for this step (time elapsed + spinner)\n        action = step_actions[idx]\n        step_task_id = step_progress.add_task(\"\", action=action, name=name)\n\n        # run steps, update progress\n        for _ in range(step_time):\n            time.sleep(0.5)\n            step_progress.update(step_task_id, advance=1)\n\n        # stop and hide progress bar for this step when done\n        step_progress.stop_task(step_task_id)\n        step_progress.update(step_task_id, visible=False)\n\n        # also update progress bar for current app when step is done\n        app_steps_progress.update(app_steps_task_id, advance=1)\n\n\n# progress bar for current app showing only elapsed time,\n# which will stay visible when app is installed\ncurrent_app_progress = Progress(\n    TimeElapsedColumn(),\n    TextColumn(\"{task.description}\"),\n)\n\n# progress bars for single app steps (will be hidden when step is done)\nstep_progress = Progress(\n    TextColumn(\"  \"),\n    TimeElapsedColumn(),\n    TextColumn(\"[bold purple]{task.fields[action]}\"),\n    SpinnerColumn(\"simpleDots\"),\n)\n# progress bar for current app (progress in steps)\napp_steps_progress = Progress(\n    TextColumn(\n        \"[bold blue]Progress for app {task.fields[name]}: {task.percentage:.0f}%\"\n    ),\n    BarColumn(),\n    TextColumn(\"({task.completed} of {task.total} steps done)\"),\n)\n# overall progress bar\noverall_progress = Progress(\n    TimeElapsedColumn(), BarColumn(), TextColumn(\"{task.description}\")\n)\n# group of progress bars;\n# some are always visible, others will disappear when progress is complete\nprogress_group = Group(\n    Panel(Group(current_app_progress, step_progress, app_steps_progress)),\n    overall_progress,\n)\n\n# tuple specifies how long each step takes for that app\nstep_actions = (\"downloading\", \"configuring\", \"building\", \"installing\")\napps = [\n    (\"one\", (2, 1, 4, 2)),\n    (\"two\", (1, 3, 8, 4)),\n    (\"three\", (2, 1, 3, 2)),\n]\n\n# create overall progress bar\noverall_task_id = overall_progress.add_task(\"\", total=len(apps))\n\n# use own live instance as context manager with group of progress bars,\n# which allows for running multiple different progress bars in parallel,\n# and dynamically showing/hiding them\nwith Live(progress_group):\n    for idx, (name, step_times) in enumerate(apps):\n        # update message on overall progress bar\n        top_descr = \"[bold #AAAAAA](%d out of %d apps installed)\" % (idx, len(apps))\n        overall_progress.update(overall_task_id, description=top_descr)\n\n        # add progress bar for steps of this app, and run the steps\n        current_task_id = current_app_progress.add_task(\"Installing app %s\" % name)\n        app_steps_task_id = app_steps_progress.add_task(\n            \"\", total=len(step_times), name=name\n        )\n        run_steps(name, step_times, app_steps_task_id)\n\n        # stop and hide steps progress bar for this specific app\n        app_steps_progress.update(app_steps_task_id, visible=False)\n        current_app_progress.stop_task(current_task_id)\n        current_app_progress.update(\n            current_task_id, description=\"[bold green]App %s installed!\" % name\n        )\n\n        # increase overall progress now this task is done\n        overall_progress.update(overall_task_id, advance=1)\n\n    # final update for message on overall progress bar\n    overall_progress.update(\n        overall_task_id, description=\"[bold green]%s apps installed, done!\" % len(apps)\n    )\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "complex", "pattern_type": "animations", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.95625, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8, "asobacode_compliance": 1.0}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate thinking animation with token tracking for AsobaCode\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\nA very minimal `cp` clone that displays a progress bar.\n\"\"\"\nimport os\nimport shutil\nimport sys\n\nfrom rich.progress import Progress\n\nif __name__ == \"__main__\":\n    if len(sys.argv) == 3:\n        with Progress() as progress:\n            desc = os.path.basename(sys.argv[1])\n            with progress.open(sys.argv[1], \"rb\", description=desc) as src:\n                with open(sys.argv[2], \"wb\") as dst:\n                    shutil.copyfileobj(src, dst)\n    else:\n        print(\"Copy a file with a progress bar.\")\n        print(\"Usage:\\n\\tpython cp_progress.py SRC DST\")\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "simple", "pattern_type": "animations", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.7975, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001, "asobacode_compliance": 0.7}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate thinking animation with token tracking for AsobaCode\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\nA rudimentary URL downloader (like wget or curl) to demonstrate Rich progress bars.\n\"\"\"\n\nimport os.path\nimport sys\nfrom concurrent.futures import ThreadPoolExecutor\nimport signal\nfrom functools import partial\nfrom threading import Event\nfrom typing import Iterable\nfrom urllib.request import urlopen\n\nfrom rich.progress import (\n    BarColumn,\n    DownloadColumn,\n    Progress,\n    TaskID,\n    TextColumn,\n    TimeRemainingColumn,\n    TransferSpeedColumn,\n)\n\nprogress = Progress(\n    TextColumn(\"[bold blue]{task.fields[filename]}\", justify=\"right\"),\n    BarColumn(bar_width=None),\n    \"[progress.percentage]{task.percentage:>3.1f}%\",\n    \"•\",\n    DownloadColumn(),\n    \"•\",\n    TransferSpeedColumn(),\n    \"•\",\n    TimeRemainingColumn(),\n)\n\n\ndone_event = Event()\n\n\ndef handle_sigint(signum, frame):\n    done_event.set()\n\n\nsignal.signal(signal.SIGINT, handle_sigint)\n\n\ndef copy_url(task_id: TaskID, url: str, path: str) -> None:\n    \"\"\"Copy data from a url to a local file.\"\"\"\n    progress.console.log(f\"Requesting {url}\")\n    response = urlopen(url)\n    # This will break if the response doesn't contain content length\n    progress.update(task_id, total=int(response.info()[\"Content-length\"]))\n    with open(path, \"wb\") as dest_file:\n        progress.start_task(task_id)\n        for data in iter(partial(response.read, 32768), b\"\"):\n            dest_file.write(data)\n            progress.update(task_id, advance=len(data))\n            if done_event.is_set():\n                return\n    progress.console.log(f\"Downloaded {path}\")\n\n\ndef download(urls: Iterable[str], dest_dir: str):\n    \"\"\"Download multiple files to the given directory.\"\"\"\n\n    with progress:\n        with ThreadPoolExecutor(max_workers=4) as pool:\n            for url in urls:\n                filename = url.split(\"/\")[-1]\n                dest_path = os.path.join(dest_dir, filename)\n                task_id = progress.add_task(\"download\", filename=filename, start=False)\n                pool.submit(copy_url, task_id, url, dest_path)\n\n\nif __name__ == \"__main__\":\n    # Try with https://releases.ubuntu.com/noble/ubuntu-24.04-desktop-amd64.iso\n    # and https://releases.ubuntu.com/noble/ubuntu-24.04-live-server-amd64.iso\n    if sys.argv[1:]:\n        download(sys.argv[1:], \"./\")\n    else:\n        print(\"Usage:\\n\\tpython downloader.py URL1 URL2 URL3 (etc)\")\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "medium", "pattern_type": "animations", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.7799999999999999, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001, "asobacode_compliance": 0.7}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate thinking animation with token tracking for AsobaCode\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\n\nDemonstrates how to create a dynamic group of progress bars,\nshowing multi-level progress for multiple tasks (installing apps in the example),\neach of which consisting of multiple steps.\n\n\"\"\"\n\nimport time\n\nfrom rich.console import Group\nfrom rich.panel import Panel\nfrom rich.live import Live\nfrom rich.progress import (\n    BarColumn,\n    Progress,\n    SpinnerColumn,\n    TextColumn,\n    TimeElapsedColumn,\n)\n\n\ndef run_steps(name, step_times, app_steps_task_id):\n    \"\"\"Run steps for a single app, and update corresponding progress bars.\"\"\"\n\n    for idx, step_time in enumerate(step_times):\n        # add progress bar for this step (time elapsed + spinner)\n        action = step_actions[idx]\n        step_task_id = step_progress.add_task(\"\", action=action, name=name)\n\n        # run steps, update progress\n        for _ in range(step_time):\n            time.sleep(0.5)\n            step_progress.update(step_task_id, advance=1)\n\n        # stop and hide progress bar for this step when done\n        step_progress.stop_task(step_task_id)\n        step_progress.update(step_task_id, visible=False)\n\n        # also update progress bar for current app when step is done\n        app_steps_progress.update(app_steps_task_id, advance=1)\n\n\n# progress bar for current app showing only elapsed time,\n# which will stay visible when app is installed\ncurrent_app_progress = Progress(\n    TimeElapsedColumn(),\n    TextColumn(\"{task.description}\"),\n)\n\n# progress bars for single app steps (will be hidden when step is done)\nstep_progress = Progress(\n    TextColumn(\"  \"),\n    TimeElapsedColumn(),\n    TextColumn(\"[bold purple]{task.fields[action]}\"),\n    SpinnerColumn(\"simpleDots\"),\n)\n# progress bar for current app (progress in steps)\napp_steps_progress = Progress(\n    TextColumn(\n        \"[bold blue]Progress for app {task.fields[name]}: {task.percentage:.0f}%\"\n    ),\n    BarColumn(),\n    TextColumn(\"({task.completed} of {task.total} steps done)\"),\n)\n# overall progress bar\noverall_progress = Progress(\n    TimeElapsedColumn(), BarColumn(), TextColumn(\"{task.description}\")\n)\n# group of progress bars;\n# some are always visible, others will disappear when progress is complete\nprogress_group = Group(\n    Panel(Group(current_app_progress, step_progress, app_steps_progress)),\n    overall_progress,\n)\n\n# tuple specifies how long each step takes for that app\nstep_actions = (\"downloading\", \"configuring\", \"building\", \"installing\")\napps = [\n    (\"one\", (2, 1, 4, 2)),\n    (\"two\", (1, 3, 8, 4)),\n    (\"three\", (2, 1, 3, 2)),\n]\n\n# create overall progress bar\noverall_task_id = overall_progress.add_task(\"\", total=len(apps))\n\n# use own live instance as context manager with group of progress bars,\n# which allows for running multiple different progress bars in parallel,\n# and dynamically showing/hiding them\nwith Live(progress_group):\n    for idx, (name, step_times) in enumerate(apps):\n        # update message on overall progress bar\n        top_descr = \"[bold #AAAAAA](%d out of %d apps installed)\" % (idx, len(apps))\n        overall_progress.update(overall_task_id, description=top_descr)\n\n        # add progress bar for steps of this app, and run the steps\n        current_task_id = current_app_progress.add_task(\"Installing app %s\" % name)\n        app_steps_task_id = app_steps_progress.add_task(\n            \"\", total=len(step_times), name=name\n        )\n        run_steps(name, step_times, app_steps_task_id)\n\n        # stop and hide steps progress bar for this specific app\n        app_steps_progress.update(app_steps_task_id, visible=False)\n        current_app_progress.stop_task(current_task_id)\n        current_app_progress.update(\n            current_task_id, description=\"[bold green]App %s installed!\" % name\n        )\n\n        # increase overall progress now this task is done\n        overall_progress.update(overall_task_id, advance=1)\n\n    # final update for message on overall progress bar\n    overall_progress.update(\n        overall_task_id, description=\"[bold green]%s apps installed, done!\" % len(apps)\n    )\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "complex", "pattern_type": "animations", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.95625, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8, "asobacode_compliance": 1.0}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate Rich table for displaying AsobaCode server status\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "from typing import List\n\ntry:\n    import attr\nexcept ImportError:\n    print(\"This example requires attrs library\")\n    print(\"pip install attrs\")\n    raise SystemExit()\n\n\n@attr.define\nclass Point3D:\n    x: float\n    y: float\n    z: float = 0\n\n\n@attr.define\nclass Triangle:\n    point1: Point3D\n    point2: Point3D\n    point3: Point3D\n\n\n@attr.define\nclass Model:\n    name: str\n    triangles: List[Triangle] = attr.Factory(list)\n\n\nif __name__ == \"__main__\":\n    model = Model(\n        name=\"Alien#1\",\n        triangles=[\n            Triangle(\n                Point3D(x=20, y=50),\n                Point3D(x=50, y=15, z=-45.34),\n                Point3D(3.1426, 83.2323, -16),\n            )\n        ],\n    )\n\n    from rich.console import Console\n    from rich.pretty import Pretty\n    from rich.table import Column, Table\n    from rich.text import Text\n\n    console = Console()\n\n    table = Table(\"attrs *with* Rich\", Column(Text.from_markup(\"attrs *without* Rich\")))\n\n    table.add_row(Pretty(model), repr(model))\n    console.print(table)\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "medium", "pattern_type": "tables", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.8462500000000002, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8, "asobacode_compliance": 0.8}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate Rich table for displaying AsobaCode server status\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\nDemonstrates export console output\n\"\"\"\n\nfrom rich.console import Console\nfrom rich.table import Table\n\nconsole = Console(record=True)\n\n\ndef print_table():\n    table = Table(title=\"Star Wars Movies\")\n\n    table.add_column(\"Released\", style=\"cyan\", no_wrap=True)\n    table.add_column(\"Title\", style=\"magenta\")\n    table.add_column(\"Box Office\", justify=\"right\", style=\"green\")\n\n    table.add_row(\"Dec 20, 2019\", \"Star Wars: The Rise of Skywalker\", \"$952,110,690\")\n    table.add_row(\"May 25, 2018\", \"Solo: A Star Wars Story\", \"$393,151,347\")\n    table.add_row(\"Dec 15, 2017\", \"Star Wars Ep. V111: The Last Jedi\", \"$1,332,539,889\")\n    table.add_row(\"Dec 16, 2016\", \"Rogue One: A Star Wars Story\", \"$1,332,439,889\")\n\n    console.print(table)\n\n\n# Prints table\nprint_table()\n\n# Get console output as text\nfile1 = \"table_export_plaintext.txt\"\ntext = console.export_text()\nwith open(file1, \"w\") as file:\n    file.write(text)\nprint(f\"Exported console output as plain text to {file1}\")\n\n# Calling print_table again because console output buffer\n# is flushed once export function is called\nprint_table()\n\n# Get console output as html\n# use clear=False so output is not flushed after export\nfile2 = \"table_export_html.html\"\nhtml = console.export_html(clear=False)\nwith open(file2, \"w\") as file:\n    file.write(html)\nprint(f\"Exported console output as html to {file2}\")\n\n# Export text output to table_export.txt\nfile3 = \"table_export_plaintext2.txt\"\nconsole.save_text(file3, clear=False)\nprint(f\"Exported console output as plain text to {file3}\")\n\n# Export html output to table_export.html\nfile4 = \"table_export_html2.html\"\nconsole.save_html(file4)\nprint(f\"Exported console output as html to {file4}\")\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "medium", "pattern_type": "tables", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.8512500000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8, "asobacode_compliance": 0.8}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate Rich table for displaying AsobaCode server status\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "from typing import List\n\ntry:\n    import attr\nexcept ImportError:\n    print(\"This example requires attrs library\")\n    print(\"pip install attrs\")\n    raise SystemExit()\n\n\n@attr.define\nclass Point3D:\n    x: float\n    y: float\n    z: float = 0\n\n\n@attr.define\nclass Triangle:\n    point1: Point3D\n    point2: Point3D\n    point3: Point3D\n\n\n@attr.define\nclass Model:\n    name: str\n    triangles: List[Triangle] = attr.Factory(list)\n\n\nif __name__ == \"__main__\":\n    model = Model(\n        name=\"Alien#1\",\n        triangles=[\n            Triangle(\n                Point3D(x=20, y=50),\n                Point3D(x=50, y=15, z=-45.34),\n                Point3D(3.1426, 83.2323, -16),\n            )\n        ],\n    )\n\n    from rich.console import Console\n    from rich.pretty import Pretty\n    from rich.table import Column, Table\n    from rich.text import Text\n\n    console = Console()\n\n    table = Table(\"attrs *with* Rich\", Column(Text.from_markup(\"attrs *without* Rich\")))\n\n    table.add_row(Pretty(model), repr(model))\n    console.print(table)\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "medium", "pattern_type": "tables", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.8462500000000002, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8, "asobacode_compliance": 0.8}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate Rich table for displaying AsobaCode server status\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\nDemonstrates export console output\n\"\"\"\n\nfrom rich.console import Console\nfrom rich.table import Table\n\nconsole = Console(record=True)\n\n\ndef print_table():\n    table = Table(title=\"Star Wars Movies\")\n\n    table.add_column(\"Released\", style=\"cyan\", no_wrap=True)\n    table.add_column(\"Title\", style=\"magenta\")\n    table.add_column(\"Box Office\", justify=\"right\", style=\"green\")\n\n    table.add_row(\"Dec 20, 2019\", \"Star Wars: The Rise of Skywalker\", \"$952,110,690\")\n    table.add_row(\"May 25, 2018\", \"Solo: A Star Wars Story\", \"$393,151,347\")\n    table.add_row(\"Dec 15, 2017\", \"Star Wars Ep. V111: The Last Jedi\", \"$1,332,539,889\")\n    table.add_row(\"Dec 16, 2016\", \"Rogue One: A Star Wars Story\", \"$1,332,439,889\")\n\n    console.print(table)\n\n\n# Prints table\nprint_table()\n\n# Get console output as text\nfile1 = \"table_export_plaintext.txt\"\ntext = console.export_text()\nwith open(file1, \"w\") as file:\n    file.write(text)\nprint(f\"Exported console output as plain text to {file1}\")\n\n# Calling print_table again because console output buffer\n# is flushed once export function is called\nprint_table()\n\n# Get console output as html\n# use clear=False so output is not flushed after export\nfile2 = \"table_export_html.html\"\nhtml = console.export_html(clear=False)\nwith open(file2, \"w\") as file:\n    file.write(html)\nprint(f\"Exported console output as html to {file2}\")\n\n# Export text output to table_export.txt\nfile3 = \"table_export_plaintext2.txt\"\nconsole.save_text(file3, clear=False)\nprint(f\"Exported console output as plain text to {file3}\")\n\n# Export html output to table_export.html\nfile4 = \"table_export_html2.html\"\nconsole.save_html(file4)\nprint(f\"Exported console output as html to {file4}\")\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "medium", "pattern_type": "tables", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.8512500000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8, "asobacode_compliance": 0.8}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate interactive terminal prompt for AsobaCode CLI\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\nA rudimentary URL downloader (like wget or curl) to demonstrate Rich progress bars.\n\"\"\"\n\nimport os.path\nimport sys\nfrom concurrent.futures import ThreadPoolExecutor\nimport signal\nfrom functools import partial\nfrom threading import Event\nfrom typing import Iterable\nfrom urllib.request import urlopen\n\nfrom rich.progress import (\n    BarColumn,\n    DownloadColumn,\n    Progress,\n    TaskID,\n    TextColumn,\n    TimeRemainingColumn,\n    TransferSpeedColumn,\n)\n\nprogress = Progress(\n    TextColumn(\"[bold blue]{task.fields[filename]}\", justify=\"right\"),\n    BarColumn(bar_width=None),\n    \"[progress.percentage]{task.percentage:>3.1f}%\",\n    \"•\",\n    DownloadColumn(),\n    \"•\",\n    TransferSpeedColumn(),\n    \"•\",\n    TimeRemainingColumn(),\n)\n\n\ndone_event = Event()\n\n\ndef handle_sigint(signum, frame):\n    done_event.set()\n\n\nsignal.signal(signal.SIGINT, handle_sigint)\n\n\ndef copy_url(task_id: TaskID, url: str, path: str) -> None:\n    \"\"\"Copy data from a url to a local file.\"\"\"\n    progress.console.log(f\"Requesting {url}\")\n    response = urlopen(url)\n    # This will break if the response doesn't contain content length\n    progress.update(task_id, total=int(response.info()[\"Content-length\"]))\n    with open(path, \"wb\") as dest_file:\n        progress.start_task(task_id)\n        for data in iter(partial(response.read, 32768), b\"\"):\n            dest_file.write(data)\n            progress.update(task_id, advance=len(data))\n            if done_event.is_set():\n                return\n    progress.console.log(f\"Downloaded {path}\")\n\n\ndef download(urls: Iterable[str], dest_dir: str):\n    \"\"\"Download multiple files to the given directory.\"\"\"\n\n    with progress:\n        with ThreadPoolExecutor(max_workers=4) as pool:\n            for url in urls:\n                filename = url.split(\"/\")[-1]\n                dest_path = os.path.join(dest_dir, filename)\n                task_id = progress.add_task(\"download\", filename=filename, start=False)\n                pool.submit(copy_url, task_id, url, dest_path)\n\n\nif __name__ == \"__main__\":\n    # Try with https://releases.ubuntu.com/noble/ubuntu-24.04-desktop-amd64.iso\n    # and https://releases.ubuntu.com/noble/ubuntu-24.04-live-server-amd64.iso\n    if sys.argv[1:]:\n        download(sys.argv[1:], \"./\")\n    else:\n        print(\"Usage:\\n\\tpython downloader.py URL1 URL2 URL3 (etc)\")\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "medium", "pattern_type": "interactive", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.7799999999999999, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001, "asobacode_compliance": 0.7}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate interactive terminal prompt for AsobaCode CLI\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\n\nDemonstrates how to create a dynamic group of progress bars,\nshowing multi-level progress for multiple tasks (installing apps in the example),\neach of which consisting of multiple steps.\n\n\"\"\"\n\nimport time\n\nfrom rich.console import Group\nfrom rich.panel import Panel\nfrom rich.live import Live\nfrom rich.progress import (\n    BarColumn,\n    Progress,\n    SpinnerColumn,\n    TextColumn,\n    TimeElapsedColumn,\n)\n\n\ndef run_steps(name, step_times, app_steps_task_id):\n    \"\"\"Run steps for a single app, and update corresponding progress bars.\"\"\"\n\n    for idx, step_time in enumerate(step_times):\n        # add progress bar for this step (time elapsed + spinner)\n        action = step_actions[idx]\n        step_task_id = step_progress.add_task(\"\", action=action, name=name)\n\n        # run steps, update progress\n        for _ in range(step_time):\n            time.sleep(0.5)\n            step_progress.update(step_task_id, advance=1)\n\n        # stop and hide progress bar for this step when done\n        step_progress.stop_task(step_task_id)\n        step_progress.update(step_task_id, visible=False)\n\n        # also update progress bar for current app when step is done\n        app_steps_progress.update(app_steps_task_id, advance=1)\n\n\n# progress bar for current app showing only elapsed time,\n# which will stay visible when app is installed\ncurrent_app_progress = Progress(\n    TimeElapsedColumn(),\n    TextColumn(\"{task.description}\"),\n)\n\n# progress bars for single app steps (will be hidden when step is done)\nstep_progress = Progress(\n    TextColumn(\"  \"),\n    TimeElapsedColumn(),\n    TextColumn(\"[bold purple]{task.fields[action]}\"),\n    SpinnerColumn(\"simpleDots\"),\n)\n# progress bar for current app (progress in steps)\napp_steps_progress = Progress(\n    TextColumn(\n        \"[bold blue]Progress for app {task.fields[name]}: {task.percentage:.0f}%\"\n    ),\n    BarColumn(),\n    TextColumn(\"({task.completed} of {task.total} steps done)\"),\n)\n# overall progress bar\noverall_progress = Progress(\n    TimeElapsedColumn(), BarColumn(), TextColumn(\"{task.description}\")\n)\n# group of progress bars;\n# some are always visible, others will disappear when progress is complete\nprogress_group = Group(\n    Panel(Group(current_app_progress, step_progress, app_steps_progress)),\n    overall_progress,\n)\n\n# tuple specifies how long each step takes for that app\nstep_actions = (\"downloading\", \"configuring\", \"building\", \"installing\")\napps = [\n    (\"one\", (2, 1, 4, 2)),\n    (\"two\", (1, 3, 8, 4)),\n    (\"three\", (2, 1, 3, 2)),\n]\n\n# create overall progress bar\noverall_task_id = overall_progress.add_task(\"\", total=len(apps))\n\n# use own live instance as context manager with group of progress bars,\n# which allows for running multiple different progress bars in parallel,\n# and dynamically showing/hiding them\nwith Live(progress_group):\n    for idx, (name, step_times) in enumerate(apps):\n        # update message on overall progress bar\n        top_descr = \"[bold #AAAAAA](%d out of %d apps installed)\" % (idx, len(apps))\n        overall_progress.update(overall_task_id, description=top_descr)\n\n        # add progress bar for steps of this app, and run the steps\n        current_task_id = current_app_progress.add_task(\"Installing app %s\" % name)\n        app_steps_task_id = app_steps_progress.add_task(\n            \"\", total=len(step_times), name=name\n        )\n        run_steps(name, step_times, app_steps_task_id)\n\n        # stop and hide steps progress bar for this specific app\n        app_steps_progress.update(app_steps_task_id, visible=False)\n        current_app_progress.stop_task(current_task_id)\n        current_app_progress.update(\n            current_task_id, description=\"[bold green]App %s installed!\" % name\n        )\n\n        # increase overall progress now this task is done\n        overall_progress.update(overall_task_id, advance=1)\n\n    # final update for message on overall progress bar\n    overall_progress.update(\n        overall_task_id, description=\"[bold green]%s apps installed, done!\" % len(apps)\n    )\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "complex", "pattern_type": "interactive", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.95625, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8, "asobacode_compliance": 1.0}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate interactive terminal prompt for AsobaCode CLI\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\nA rudimentary URL downloader (like wget or curl) to demonstrate Rich progress bars.\n\"\"\"\n\nimport os.path\nimport sys\nfrom concurrent.futures import ThreadPoolExecutor\nimport signal\nfrom functools import partial\nfrom threading import Event\nfrom typing import Iterable\nfrom urllib.request import urlopen\n\nfrom rich.progress import (\n    BarColumn,\n    DownloadColumn,\n    Progress,\n    TaskID,\n    TextColumn,\n    TimeRemainingColumn,\n    TransferSpeedColumn,\n)\n\nprogress = Progress(\n    TextColumn(\"[bold blue]{task.fields[filename]}\", justify=\"right\"),\n    BarColumn(bar_width=None),\n    \"[progress.percentage]{task.percentage:>3.1f}%\",\n    \"•\",\n    DownloadColumn(),\n    \"•\",\n    TransferSpeedColumn(),\n    \"•\",\n    TimeRemainingColumn(),\n)\n\n\ndone_event = Event()\n\n\ndef handle_sigint(signum, frame):\n    done_event.set()\n\n\nsignal.signal(signal.SIGINT, handle_sigint)\n\n\ndef copy_url(task_id: TaskID, url: str, path: str) -> None:\n    \"\"\"Copy data from a url to a local file.\"\"\"\n    progress.console.log(f\"Requesting {url}\")\n    response = urlopen(url)\n    # This will break if the response doesn't contain content length\n    progress.update(task_id, total=int(response.info()[\"Content-length\"]))\n    with open(path, \"wb\") as dest_file:\n        progress.start_task(task_id)\n        for data in iter(partial(response.read, 32768), b\"\"):\n            dest_file.write(data)\n            progress.update(task_id, advance=len(data))\n            if done_event.is_set():\n                return\n    progress.console.log(f\"Downloaded {path}\")\n\n\ndef download(urls: Iterable[str], dest_dir: str):\n    \"\"\"Download multiple files to the given directory.\"\"\"\n\n    with progress:\n        with ThreadPoolExecutor(max_workers=4) as pool:\n            for url in urls:\n                filename = url.split(\"/\")[-1]\n                dest_path = os.path.join(dest_dir, filename)\n                task_id = progress.add_task(\"download\", filename=filename, start=False)\n                pool.submit(copy_url, task_id, url, dest_path)\n\n\nif __name__ == \"__main__\":\n    # Try with https://releases.ubuntu.com/noble/ubuntu-24.04-desktop-amd64.iso\n    # and https://releases.ubuntu.com/noble/ubuntu-24.04-live-server-amd64.iso\n    if sys.argv[1:]:\n        download(sys.argv[1:], \"./\")\n    else:\n        print(\"Usage:\\n\\tpython downloader.py URL1 URL2 URL3 (etc)\")\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "medium", "pattern_type": "interactive", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.7799999999999999, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001, "asobacode_compliance": 0.7}}
{"domain": "asobacode_mcp_business_analysis", "category": "terminal_interface_patterns", "prompt": "### AsobaCode MCP Request (CLAUDE.md):\nCreate interactive terminal prompt for AsobaCode CLI\n\n### EXPLORE Phase:\nAnalyze terminal UI requirements and user interaction patterns.\n\n### PLAN Phase:\nDesign Rich UI component with AsobaCode conversation style.\n\n### CODE Phase:", "completion": "\"\"\"\n\nDemonstrates how to create a dynamic group of progress bars,\nshowing multi-level progress for multiple tasks (installing apps in the example),\neach of which consisting of multiple steps.\n\n\"\"\"\n\nimport time\n\nfrom rich.console import Group\nfrom rich.panel import Panel\nfrom rich.live import Live\nfrom rich.progress import (\n    BarColumn,\n    Progress,\n    SpinnerColumn,\n    TextColumn,\n    TimeElapsedColumn,\n)\n\n\ndef run_steps(name, step_times, app_steps_task_id):\n    \"\"\"Run steps for a single app, and update corresponding progress bars.\"\"\"\n\n    for idx, step_time in enumerate(step_times):\n        # add progress bar for this step (time elapsed + spinner)\n        action = step_actions[idx]\n        step_task_id = step_progress.add_task(\"\", action=action, name=name)\n\n        # run steps, update progress\n        for _ in range(step_time):\n            time.sleep(0.5)\n            step_progress.update(step_task_id, advance=1)\n\n        # stop and hide progress bar for this step when done\n        step_progress.stop_task(step_task_id)\n        step_progress.update(step_task_id, visible=False)\n\n        # also update progress bar for current app when step is done\n        app_steps_progress.update(app_steps_task_id, advance=1)\n\n\n# progress bar for current app showing only elapsed time,\n# which will stay visible when app is installed\ncurrent_app_progress = Progress(\n    TimeElapsedColumn(),\n    TextColumn(\"{task.description}\"),\n)\n\n# progress bars for single app steps (will be hidden when step is done)\nstep_progress = Progress(\n    TextColumn(\"  \"),\n    TimeElapsedColumn(),\n    TextColumn(\"[bold purple]{task.fields[action]}\"),\n    SpinnerColumn(\"simpleDots\"),\n)\n# progress bar for current app (progress in steps)\napp_steps_progress = Progress(\n    TextColumn(\n        \"[bold blue]Progress for app {task.fields[name]}: {task.percentage:.0f}%\"\n    ),\n    BarColumn(),\n    TextColumn(\"({task.completed} of {task.total} steps done)\"),\n)\n# overall progress bar\noverall_progress = Progress(\n    TimeElapsedColumn(), BarColumn(), TextColumn(\"{task.description}\")\n)\n# group of progress bars;\n# some are always visible, others will disappear when progress is complete\nprogress_group = Group(\n    Panel(Group(current_app_progress, step_progress, app_steps_progress)),\n    overall_progress,\n)\n\n# tuple specifies how long each step takes for that app\nstep_actions = (\"downloading\", \"configuring\", \"building\", \"installing\")\napps = [\n    (\"one\", (2, 1, 4, 2)),\n    (\"two\", (1, 3, 8, 4)),\n    (\"three\", (2, 1, 3, 2)),\n]\n\n# create overall progress bar\noverall_task_id = overall_progress.add_task(\"\", total=len(apps))\n\n# use own live instance as context manager with group of progress bars,\n# which allows for running multiple different progress bars in parallel,\n# and dynamically showing/hiding them\nwith Live(progress_group):\n    for idx, (name, step_times) in enumerate(apps):\n        # update message on overall progress bar\n        top_descr = \"[bold #AAAAAA](%d out of %d apps installed)\" % (idx, len(apps))\n        overall_progress.update(overall_task_id, description=top_descr)\n\n        # add progress bar for steps of this app, and run the steps\n        current_task_id = current_app_progress.add_task(\"Installing app %s\" % name)\n        app_steps_task_id = app_steps_progress.add_task(\n            \"\", total=len(step_times), name=name\n        )\n        run_steps(name, step_times, app_steps_task_id)\n\n        # stop and hide steps progress bar for this specific app\n        app_steps_progress.update(app_steps_task_id, visible=False)\n        current_app_progress.stop_task(current_task_id)\n        current_app_progress.update(\n            current_task_id, description=\"[bold green]App %s installed!\" % name\n        )\n\n        # increase overall progress now this task is done\n        overall_progress.update(overall_task_id, advance=1)\n\n    # final update for message on overall progress bar\n    overall_progress.update(\n        overall_task_id, description=\"[bold green]%s apps installed, done!\" % len(apps)\n    )\n", "metadata": {"source": "github.com/Textualize/rich", "language": "python", "complexity": "complex", "pattern_type": "interactive", "authority_level": "high", "authentic": true}, "validation": {"overall_quality": 0.95625, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8, "asobacode_compliance": 1.0}}
