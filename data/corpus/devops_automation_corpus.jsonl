{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Issue assignment\n\non:\n    issues:\n        types: [opened]\n\njobs:\n    auto-assign:\n        runs-on: ubuntu-latest\n        steps:\n            - name: 'Auto-assign issue'\n              uses: pozil/auto-assign-issue@v1.11.0\n              with:\n                  assignees: phantsure,tiwarishub,anuragc617,vsvipul,bishal-pdmsft\n                  numOfAssignee: 1\n", "metadata": {"source": "github.com/actions/starter-workflows", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/auto-assign-issues.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: 'Auto Assign'\non:\n  pull_request_target:\n    types: [opened, ready_for_review]\n\njobs:\n  add-reviews:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: kentaro-m/auto-assign-action@v1.2.2\n", "metadata": {"source": "github.com/actions/starter-workflows", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/auto-assign.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8825000000000002, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Close as a feature\non:\n  issues:\n    types: [labeled]\n\njobs:\n  build:\n    permissions:\n      issues: write\n    runs-on: ubuntu-latest\n    steps:\n    - name: Close Issue\n      uses: peter-evans/close-issue@v3\n      if: contains(github.event.issue.labels.*.name, 'feature')\n      with:\n        comment: |\n          Thank you 🙇 for this request. This request has been classified as a feature by the maintainers.\n          \n          We take all the requests for features seriously and have passed this on to the internal teams for their consideration.\n          \n          Because any feature requires further maintenance and support in the long term by this team, we would like to exercise caution into adding new features. If this feature is something that can be implemented independently, please consider forking this repository and adding the feature.\n", "metadata": {"source": "github.com/actions/starter-workflows", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/label-feature.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8700000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Close as a support issue\non:\n  issues:\n    types: [labeled]\n\njobs:\n  build:\n    permissions:\n      issues: write\n    runs-on: ubuntu-latest\n    steps:\n    - name: Close Issue\n      uses: peter-evans/close-issue@v3\n      if: contains(github.event.issue.labels.*.name, 'support')\n      with:\n        comment: |\n          Sorry, but we'd like to keep issues related to code in this repository. Thank you 🙇 \n          \n          If you have questions about writing workflows or action files, then please [visit the GitHub Community Forum's Actions Board](https://github.community/t5/GitHub-Actions/bd-p/actions)\n          \n          If you are having an issue or question about GitHub Actions then please [contact customer support](https://help.github.com/en/articles/about-github-actions#contacting-support)\n", "metadata": {"source": "github.com/actions/starter-workflows", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/label-support.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8700000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: \"Pull Request Labeler\"\n\npermissions:\n  contents: read\n  pull-requests: write\n\non:\n  pull_request_target:\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/labeler@v5\n      with:\n        repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n", "metadata": {"source": "github.com/actions/starter-workflows", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/labeler-triage.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Lint\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n\n  pre-commit:\n    name: pre-commit\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v4\n\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.11\n\n      - name: Cache pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: pre-commit-3|${{ env.pythonLocation }}|${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Install pre-commit\n        run: pip3 install pre-commit\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files --show-diff-on-failure --color always\n", "metadata": {"source": "github.com/actions/starter-workflows", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/lint.yaml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.89, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Mark stale issues and pull requests\n\non:\n  workflow_dispatch:\n  # schedule:\n  # - cron: \"21 4 * * *\"\n\njobs:\n  stale:\n\n    permissions:\n      issues: write\n      pull-requests: write\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/stale@v8\n      with:\n        stale-issue-message: 'This issue has become stale and will be closed automatically within a period of time. Sorry about that.'\n        stale-pr-message: 'This pull request has become stale and will be closed automatically within a period of time. Sorry about that.'\n        stale-issue-label: 'no-issue-activity'\n        stale-pr-label: 'no-pr-activity'\n        days-before-stale: 90 \n", "metadata": {"source": "github.com/actions/starter-workflows", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/stale.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Sync workflows for GHES\n\non:\n  push:\n    branches: [ main ]\n\njobs:\n  sync:\n    permissions:\n      contents: write\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - run: |\n        git fetch --no-tags --prune --depth=1 origin +refs/heads/*:refs/remotes/origin/*\n        git config user.email \"cschleiden@github.com\"\n        git config user.name \"GitHub Actions\"\n    - uses: actions/setup-node@v4\n      with:\n        node-version: '20'\n        cache: 'npm'\n        cache-dependency-path: script/sync-ghes/package-lock.json\n    - name: Check starter workflows for GHES compat\n      run: |\n        npm ci\n        npx ts-node-script ./index.ts\n      working-directory: ./script/sync-ghes\n    - run: |\n        git add -A\n        if [ -z \"$(git status --porcelain)\" ]; then\n          echo \"No changes to commit\"\n        else\n          git commit -m \"Updating GHES workflows\"\n        fi\n    - run: git push\n", "metadata": {"source": "github.com/actions/starter-workflows", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/sync-ghes.yaml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8925000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Validate Data\n\non:\n  push:\n  pull_request:\n\njobs:\n  validate-data:\n    permissions:\n      contents: read\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n\n      - uses: actions/setup-node@v4\n        with:\n          node-version: '20'\n          cache: 'npm'\n          cache-dependency-path: script/validate-data/package-lock.json\n\n      - name: Validate workflows\n        run: |\n          npm ci\n          npx ts-node-script ./index.ts\n        working-directory: ./script/validate-data\n", "metadata": {"source": "github.com/actions/starter-workflows", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/validate-data.yaml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Issue assignment\n\non:\n    issues:\n        types: [opened]\n\njobs:\n    auto-assign:\n        runs-on: ubuntu-latest\n        steps:\n            - name: 'Auto-assign issue'\n              uses: pozil/auto-assign-issue@v1.11.0\n              with:\n                  assignees: phantsure,tiwarishub,anuragc617,vsvipul,bishal-pdmsft\n                  numOfAssignee: 1\n", "metadata": {"source": "github.com/actions/starter-workflows", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/auto-assign-issues.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: 'Auto Assign'\non:\n  pull_request_target:\n    types: [opened, ready_for_review]\n\njobs:\n  add-reviews:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: kentaro-m/auto-assign-action@v1.2.2\n", "metadata": {"source": "github.com/actions/starter-workflows", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/auto-assign.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8825000000000002, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Close as a feature\non:\n  issues:\n    types: [labeled]\n\njobs:\n  build:\n    permissions:\n      issues: write\n    runs-on: ubuntu-latest\n    steps:\n    - name: Close Issue\n      uses: peter-evans/close-issue@v3\n      if: contains(github.event.issue.labels.*.name, 'feature')\n      with:\n        comment: |\n          Thank you 🙇 for this request. This request has been classified as a feature by the maintainers.\n          \n          We take all the requests for features seriously and have passed this on to the internal teams for their consideration.\n          \n          Because any feature requires further maintenance and support in the long term by this team, we would like to exercise caution into adding new features. If this feature is something that can be implemented independently, please consider forking this repository and adding the feature.\n", "metadata": {"source": "github.com/actions/starter-workflows", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/label-feature.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8700000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Close as a support issue\non:\n  issues:\n    types: [labeled]\n\njobs:\n  build:\n    permissions:\n      issues: write\n    runs-on: ubuntu-latest\n    steps:\n    - name: Close Issue\n      uses: peter-evans/close-issue@v3\n      if: contains(github.event.issue.labels.*.name, 'support')\n      with:\n        comment: |\n          Sorry, but we'd like to keep issues related to code in this repository. Thank you 🙇 \n          \n          If you have questions about writing workflows or action files, then please [visit the GitHub Community Forum's Actions Board](https://github.community/t5/GitHub-Actions/bd-p/actions)\n          \n          If you are having an issue or question about GitHub Actions then please [contact customer support](https://help.github.com/en/articles/about-github-actions#contacting-support)\n", "metadata": {"source": "github.com/actions/starter-workflows", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/label-support.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8700000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: \"Pull Request Labeler\"\n\npermissions:\n  contents: read\n  pull-requests: write\n\non:\n  pull_request_target:\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/labeler@v5\n      with:\n        repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n", "metadata": {"source": "github.com/actions/starter-workflows", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/labeler-triage.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Lint\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n\n  pre-commit:\n    name: pre-commit\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v4\n\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.11\n\n      - name: Cache pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: pre-commit-3|${{ env.pythonLocation }}|${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Install pre-commit\n        run: pip3 install pre-commit\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files --show-diff-on-failure --color always\n", "metadata": {"source": "github.com/actions/starter-workflows", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/lint.yaml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.89, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Mark stale issues and pull requests\n\non:\n  workflow_dispatch:\n  # schedule:\n  # - cron: \"21 4 * * *\"\n\njobs:\n  stale:\n\n    permissions:\n      issues: write\n      pull-requests: write\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/stale@v8\n      with:\n        stale-issue-message: 'This issue has become stale and will be closed automatically within a period of time. Sorry about that.'\n        stale-pr-message: 'This pull request has become stale and will be closed automatically within a period of time. Sorry about that.'\n        stale-issue-label: 'no-issue-activity'\n        stale-pr-label: 'no-pr-activity'\n        days-before-stale: 90 \n", "metadata": {"source": "github.com/actions/starter-workflows", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/stale.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Sync workflows for GHES\n\non:\n  push:\n    branches: [ main ]\n\njobs:\n  sync:\n    permissions:\n      contents: write\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - run: |\n        git fetch --no-tags --prune --depth=1 origin +refs/heads/*:refs/remotes/origin/*\n        git config user.email \"cschleiden@github.com\"\n        git config user.name \"GitHub Actions\"\n    - uses: actions/setup-node@v4\n      with:\n        node-version: '20'\n        cache: 'npm'\n        cache-dependency-path: script/sync-ghes/package-lock.json\n    - name: Check starter workflows for GHES compat\n      run: |\n        npm ci\n        npx ts-node-script ./index.ts\n      working-directory: ./script/sync-ghes\n    - run: |\n        git add -A\n        if [ -z \"$(git status --porcelain)\" ]; then\n          echo \"No changes to commit\"\n        else\n          git commit -m \"Updating GHES workflows\"\n        fi\n    - run: git push\n", "metadata": {"source": "github.com/actions/starter-workflows", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/sync-ghes.yaml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8925000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Validate Data\n\non:\n  push:\n  pull_request:\n\njobs:\n  validate-data:\n    permissions:\n      contents: read\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n\n      - uses: actions/setup-node@v4\n        with:\n          node-version: '20'\n          cache: 'npm'\n          cache-dependency-path: script/validate-data/package-lock.json\n\n      - name: Validate workflows\n        run: |\n          npm ci\n          npx ts-node-script ./index.ts\n        working-directory: ./script/validate-data\n", "metadata": {"source": "github.com/actions/starter-workflows", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/validate-data.yaml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Publish Images\n\non:\n  push:\n    branches:\n      - main\n\n# Don't grant any access by default\npermissions: {}\n\njobs:\n  test:\n    name: Build and Test\n    runs-on: ubuntu-latest\n    concurrency:\n      group: ${{ github.workflow }}-main-${{ matrix.images.target }}\n      cancel-in-progress: true\n    permissions:\n      contents: read\n      issues: write\n      packages: write\n    strategy:\n      fail-fast: false\n      matrix:\n        images:\n          - prefix: slim-\n            target: slim\n          - prefix: \"\"\n            target: standard\n    timeout-minutes: 60\n    env:\n      CONTAINER_IMAGE_ID: \"ghcr.io/super-linter/super-linter:${{ matrix.images.prefix }}latest\"\n      CONTAINER_IMAGE_TARGET: \"${{ matrix.images.target }}\"\n    steps:\n      - name: Checkout Code\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n\n      - name: Set build metadata\n        run: |\n          if [[ ${{ github.event_name }} == 'push' ]] || [[ ${{ github.event_name }} == 'merge_group' ]]; then\n            BUILD_REVISION=${{ github.sha }}\n          elif [[ ${{ github.event_name }} == 'pull_request' ]]; then\n            BUILD_REVISION=${{ github.event.pull_request.head.sha }}\n          else\n            echo \"[ERROR] Event not supported when setting build revision and build version\"\n            exit 1\n          fi\n\n          . scripts/build-metadata.sh\n\n          if [ -z \"${BUILD_DATE}\" ]; then\n            echo \"[ERROR] BUILD_DATE is empty\"\n            exit 1\n          fi\n\n          if [ -z \"${BUILD_REVISION}\" ]; then\n            echo \"[ERROR] BUILD_REVISION is empty\"\n            exit 1\n          fi\n\n          if [ -z \"${BUILD_VERSION}\" ]; then\n            echo \"[ERROR] BUILD_VERSION is empty\"\n            exit 1\n          fi\n\n          echo \"Build date (GH Actions workflow): ${BUILD_DATE}\"\n          echo \"Build revision (GH Actions workflow): ${BUILD_REVISION}\"\n          echo \"Build version (GH Actions workflow): ${BUILD_VERSION}\"\n\n          {\n            echo \"BUILD_DATE=${BUILD_DATE}\"\n            echo \"BUILD_REVISION=${BUILD_REVISION}\"\n            echo \"BUILD_VERSION=${BUILD_VERSION}\"\n          } >> \"${GITHUB_ENV}\"\n\n      - name: Free Disk space\n        shell: bash\n        run: |\n          sudo rm -rf /usr/local/lib/android || true\n          sudo rm -rf /usr/share/dotnet || true\n          sudo rm -rf /opt/ghc || true\n          sudo rm -rf /usr/local/.ghcup || true\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Build Image\n        uses: docker/build-push-action@v6\n        with:\n          context: .\n          file: ./Dockerfile\n          build-args: |\n            BUILD_DATE=${{ env.BUILD_DATE }}\n            BUILD_REVISION=${{ env.BUILD_REVISION }}\n            BUILD_VERSION=${{ env.BUILD_VERSION }}\n          cache-from: type=registry,ref=${{ env.CONTAINER_IMAGE_ID }}-buildcache\n          load: true\n          push: false\n          secrets: |\n            GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}\n          tags: |\n            ${{ env.CONTAINER_IMAGE_ID }}\n          target: \"${{ matrix.images.target }}\"\n\n      - name: Run Test Suite\n        run: make test\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Login to GHCR\n        uses: docker/login-action@v3.3.0\n        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Build and Push Image\n        uses: docker/build-push-action@v6\n        with:\n          context: .\n          file: ./Dockerfile\n          build-args: |\n            BUILD_DATE=${{ env.BUILD_DATE }}\n            BUILD_REVISION=${{ env.BUILD_REVISION }}\n            BUILD_VERSION=${{ env.BUILD_VERSION }}\n          cache-from: type=registry,ref=${{ env.CONTAINER_IMAGE_ID }}-buildcache\n          cache-to: type=registry,ref=${{ env.CONTAINER_IMAGE_ID }}-buildcache,mode=max\n          load: false\n          push: true\n          secrets: |\n            GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}\n          tags: |\n            ${{ env.CONTAINER_IMAGE_ID }}\n          target: \"${{ matrix.images.target }}\"\n\n      - name: Create Issue on Failure\n        uses: actions/github-script@v7\n        if: failure()\n        with:\n          github-token: ${{secrets.GITHUB_TOKEN}}\n          script: |\n            const create = await github.rest.issues.create({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              title: \"Failed to deploy to production\",\n              body: \"Automation has failed us!\\nMore information can be found at:\\n - ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\",\n              assignees: [\n                \"zkoppert\", \"Hanse00\", \"ferrarimarco\"\n              ]\n            })\n\n  release:\n    name: Release\n    needs:\n      - test\n    runs-on: ubuntu-latest\n    concurrency:\n      group: ${{ github.workflow }}-main-release\n      cancel-in-progress: true\n    permissions:\n      contents: write\n      issues: write\n      packages: write\n      pull-requests: write\n    timeout-minutes: 60\n    steps:\n      - uses: googleapis/release-please-action@v4.1.3\n        id: release\n        with:\n          config-file: .github/release-please/release-please-config.json\n          manifest-file: .github/release-please/.release-please-manifest.json\n          token: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Configure release metedata\n        if: steps.release.outputs.release_created\n        # shellcheck disable=SC2062\n        run: |\n          RELEASE_VERSION=\"${{ steps.release.outputs.tag_name }}\"\n\n          if [ -z \"${RELEASE_VERSION}\" ]; then\n            echo \"Error RELEASE_VERSION is empty. Exiting...\"\n            exit 1\n          fi\n\n          if ! echo \"${RELEASE_VERSION}\" | grep -E -o \"v[[:digit:]]+\\.[[:digit:]]+\\.[[:digit:]]+\"; then\n            echo \"Error: RELEASE_VERSION doesn't look like a semantic version: ${RELEASE_VERSION}\"\n            exit 2\n          fi\n\n          SEMVER_MAJOR_VERSION=v${{ steps.release.outputs.major }}\n\n          {\n            echo \"RELEASE_VERSION=${RELEASE_VERSION}\"\n            echo \"SEMVER_MAJOR_VERSION=${SEMVER_MAJOR_VERSION}\"\n          } >> \"${GITHUB_ENV}\"\n\n      - name: Login to GHCR\n        if: steps.release.outputs.release_created\n        uses: docker/login-action@v3.3.0\n        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      # We don't rebuild the image to avoid that the latest tag and the release tags don't point to the very same container image.\n      # Instead, we pull the latest image and tag it.\n      - name: Retag and Push Images\n        if: steps.release.outputs.release_created\n        uses: akhilerm/tag-push-action@v2.2.0\n        with:\n          src: ghcr.io/super-linter/super-linter:latest\n          dst: |\n            ghcr.io/super-linter/super-linter:${{ env.SEMVER_MAJOR_VERSION }}\n            ghcr.io/super-linter/super-linter:${{ env.RELEASE_VERSION }}\n\n      - name: Retag and Push Images slim\n        if: steps.release.outputs.release_created\n        uses: akhilerm/tag-push-action@v2.2.0\n        with:\n          src: ghcr.io/super-linter/super-linter:slim-latest\n          dst: |\n            ghcr.io/super-linter/super-linter:slim-${{ env.SEMVER_MAJOR_VERSION }}\n            ghcr.io/super-linter/super-linter:slim-${{ env.RELEASE_VERSION }}\n\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n\n      # No need to tag major.minor.patch because that tag is automatically created when creating the release\n      - name: Tag major, minor, and latest versions\n        if: steps.release.outputs.release_created\n        run: |\n          git config user.email \"41898282+github-actions[bot]@users.noreply.github.com\"\n          git config user.name \"github-actions[bot]\"\n\n          git tag --annotate --force ${{ env.SEMVER_MAJOR_VERSION }} -m \"Release ${{ env.SEMVER_MAJOR_VERSION }}\"\n          git tag --annotate --force latest -m \"Release latest (${{ env.RELEASE_VERSION }})\"\n\n          git push --force origin ${{ env.SEMVER_MAJOR_VERSION }}\n          git push --force origin latest\n\n      - name: Create Issue on Failure\n        uses: actions/github-script@v7\n        if: failure()\n        with:\n          github-token: ${{secrets.GITHUB_TOKEN}}\n          script: |\n            const create = await github.rest.issues.create({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              title: \"Failed to deploy to production\",\n              body: \"Automation has failed us!\\nMore information can be found at:\\n - ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\",\n              assignees: [\n                \"zkoppert\", \"Hanse00\", \"ferrarimarco\"\n              ]\n            })\n", "metadata": {"source": "github.com/github/super-linter", "language": "yaml", "complexity": "complex", "file_path": ".github/workflows/cd.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8575, "syntax_valid": true, "completeness_score": 0.8500000000000001, "authenticity_score": 0.8500000000000001}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Build and Test\n\non:\n  pull_request:\n  push:\n  merge_group:\n  workflow_dispatch:\n\n# Don't grant any access by default\npermissions: {}\n\njobs:\n  # Set build metadata before running any other job so we can reuse them for\n  # both the standandard and the slim images, and for verification as well.\n  # We can't run this as part of the build-container-image job because it\n  # runs multiple times due to its matrix configuration, leading to race\n  # conditions when verifying container image labels.\n  set-build-metadata:\n    name: Set build metadata\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    outputs:\n      CONTAINER_IMAGE_BUILD_DATE: ${{ steps.set-container-image-build-metadata.outputs.CONTAINER_IMAGE_BUILD_DATE }}\n      CONTAINER_IMAGE_BUILD_REVISION: ${{ steps.set-container-image-build-metadata.outputs.CONTAINER_IMAGE_BUILD_REVISION }}\n      CONTAINER_IMAGE_BUILD_VERSION: ${{ steps.set-container-image-build-metadata.outputs.CONTAINER_IMAGE_BUILD_VERSION }}\n    steps:\n      - name: Checkout Code\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n\n      - name: Set build metadata\n        id: set-container-image-build-metadata\n        run: |\n          if [[ ${{ github.event_name }} == 'push' ]] || [[ ${{ github.event_name }} == 'merge_group' ]]; then\n            BUILD_REVISION=${{ github.sha }}\n          elif [[ ${{ github.event_name }} == 'pull_request' ]]; then\n            BUILD_REVISION=${{ github.event.pull_request.head.sha }}\n          else\n            echo \"[ERROR] Event not supported when setting build revision and build version\"\n            exit 1\n          fi\n\n          . scripts/build-metadata.sh\n\n          if [ -z \"${BUILD_DATE}\" ]; then\n            echo \"[ERROR] BUILD_DATE is empty\"\n            exit 1\n          fi\n\n          if [ -z \"${BUILD_REVISION}\" ]; then\n            echo \"[ERROR] BUILD_REVISION is empty\"\n            exit 1\n          fi\n\n          if [ -z \"${BUILD_VERSION}\" ]; then\n            echo \"[ERROR] BUILD_VERSION is empty\"\n            exit 1\n          fi\n\n          echo \"Build date (GH Actions workflow): ${BUILD_DATE}\"\n          echo \"Build revision (GH Actions workflow): ${BUILD_REVISION}\"\n          echo \"Build version (GH Actions workflow): ${BUILD_VERSION}\"\n\n          {\n            echo \"BUILD_DATE=${BUILD_DATE}\"\n            echo \"BUILD_REVISION=${BUILD_REVISION}\"\n            echo \"BUILD_VERSION=${BUILD_VERSION}\"\n          } >> \"${GITHUB_ENV}\"\n\n          {\n            echo \"CONTAINER_IMAGE_BUILD_DATE=${BUILD_DATE}\"\n            echo \"CONTAINER_IMAGE_BUILD_REVISION=${BUILD_REVISION}\"\n            echo \"CONTAINER_IMAGE_BUILD_VERSION=${BUILD_VERSION}\"\n          } >> \"${GITHUB_OUTPUT}\"\n\n  build-container-image:\n    name: Build and Test\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    needs:\n      - set-build-metadata\n    concurrency:\n      # Ref: https://docs.github.com/en/actions/learn-github-actions/contexts#github-context\n      # github.head_ref: head_ref or source branch of the pull request\n      # github.ref: ref of the branch that triggered the workflow\n      group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}-${{ github.event_name }}-${{ matrix.images.target }}\n      cancel-in-progress: true\n    strategy:\n      fail-fast: false\n      matrix:\n        images:\n          - prefix: slim-\n            target: slim\n          - prefix: \"\"\n            target: standard\n    timeout-minutes: 60\n    env:\n      CONTAINER_IMAGE_ID: \"ghcr.io/super-linter/super-linter:${{ matrix.images.prefix }}latest\"\n      CONTAINER_IMAGE_TARGET: \"${{ matrix.images.target }}\"\n      CONTAINER_IMAGE_OUTPUT_IMAGE_NAME: \"super-linter-${{ matrix.images.prefix }}latest\"\n    steps:\n      - name: Checkout Code\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n\n      - name: Free Disk space\n        shell: bash\n        run: |\n          sudo rm -rf /usr/local/lib/android || true\n          sudo rm -rf /usr/share/dotnet || true\n          sudo rm -rf /opt/ghc || true\n          sudo rm -rf /usr/local/.ghcup || true\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Build Image\n        uses: docker/build-push-action@v6\n        with:\n          context: .\n          file: ./Dockerfile\n          build-args: |\n            BUILD_DATE=${{ needs.set-build-metadata.outputs.CONTAINER_IMAGE_BUILD_DATE }}\n            BUILD_REVISION=${{ needs.set-build-metadata.outputs.CONTAINER_IMAGE_BUILD_REVISION }}\n            BUILD_VERSION=${{ needs.set-build-metadata.outputs.CONTAINER_IMAGE_BUILD_VERSION }}\n          cache-from: type=registry,ref=${{ env.CONTAINER_IMAGE_ID }}-buildcache\n          outputs: type=docker,dest=/tmp/${{ env.CONTAINER_IMAGE_OUTPUT_IMAGE_NAME }}.tar\n          push: false\n          secrets: |\n            GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}\n          tags: |\n            ${{ env.CONTAINER_IMAGE_ID }}\n          target: \"${{ matrix.images.target }}\"\n\n      # Load the image here because the docker/build-push-action doesn't support multiple exporters yet\n      # Ref: https://github.com/docker/build-push-action/issues/413\n      # Ref: https://github.com/moby/buildkit/issues/1555\n      - name: Load image\n        run: |\n          docker load <\"/tmp/${{ env.CONTAINER_IMAGE_OUTPUT_IMAGE_NAME }}.tar\"\n\n      - name: Print environment info\n        run: |\n          make info\n\n      - name: Upload ${{ env.CONTAINER_IMAGE_OUTPUT_IMAGE_NAME }} container image\n        uses: actions/upload-artifact@v4.3.6\n        with:\n          name: ${{ env.CONTAINER_IMAGE_OUTPUT_IMAGE_NAME }}\n          path: /tmp/${{ env.CONTAINER_IMAGE_OUTPUT_IMAGE_NAME }}.tar\n\n  test-local-action:\n    name: Test the Super-linter GitHub Action\n    runs-on: ubuntu-latest\n    needs: build-container-image\n    permissions:\n      contents: read\n    strategy:\n      matrix:\n        images:\n          - container-image-id: super-linter-latest\n            prefix: \"\"\n            target: standard\n          - container-image-id: super-linter-slim-latest\n            prefix: slim-\n            target: slim\n    env:\n      CONTAINER_IMAGE_ID: \"ghcr.io/super-linter/super-linter:${{ matrix.images.prefix }}latest\"\n      CONTAINER_IMAGE_TARGET: \"${{ matrix.images.target }}\"\n      CONTAINER_IMAGE_OUTPUT_IMAGE_NAME: \"super-linter-${{ matrix.images.prefix }}latest\"\n    steps:\n      - name: Checkout Code\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n\n      - name: Download ${{ env.CONTAINER_IMAGE_OUTPUT_IMAGE_NAME }} container image\n        uses: actions/download-artifact@v4.1.8\n        with:\n          name: ${{ env.CONTAINER_IMAGE_OUTPUT_IMAGE_NAME }}\n          path: /tmp\n\n      - name: Load ${{ env.CONTAINER_IMAGE_OUTPUT_IMAGE_NAME }} container image\n        run: |\n          docker load --input /tmp/${{ env.CONTAINER_IMAGE_OUTPUT_IMAGE_NAME }}.tar\n          docker image ls -a\n\n      - name: Update action.yml\n        run: |\n          echo \"yq version: $(yq --version)\"\n          yq '.runs.image = \"docker://\" + env(CONTAINER_IMAGE_ID)' -i action.yml\n          echo \"Action file contents:\"\n          cat action.yml\n\n      - name: Test Local Action (debug log)\n        uses: ./\n        env:\n          LOG_LEVEL: DEBUG\n          CREATE_LOG_FILE: true\n          VALIDATE_ALL_CODEBASE: false\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          GITLEAKS_CONFIG_FILE: .gitleaks-ignore-tests.toml\n          FILTER_REGEX_EXCLUDE: \".*(/test/linters/|CHANGELOG.md).*\"\n          RENOVATE_SHAREABLE_CONFIG_PRESET_FILE_NAMES: \"default.json,hoge.json\"\n          TYPESCRIPT_STANDARD_TSCONFIG_FILE: \".github/linters/tsconfig.json\"\n\n      - name: Get the contents of the log file\n        run: |\n          sudo cat super-linter.log\n          sudo rm -v super-linter.log\n\n      - name: Test Local Action (default log)\n        uses: ./\n        env:\n          VALIDATE_ALL_CODEBASE: false\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          GITLEAKS_CONFIG_FILE: .gitleaks-ignore-tests.toml\n          FILTER_REGEX_EXCLUDE: \".*(/test/linters/|CHANGELOG.md).*\"\n          TYPESCRIPT_STANDARD_TSCONFIG_FILE: \".github/linters/tsconfig.json\"\n\n  build-test-suite-matrix:\n    name: Build test suite matrix\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    outputs:\n      matrix: ${{ steps.generate-matrix.outputs.test-cases }}\n    steps:\n      - name: Checkout Code\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n      - name: Generate test cases matrix\n        id: generate-matrix\n        run: |\n          TEST_TARGETS=$(make -pRrq 2>&1 | grep 'test:' | tr -d '\\n' | sed -e \"s/^test: //\" | jq --raw-input --slurp --compact-output 'split(\" \")')\n          echo \"TEST_TARGETS: ${TEST_TARGETS}\"\n          echo \"test-cases=${TEST_TARGETS}\" >> \"${GITHUB_OUTPUT}\"\n\n  run-test-suite:\n    name: Run test cases\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    needs:\n      - set-build-metadata\n      - build-container-image\n      - build-test-suite-matrix\n    strategy:\n      matrix:\n        test-case: ${{ fromJson(needs.build-test-suite-matrix.outputs.matrix) }}\n        images:\n          - container-image-id: super-linter-latest\n            prefix: \"\"\n            target: standard\n          - container-image-id: super-linter-slim-latest\n            prefix: slim-\n            target: slim\n        include:\n          # Also run the test target to check if running the whole test suite\n          # in the same execution environment prevents it from succeeding\n          - test-case: test\n    env:\n      CONTAINER_IMAGE_ID: \"ghcr.io/super-linter/super-linter:${{ matrix.images.prefix }}latest\"\n      CONTAINER_IMAGE_TARGET: \"${{ matrix.images.target }}\"\n      CONTAINER_IMAGE_OUTPUT_IMAGE_NAME: \"super-linter-${{ matrix.images.prefix }}latest\"\n      BUILD_DATE: ${{ needs.set-build-metadata.outputs.CONTAINER_IMAGE_BUILD_DATE }}\n      BUILD_REVISION: ${{ needs.set-build-metadata.outputs.CONTAINER_IMAGE_BUILD_REVISION }}\n      BUILD_VERSION: ${{ needs.set-build-metadata.outputs.CONTAINER_IMAGE_BUILD_VERSION }}\n    steps:\n      - name: Checkout Code\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n\n      - name: Download ${{ env.CONTAINER_IMAGE_OUTPUT_IMAGE_NAME }} container image\n        uses: actions/download-artifact@v4.1.8\n        with:\n          name: ${{ env.CONTAINER_IMAGE_OUTPUT_IMAGE_NAME }}\n          path: /tmp\n\n      - name: Load ${{ env.CONTAINER_IMAGE_OUTPUT_IMAGE_NAME }} container image\n        run: |\n          docker load --input /tmp/${{ env.CONTAINER_IMAGE_OUTPUT_IMAGE_NAME }}.tar\n          docker image ls -a\n\n      - name: \"Test case: ${{ env.CONTAINER_IMAGE_OUTPUT_IMAGE_NAME }} - ${{ matrix.test-case }}\"\n        run: |\n          echo \"Running: ${{ env.CONTAINER_IMAGE_OUTPUT_IMAGE_NAME }} - ${{ matrix.test-case }}\"\n          make ${{ matrix.test-case }}\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n  # The purpose of this job is to run only when the run-test-suite job runs to completion.\n  # We can use this job as a required status check in a branch protection rule without\n  # having to select each individual job that dynamically add to the test matrix.\n  test-success-placeholder:\n    name: Check if all the tests passed\n    if: ${{ always() }}\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    needs:\n      - run-test-suite\n      - test-local-action\n    steps:\n      - name: Test suite success\n        if: ${{ !(contains(needs.*.result, 'failure')) && !contains(needs.*.result, 'cancelled') && !contains(needs.*.result, 'skipped') }}\n        run: exit 0\n      - name: Test suite failures\n        if: ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') || contains(needs.*.result, 'skipped') }}\n        run: exit 1\n\n  preview-release-notes:\n    if: github.event_name == 'pull_request' && github.repository == github.event.pull_request.head.repo.full_name && github.repository == 'super-linter/super-linter'\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n\n      - name: Setup authentication token\n        run: |\n          echo \"${{ secrets.GITHUB_TOKEN }}\" > .github-personal-access-token\n\n      - name: Generate a preview of the release notes\n        run: |\n          make release-please-dry-run\n", "metadata": {"source": "github.com/github/super-linter", "language": "yaml", "complexity": "complex", "file_path": ".github/workflows/ci.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.78, "syntax_valid": true, "completeness_score": 0.35, "authenticity_score": 0.8500000000000001}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "---\nname: Dependabot automation\n\non: # yamllint disable-line rule:truthy\n  pull_request:\n    types:\n      - opened\n      - synchronize\n\npermissions:\n  contents: write\n  pull-requests: write\n\njobs:\n  dependabot:\n    env:\n      PR_URL: ${{github.event.pull_request.html_url}}\n      GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n    runs-on: ubuntu-latest\n    if: github.actor == 'dependabot[bot]'\n    steps:\n      - name: Fetch Dependabot metadata\n        id: metadata\n        uses: dependabot/fetch-metadata@v2\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n      # This doesn't trigger an automated merge because we require at approvals\n      - name: Enable auto-merge\n        run: gh pr merge --auto --squash --delete-branch \"${PR_URL}\"\n", "metadata": {"source": "github.com/github/super-linter", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/dependabot-automation.yaml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "---\nname: Lint commit\n\non:\n  push:\n  pull_request:\n  merge_group:\n\n# Don't grant any access by default\npermissions: {}\n\njobs:\n  commitlint:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n\n      - name: Check if the pull request contains a single commit\n        if: github.event_name == 'pull_request'\n        run: |\n          commit_count=${{ github.event.pull_request.commits }}\n\n          if [ -z ${commit_count} ]; then\n            echo \"[ERROR] commit_count is empty\"\n            exit 1\n          fi\n\n          if [[ ${commit_count} -ne 1 ]]; then\n            echo \"[ERROR] This pull request contains ${commit_count} commits. Squash these commits into a single commit.\"\n            exit 1\n          else\n            echo \"This pull request contains ${commit_count} commit.\"\n          fi\n\n      - name: Set commit metadata\n        run: |\n          SET_INTERVAL_VALUES=\"true\"\n          if [[ ${{ github.event_name }} == 'push' ]] || [[ ${{ github.event_name }} == 'merge_group' ]]; then\n            echo \"Using default commit metadata\"\n            SET_INTERVAL_VALUES=\"false\"\n          elif [[ ${{ github.event_name }} == 'pull_request' ]]; then\n            FROM_INTERVAL_COMMITLINT=${{ github.event.pull_request.head.sha }}~${{ github.event.pull_request.commits }}\n            TO_INTERVAL_COMMITLINT=${{ github.event.pull_request.head.sha }}\n          else\n            echo \"[ERROR] Event not supported when setting commit metadata\"\n            exit 1\n          fi\n\n          if [ \"${SET_INTERVAL_VALUES}\" == \"true\" ]; then\n            if [ -z \"${FROM_INTERVAL_COMMITLINT}\" ]; then\n              echo \"[ERROR] FROM_INTERVAL_COMMITLINT is empty\"\n              exit 1\n            fi\n\n            if [ -z \"${TO_INTERVAL_COMMITLINT}\" ]; then\n              echo \"[ERROR] TO_INTERVAL_COMMITLINT is empty\"\n              exit 1\n            fi\n\n            {\n              echo \"FROM_INTERVAL_COMMITLINT=${FROM_INTERVAL_COMMITLINT}\"\n              echo \"TO_INTERVAL_COMMITLINT=${TO_INTERVAL_COMMITLINT}\"\n            } >> \"${GITHUB_ENV}\"\n          else\n            echo \"Skip updating GITHUB_ENV. SET_INTERVAL_VALUES: ${SET_INTERVAL_VALUES}\"\n          fi\n\n      - name: Validate commits\n        run: |\n          make lint-commits\n", "metadata": {"source": "github.com/github/super-linter", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/lint-commit.yaml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.9025000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "---\non:\n  schedule:\n    # every day at 0:00 UTC\n    - cron: \"0 0 * * *\"\n  issue_comment:\n    types: [created, deleted, edited]\n\nname: \"Stale[bot]\"\n\n# Don't grant any access by default\npermissions: {}\n\njobs:\n  markstale:\n    permissions:\n      issues: write # for actions/stale to close stale issues\n      pull-requests: write # for actions/stale to close stale PRs\n    runs-on: ubuntu-latest\n    # only run on schedule\n    if: ${{ github.event_name == 'schedule' }}\n    timeout-minutes: 60\n    steps:\n      - name: Mark issue stale\n        uses: actions/stale@v9\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          stale-issue-message: \"This issue has been automatically marked as stale because it has not had recent activity.\\nIt will be closed in 14 days if no further activity occurs.\\nThank you for your contributions.\\n\\nIf you think this issue should stay open, please remove the `O: stale 🤖` label or comment on the issue.\\n\\nIf you're a maintainer, you can stop the bot to mark this issue as stale in the future by adding the `O: backlog 🤖` label`.\"\n          stale-pr-message: \"This pull request has been automatically marked as stale because it has not had recent activity.\\nIt will be closed in 14 days if no further activity occurs.\\nThank you for your contributions.\\n\\nIf you think this pull request should stay open, please remove the `O: stale 🤖` label or comment on the pull request.\\n\\nIf you're a maintainer, you can stop the bot to mark this issue as stale in the future by adding the `O: backlog 🤖` label`.\"\n          days-before-stale: 30\n          days-before-close: 14\n          stale-issue-label: \"O: stale 🤖\"\n          exempt-issue-labels: \"O: backlog 🤖\"\n          stale-pr-label: \"O: stale 🤖\"\n          exempt-pr-labels: \"O: backlog 🤖\"\n\n  marknotstale:\n    permissions:\n      issues: write # for actions/stale to close stale issues\n      pull-requests: write # for actions/stale to close stale PRs\n    runs-on: ubuntu-latest\n    # do not run on schedule\n    if: \"${{ github.event_name == 'issue_comment' && contains(github.event.issue.labels.*.name, 'O: stale 🤖') && github.event.issue.user.type != 'Bot' }}\"\n    timeout-minutes: 60\n    steps:\n      - name: Mark issue not stale\n        uses: actions/github-script@v7\n        with:\n          script: |\n            github.rest.issues.removeLabel({\n              issue_number: context.issue.number,\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              name: 'O: stale 🤖'\n            })\n", "metadata": {"source": "github.com/github/super-linter", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/stale.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8700000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Monthly contributor report\non:\n  workflow_dispatch:\n  schedule:\n    - cron: \"3 2 1 * *\"\n\npermissions:\n  issues: write\n\njobs:\n  contributor_report:\n    name: contributor report\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Get dates for last month\n        shell: bash\n        run: |\n          # Calculate the first day of the previous month\n          start_date=$(date -d \"last month\" +%Y-%m-01)\n\n          # Calculate the last day of the previous month\n          end_date=$(date -d \"$start_date +1 month -1 day\" +%Y-%m-%d)\n\n          #Set an environment variable with the date range\n          echo \"START_DATE=$start_date\" >> \"$GITHUB_ENV\"\n          echo \"END_DATE=$end_date\" >> \"$GITHUB_ENV\"\n\n      - name: Run contributor action\n        uses: github/contributors@v1\n        env:\n          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          START_DATE: ${{ env.START_DATE }}\n          END_DATE: ${{ env.END_DATE }}\n          REPOSITORY: super-linter/super-linter\n\n      - name: Create issue\n        uses: peter-evans/create-issue-from-file@v5\n        with:\n          title: Thank you super-linter contributors (${{ env.START_DATE }}..${{ env.END_DATE }})\n          token: ${{ secrets.GITHUB_TOKEN }}\n          content-filepath: ./contributors.md\n", "metadata": {"source": "github.com/github/super-linter", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/thank_contributors.yaml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.88, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Publish Images\n\non:\n  push:\n    branches:\n      - main\n\n# Don't grant any access by default\npermissions: {}\n\njobs:\n  test:\n    name: Build and Test\n    runs-on: ubuntu-latest\n    concurrency:\n      group: ${{ github.workflow }}-main-${{ matrix.images.target }}\n      cancel-in-progress: true\n    permissions:\n      contents: read\n      issues: write\n      packages: write\n    strategy:\n      fail-fast: false\n      matrix:\n        images:\n          - prefix: slim-\n            target: slim\n          - prefix: \"\"\n            target: standard\n    timeout-minutes: 60\n    env:\n      CONTAINER_IMAGE_ID: \"ghcr.io/super-linter/super-linter:${{ matrix.images.prefix }}latest\"\n      CONTAINER_IMAGE_TARGET: \"${{ matrix.images.target }}\"\n    steps:\n      - name: Checkout Code\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n\n      - name: Set build metadata\n        run: |\n          if [[ ${{ github.event_name }} == 'push' ]] || [[ ${{ github.event_name }} == 'merge_group' ]]; then\n            BUILD_REVISION=${{ github.sha }}\n          elif [[ ${{ github.event_name }} == 'pull_request' ]]; then\n            BUILD_REVISION=${{ github.event.pull_request.head.sha }}\n          else\n            echo \"[ERROR] Event not supported when setting build revision and build version\"\n            exit 1\n          fi\n\n          . scripts/build-metadata.sh\n\n          if [ -z \"${BUILD_DATE}\" ]; then\n            echo \"[ERROR] BUILD_DATE is empty\"\n            exit 1\n          fi\n\n          if [ -z \"${BUILD_REVISION}\" ]; then\n            echo \"[ERROR] BUILD_REVISION is empty\"\n            exit 1\n          fi\n\n          if [ -z \"${BUILD_VERSION}\" ]; then\n            echo \"[ERROR] BUILD_VERSION is empty\"\n            exit 1\n          fi\n\n          echo \"Build date (GH Actions workflow): ${BUILD_DATE}\"\n          echo \"Build revision (GH Actions workflow): ${BUILD_REVISION}\"\n          echo \"Build version (GH Actions workflow): ${BUILD_VERSION}\"\n\n          {\n            echo \"BUILD_DATE=${BUILD_DATE}\"\n            echo \"BUILD_REVISION=${BUILD_REVISION}\"\n            echo \"BUILD_VERSION=${BUILD_VERSION}\"\n          } >> \"${GITHUB_ENV}\"\n\n      - name: Free Disk space\n        shell: bash\n        run: |\n          sudo rm -rf /usr/local/lib/android || true\n          sudo rm -rf /usr/share/dotnet || true\n          sudo rm -rf /opt/ghc || true\n          sudo rm -rf /usr/local/.ghcup || true\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Build Image\n        uses: docker/build-push-action@v6\n        with:\n          context: .\n          file: ./Dockerfile\n          build-args: |\n            BUILD_DATE=${{ env.BUILD_DATE }}\n            BUILD_REVISION=${{ env.BUILD_REVISION }}\n            BUILD_VERSION=${{ env.BUILD_VERSION }}\n          cache-from: type=registry,ref=${{ env.CONTAINER_IMAGE_ID }}-buildcache\n          load: true\n          push: false\n          secrets: |\n            GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}\n          tags: |\n            ${{ env.CONTAINER_IMAGE_ID }}\n          target: \"${{ matrix.images.target }}\"\n\n      - name: Run Test Suite\n        run: make test\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Login to GHCR\n        uses: docker/login-action@v3.3.0\n        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Build and Push Image\n        uses: docker/build-push-action@v6\n        with:\n          context: .\n          file: ./Dockerfile\n          build-args: |\n            BUILD_DATE=${{ env.BUILD_DATE }}\n            BUILD_REVISION=${{ env.BUILD_REVISION }}\n            BUILD_VERSION=${{ env.BUILD_VERSION }}\n          cache-from: type=registry,ref=${{ env.CONTAINER_IMAGE_ID }}-buildcache\n          cache-to: type=registry,ref=${{ env.CONTAINER_IMAGE_ID }}-buildcache,mode=max\n          load: false\n          push: true\n          secrets: |\n            GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}\n          tags: |\n            ${{ env.CONTAINER_IMAGE_ID }}\n          target: \"${{ matrix.images.target }}\"\n\n      - name: Create Issue on Failure\n        uses: actions/github-script@v7\n        if: failure()\n        with:\n          github-token: ${{secrets.GITHUB_TOKEN}}\n          script: |\n            const create = await github.rest.issues.create({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              title: \"Failed to deploy to production\",\n              body: \"Automation has failed us!\\nMore information can be found at:\\n - ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\",\n              assignees: [\n                \"zkoppert\", \"Hanse00\", \"ferrarimarco\"\n              ]\n            })\n\n  release:\n    name: Release\n    needs:\n      - test\n    runs-on: ubuntu-latest\n    concurrency:\n      group: ${{ github.workflow }}-main-release\n      cancel-in-progress: true\n    permissions:\n      contents: write\n      issues: write\n      packages: write\n      pull-requests: write\n    timeout-minutes: 60\n    steps:\n      - uses: googleapis/release-please-action@v4.1.3\n        id: release\n        with:\n          config-file: .github/release-please/release-please-config.json\n          manifest-file: .github/release-please/.release-please-manifest.json\n          token: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Configure release metedata\n        if: steps.release.outputs.release_created\n        # shellcheck disable=SC2062\n        run: |\n          RELEASE_VERSION=\"${{ steps.release.outputs.tag_name }}\"\n\n          if [ -z \"${RELEASE_VERSION}\" ]; then\n            echo \"Error RELEASE_VERSION is empty. Exiting...\"\n            exit 1\n          fi\n\n          if ! echo \"${RELEASE_VERSION}\" | grep -E -o \"v[[:digit:]]+\\.[[:digit:]]+\\.[[:digit:]]+\"; then\n            echo \"Error: RELEASE_VERSION doesn't look like a semantic version: ${RELEASE_VERSION}\"\n            exit 2\n          fi\n\n          SEMVER_MAJOR_VERSION=v${{ steps.release.outputs.major }}\n\n          {\n            echo \"RELEASE_VERSION=${RELEASE_VERSION}\"\n            echo \"SEMVER_MAJOR_VERSION=${SEMVER_MAJOR_VERSION}\"\n          } >> \"${GITHUB_ENV}\"\n\n      - name: Login to GHCR\n        if: steps.release.outputs.release_created\n        uses: docker/login-action@v3.3.0\n        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      # We don't rebuild the image to avoid that the latest tag and the release tags don't point to the very same container image.\n      # Instead, we pull the latest image and tag it.\n      - name: Retag and Push Images\n        if: steps.release.outputs.release_created\n        uses: akhilerm/tag-push-action@v2.2.0\n        with:\n          src: ghcr.io/super-linter/super-linter:latest\n          dst: |\n            ghcr.io/super-linter/super-linter:${{ env.SEMVER_MAJOR_VERSION }}\n            ghcr.io/super-linter/super-linter:${{ env.RELEASE_VERSION }}\n\n      - name: Retag and Push Images slim\n        if: steps.release.outputs.release_created\n        uses: akhilerm/tag-push-action@v2.2.0\n        with:\n          src: ghcr.io/super-linter/super-linter:slim-latest\n          dst: |\n            ghcr.io/super-linter/super-linter:slim-${{ env.SEMVER_MAJOR_VERSION }}\n            ghcr.io/super-linter/super-linter:slim-${{ env.RELEASE_VERSION }}\n\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n\n      # No need to tag major.minor.patch because that tag is automatically created when creating the release\n      - name: Tag major, minor, and latest versions\n        if: steps.release.outputs.release_created\n        run: |\n          git config user.email \"41898282+github-actions[bot]@users.noreply.github.com\"\n          git config user.name \"github-actions[bot]\"\n\n          git tag --annotate --force ${{ env.SEMVER_MAJOR_VERSION }} -m \"Release ${{ env.SEMVER_MAJOR_VERSION }}\"\n          git tag --annotate --force latest -m \"Release latest (${{ env.RELEASE_VERSION }})\"\n\n          git push --force origin ${{ env.SEMVER_MAJOR_VERSION }}\n          git push --force origin latest\n\n      - name: Create Issue on Failure\n        uses: actions/github-script@v7\n        if: failure()\n        with:\n          github-token: ${{secrets.GITHUB_TOKEN}}\n          script: |\n            const create = await github.rest.issues.create({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              title: \"Failed to deploy to production\",\n              body: \"Automation has failed us!\\nMore information can be found at:\\n - ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\",\n              assignees: [\n                \"zkoppert\", \"Hanse00\", \"ferrarimarco\"\n              ]\n            })\n", "metadata": {"source": "github.com/github/super-linter", "language": "yaml", "complexity": "complex", "file_path": ".github/workflows/cd.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8575, "syntax_valid": true, "completeness_score": 0.8500000000000001, "authenticity_score": 0.8500000000000001}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Build and Test\n\non:\n  pull_request:\n  push:\n  merge_group:\n  workflow_dispatch:\n\n# Don't grant any access by default\npermissions: {}\n\njobs:\n  # Set build metadata before running any other job so we can reuse them for\n  # both the standandard and the slim images, and for verification as well.\n  # We can't run this as part of the build-container-image job because it\n  # runs multiple times due to its matrix configuration, leading to race\n  # conditions when verifying container image labels.\n  set-build-metadata:\n    name: Set build metadata\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    outputs:\n      CONTAINER_IMAGE_BUILD_DATE: ${{ steps.set-container-image-build-metadata.outputs.CONTAINER_IMAGE_BUILD_DATE }}\n      CONTAINER_IMAGE_BUILD_REVISION: ${{ steps.set-container-image-build-metadata.outputs.CONTAINER_IMAGE_BUILD_REVISION }}\n      CONTAINER_IMAGE_BUILD_VERSION: ${{ steps.set-container-image-build-metadata.outputs.CONTAINER_IMAGE_BUILD_VERSION }}\n    steps:\n      - name: Checkout Code\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n\n      - name: Set build metadata\n        id: set-container-image-build-metadata\n        run: |\n          if [[ ${{ github.event_name }} == 'push' ]] || [[ ${{ github.event_name }} == 'merge_group' ]]; then\n            BUILD_REVISION=${{ github.sha }}\n          elif [[ ${{ github.event_name }} == 'pull_request' ]]; then\n            BUILD_REVISION=${{ github.event.pull_request.head.sha }}\n          else\n            echo \"[ERROR] Event not supported when setting build revision and build version\"\n            exit 1\n          fi\n\n          . scripts/build-metadata.sh\n\n          if [ -z \"${BUILD_DATE}\" ]; then\n            echo \"[ERROR] BUILD_DATE is empty\"\n            exit 1\n          fi\n\n          if [ -z \"${BUILD_REVISION}\" ]; then\n            echo \"[ERROR] BUILD_REVISION is empty\"\n            exit 1\n          fi\n\n          if [ -z \"${BUILD_VERSION}\" ]; then\n            echo \"[ERROR] BUILD_VERSION is empty\"\n            exit 1\n          fi\n\n          echo \"Build date (GH Actions workflow): ${BUILD_DATE}\"\n          echo \"Build revision (GH Actions workflow): ${BUILD_REVISION}\"\n          echo \"Build version (GH Actions workflow): ${BUILD_VERSION}\"\n\n          {\n            echo \"BUILD_DATE=${BUILD_DATE}\"\n            echo \"BUILD_REVISION=${BUILD_REVISION}\"\n            echo \"BUILD_VERSION=${BUILD_VERSION}\"\n          } >> \"${GITHUB_ENV}\"\n\n          {\n            echo \"CONTAINER_IMAGE_BUILD_DATE=${BUILD_DATE}\"\n            echo \"CONTAINER_IMAGE_BUILD_REVISION=${BUILD_REVISION}\"\n            echo \"CONTAINER_IMAGE_BUILD_VERSION=${BUILD_VERSION}\"\n          } >> \"${GITHUB_OUTPUT}\"\n\n  build-container-image:\n    name: Build and Test\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    needs:\n      - set-build-metadata\n    concurrency:\n      # Ref: https://docs.github.com/en/actions/learn-github-actions/contexts#github-context\n      # github.head_ref: head_ref or source branch of the pull request\n      # github.ref: ref of the branch that triggered the workflow\n      group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}-${{ github.event_name }}-${{ matrix.images.target }}\n      cancel-in-progress: true\n    strategy:\n      fail-fast: false\n      matrix:\n        images:\n          - prefix: slim-\n            target: slim\n          - prefix: \"\"\n            target: standard\n    timeout-minutes: 60\n    env:\n      CONTAINER_IMAGE_ID: \"ghcr.io/super-linter/super-linter:${{ matrix.images.prefix }}latest\"\n      CONTAINER_IMAGE_TARGET: \"${{ matrix.images.target }}\"\n      CONTAINER_IMAGE_OUTPUT_IMAGE_NAME: \"super-linter-${{ matrix.images.prefix }}latest\"\n    steps:\n      - name: Checkout Code\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n\n      - name: Free Disk space\n        shell: bash\n        run: |\n          sudo rm -rf /usr/local/lib/android || true\n          sudo rm -rf /usr/share/dotnet || true\n          sudo rm -rf /opt/ghc || true\n          sudo rm -rf /usr/local/.ghcup || true\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Build Image\n        uses: docker/build-push-action@v6\n        with:\n          context: .\n          file: ./Dockerfile\n          build-args: |\n            BUILD_DATE=${{ needs.set-build-metadata.outputs.CONTAINER_IMAGE_BUILD_DATE }}\n            BUILD_REVISION=${{ needs.set-build-metadata.outputs.CONTAINER_IMAGE_BUILD_REVISION }}\n            BUILD_VERSION=${{ needs.set-build-metadata.outputs.CONTAINER_IMAGE_BUILD_VERSION }}\n          cache-from: type=registry,ref=${{ env.CONTAINER_IMAGE_ID }}-buildcache\n          outputs: type=docker,dest=/tmp/${{ env.CONTAINER_IMAGE_OUTPUT_IMAGE_NAME }}.tar\n          push: false\n          secrets: |\n            GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}\n          tags: |\n            ${{ env.CONTAINER_IMAGE_ID }}\n          target: \"${{ matrix.images.target }}\"\n\n      # Load the image here because the docker/build-push-action doesn't support multiple exporters yet\n      # Ref: https://github.com/docker/build-push-action/issues/413\n      # Ref: https://github.com/moby/buildkit/issues/1555\n      - name: Load image\n        run: |\n          docker load <\"/tmp/${{ env.CONTAINER_IMAGE_OUTPUT_IMAGE_NAME }}.tar\"\n\n      - name: Print environment info\n        run: |\n          make info\n\n      - name: Upload ${{ env.CONTAINER_IMAGE_OUTPUT_IMAGE_NAME }} container image\n        uses: actions/upload-artifact@v4.3.6\n        with:\n          name: ${{ env.CONTAINER_IMAGE_OUTPUT_IMAGE_NAME }}\n          path: /tmp/${{ env.CONTAINER_IMAGE_OUTPUT_IMAGE_NAME }}.tar\n\n  test-local-action:\n    name: Test the Super-linter GitHub Action\n    runs-on: ubuntu-latest\n    needs: build-container-image\n    permissions:\n      contents: read\n    strategy:\n      matrix:\n        images:\n          - container-image-id: super-linter-latest\n            prefix: \"\"\n            target: standard\n          - container-image-id: super-linter-slim-latest\n            prefix: slim-\n            target: slim\n    env:\n      CONTAINER_IMAGE_ID: \"ghcr.io/super-linter/super-linter:${{ matrix.images.prefix }}latest\"\n      CONTAINER_IMAGE_TARGET: \"${{ matrix.images.target }}\"\n      CONTAINER_IMAGE_OUTPUT_IMAGE_NAME: \"super-linter-${{ matrix.images.prefix }}latest\"\n    steps:\n      - name: Checkout Code\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n\n      - name: Download ${{ env.CONTAINER_IMAGE_OUTPUT_IMAGE_NAME }} container image\n        uses: actions/download-artifact@v4.1.8\n        with:\n          name: ${{ env.CONTAINER_IMAGE_OUTPUT_IMAGE_NAME }}\n          path: /tmp\n\n      - name: Load ${{ env.CONTAINER_IMAGE_OUTPUT_IMAGE_NAME }} container image\n        run: |\n          docker load --input /tmp/${{ env.CONTAINER_IMAGE_OUTPUT_IMAGE_NAME }}.tar\n          docker image ls -a\n\n      - name: Update action.yml\n        run: |\n          echo \"yq version: $(yq --version)\"\n          yq '.runs.image = \"docker://\" + env(CONTAINER_IMAGE_ID)' -i action.yml\n          echo \"Action file contents:\"\n          cat action.yml\n\n      - name: Test Local Action (debug log)\n        uses: ./\n        env:\n          LOG_LEVEL: DEBUG\n          CREATE_LOG_FILE: true\n          VALIDATE_ALL_CODEBASE: false\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          GITLEAKS_CONFIG_FILE: .gitleaks-ignore-tests.toml\n          FILTER_REGEX_EXCLUDE: \".*(/test/linters/|CHANGELOG.md).*\"\n          RENOVATE_SHAREABLE_CONFIG_PRESET_FILE_NAMES: \"default.json,hoge.json\"\n          TYPESCRIPT_STANDARD_TSCONFIG_FILE: \".github/linters/tsconfig.json\"\n\n      - name: Get the contents of the log file\n        run: |\n          sudo cat super-linter.log\n          sudo rm -v super-linter.log\n\n      - name: Test Local Action (default log)\n        uses: ./\n        env:\n          VALIDATE_ALL_CODEBASE: false\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          GITLEAKS_CONFIG_FILE: .gitleaks-ignore-tests.toml\n          FILTER_REGEX_EXCLUDE: \".*(/test/linters/|CHANGELOG.md).*\"\n          TYPESCRIPT_STANDARD_TSCONFIG_FILE: \".github/linters/tsconfig.json\"\n\n  build-test-suite-matrix:\n    name: Build test suite matrix\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    outputs:\n      matrix: ${{ steps.generate-matrix.outputs.test-cases }}\n    steps:\n      - name: Checkout Code\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n      - name: Generate test cases matrix\n        id: generate-matrix\n        run: |\n          TEST_TARGETS=$(make -pRrq 2>&1 | grep 'test:' | tr -d '\\n' | sed -e \"s/^test: //\" | jq --raw-input --slurp --compact-output 'split(\" \")')\n          echo \"TEST_TARGETS: ${TEST_TARGETS}\"\n          echo \"test-cases=${TEST_TARGETS}\" >> \"${GITHUB_OUTPUT}\"\n\n  run-test-suite:\n    name: Run test cases\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    needs:\n      - set-build-metadata\n      - build-container-image\n      - build-test-suite-matrix\n    strategy:\n      matrix:\n        test-case: ${{ fromJson(needs.build-test-suite-matrix.outputs.matrix) }}\n        images:\n          - container-image-id: super-linter-latest\n            prefix: \"\"\n            target: standard\n          - container-image-id: super-linter-slim-latest\n            prefix: slim-\n            target: slim\n        include:\n          # Also run the test target to check if running the whole test suite\n          # in the same execution environment prevents it from succeeding\n          - test-case: test\n    env:\n      CONTAINER_IMAGE_ID: \"ghcr.io/super-linter/super-linter:${{ matrix.images.prefix }}latest\"\n      CONTAINER_IMAGE_TARGET: \"${{ matrix.images.target }}\"\n      CONTAINER_IMAGE_OUTPUT_IMAGE_NAME: \"super-linter-${{ matrix.images.prefix }}latest\"\n      BUILD_DATE: ${{ needs.set-build-metadata.outputs.CONTAINER_IMAGE_BUILD_DATE }}\n      BUILD_REVISION: ${{ needs.set-build-metadata.outputs.CONTAINER_IMAGE_BUILD_REVISION }}\n      BUILD_VERSION: ${{ needs.set-build-metadata.outputs.CONTAINER_IMAGE_BUILD_VERSION }}\n    steps:\n      - name: Checkout Code\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n\n      - name: Download ${{ env.CONTAINER_IMAGE_OUTPUT_IMAGE_NAME }} container image\n        uses: actions/download-artifact@v4.1.8\n        with:\n          name: ${{ env.CONTAINER_IMAGE_OUTPUT_IMAGE_NAME }}\n          path: /tmp\n\n      - name: Load ${{ env.CONTAINER_IMAGE_OUTPUT_IMAGE_NAME }} container image\n        run: |\n          docker load --input /tmp/${{ env.CONTAINER_IMAGE_OUTPUT_IMAGE_NAME }}.tar\n          docker image ls -a\n\n      - name: \"Test case: ${{ env.CONTAINER_IMAGE_OUTPUT_IMAGE_NAME }} - ${{ matrix.test-case }}\"\n        run: |\n          echo \"Running: ${{ env.CONTAINER_IMAGE_OUTPUT_IMAGE_NAME }} - ${{ matrix.test-case }}\"\n          make ${{ matrix.test-case }}\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n  # The purpose of this job is to run only when the run-test-suite job runs to completion.\n  # We can use this job as a required status check in a branch protection rule without\n  # having to select each individual job that dynamically add to the test matrix.\n  test-success-placeholder:\n    name: Check if all the tests passed\n    if: ${{ always() }}\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    needs:\n      - run-test-suite\n      - test-local-action\n    steps:\n      - name: Test suite success\n        if: ${{ !(contains(needs.*.result, 'failure')) && !contains(needs.*.result, 'cancelled') && !contains(needs.*.result, 'skipped') }}\n        run: exit 0\n      - name: Test suite failures\n        if: ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') || contains(needs.*.result, 'skipped') }}\n        run: exit 1\n\n  preview-release-notes:\n    if: github.event_name == 'pull_request' && github.repository == github.event.pull_request.head.repo.full_name && github.repository == 'super-linter/super-linter'\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n\n      - name: Setup authentication token\n        run: |\n          echo \"${{ secrets.GITHUB_TOKEN }}\" > .github-personal-access-token\n\n      - name: Generate a preview of the release notes\n        run: |\n          make release-please-dry-run\n", "metadata": {"source": "github.com/github/super-linter", "language": "yaml", "complexity": "complex", "file_path": ".github/workflows/ci.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.78, "syntax_valid": true, "completeness_score": 0.35, "authenticity_score": 0.8500000000000001}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "---\nname: Dependabot automation\n\non: # yamllint disable-line rule:truthy\n  pull_request:\n    types:\n      - opened\n      - synchronize\n\npermissions:\n  contents: write\n  pull-requests: write\n\njobs:\n  dependabot:\n    env:\n      PR_URL: ${{github.event.pull_request.html_url}}\n      GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n    runs-on: ubuntu-latest\n    if: github.actor == 'dependabot[bot]'\n    steps:\n      - name: Fetch Dependabot metadata\n        id: metadata\n        uses: dependabot/fetch-metadata@v2\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n      # This doesn't trigger an automated merge because we require at approvals\n      - name: Enable auto-merge\n        run: gh pr merge --auto --squash --delete-branch \"${PR_URL}\"\n", "metadata": {"source": "github.com/github/super-linter", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/dependabot-automation.yaml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "---\nname: Lint commit\n\non:\n  push:\n  pull_request:\n  merge_group:\n\n# Don't grant any access by default\npermissions: {}\n\njobs:\n  commitlint:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n\n      - name: Check if the pull request contains a single commit\n        if: github.event_name == 'pull_request'\n        run: |\n          commit_count=${{ github.event.pull_request.commits }}\n\n          if [ -z ${commit_count} ]; then\n            echo \"[ERROR] commit_count is empty\"\n            exit 1\n          fi\n\n          if [[ ${commit_count} -ne 1 ]]; then\n            echo \"[ERROR] This pull request contains ${commit_count} commits. Squash these commits into a single commit.\"\n            exit 1\n          else\n            echo \"This pull request contains ${commit_count} commit.\"\n          fi\n\n      - name: Set commit metadata\n        run: |\n          SET_INTERVAL_VALUES=\"true\"\n          if [[ ${{ github.event_name }} == 'push' ]] || [[ ${{ github.event_name }} == 'merge_group' ]]; then\n            echo \"Using default commit metadata\"\n            SET_INTERVAL_VALUES=\"false\"\n          elif [[ ${{ github.event_name }} == 'pull_request' ]]; then\n            FROM_INTERVAL_COMMITLINT=${{ github.event.pull_request.head.sha }}~${{ github.event.pull_request.commits }}\n            TO_INTERVAL_COMMITLINT=${{ github.event.pull_request.head.sha }}\n          else\n            echo \"[ERROR] Event not supported when setting commit metadata\"\n            exit 1\n          fi\n\n          if [ \"${SET_INTERVAL_VALUES}\" == \"true\" ]; then\n            if [ -z \"${FROM_INTERVAL_COMMITLINT}\" ]; then\n              echo \"[ERROR] FROM_INTERVAL_COMMITLINT is empty\"\n              exit 1\n            fi\n\n            if [ -z \"${TO_INTERVAL_COMMITLINT}\" ]; then\n              echo \"[ERROR] TO_INTERVAL_COMMITLINT is empty\"\n              exit 1\n            fi\n\n            {\n              echo \"FROM_INTERVAL_COMMITLINT=${FROM_INTERVAL_COMMITLINT}\"\n              echo \"TO_INTERVAL_COMMITLINT=${TO_INTERVAL_COMMITLINT}\"\n            } >> \"${GITHUB_ENV}\"\n          else\n            echo \"Skip updating GITHUB_ENV. SET_INTERVAL_VALUES: ${SET_INTERVAL_VALUES}\"\n          fi\n\n      - name: Validate commits\n        run: |\n          make lint-commits\n", "metadata": {"source": "github.com/github/super-linter", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/lint-commit.yaml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.9025000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "---\non:\n  schedule:\n    # every day at 0:00 UTC\n    - cron: \"0 0 * * *\"\n  issue_comment:\n    types: [created, deleted, edited]\n\nname: \"Stale[bot]\"\n\n# Don't grant any access by default\npermissions: {}\n\njobs:\n  markstale:\n    permissions:\n      issues: write # for actions/stale to close stale issues\n      pull-requests: write # for actions/stale to close stale PRs\n    runs-on: ubuntu-latest\n    # only run on schedule\n    if: ${{ github.event_name == 'schedule' }}\n    timeout-minutes: 60\n    steps:\n      - name: Mark issue stale\n        uses: actions/stale@v9\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          stale-issue-message: \"This issue has been automatically marked as stale because it has not had recent activity.\\nIt will be closed in 14 days if no further activity occurs.\\nThank you for your contributions.\\n\\nIf you think this issue should stay open, please remove the `O: stale 🤖` label or comment on the issue.\\n\\nIf you're a maintainer, you can stop the bot to mark this issue as stale in the future by adding the `O: backlog 🤖` label`.\"\n          stale-pr-message: \"This pull request has been automatically marked as stale because it has not had recent activity.\\nIt will be closed in 14 days if no further activity occurs.\\nThank you for your contributions.\\n\\nIf you think this pull request should stay open, please remove the `O: stale 🤖` label or comment on the pull request.\\n\\nIf you're a maintainer, you can stop the bot to mark this issue as stale in the future by adding the `O: backlog 🤖` label`.\"\n          days-before-stale: 30\n          days-before-close: 14\n          stale-issue-label: \"O: stale 🤖\"\n          exempt-issue-labels: \"O: backlog 🤖\"\n          stale-pr-label: \"O: stale 🤖\"\n          exempt-pr-labels: \"O: backlog 🤖\"\n\n  marknotstale:\n    permissions:\n      issues: write # for actions/stale to close stale issues\n      pull-requests: write # for actions/stale to close stale PRs\n    runs-on: ubuntu-latest\n    # do not run on schedule\n    if: \"${{ github.event_name == 'issue_comment' && contains(github.event.issue.labels.*.name, 'O: stale 🤖') && github.event.issue.user.type != 'Bot' }}\"\n    timeout-minutes: 60\n    steps:\n      - name: Mark issue not stale\n        uses: actions/github-script@v7\n        with:\n          script: |\n            github.rest.issues.removeLabel({\n              issue_number: context.issue.number,\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              name: 'O: stale 🤖'\n            })\n", "metadata": {"source": "github.com/github/super-linter", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/stale.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8700000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Monthly contributor report\non:\n  workflow_dispatch:\n  schedule:\n    - cron: \"3 2 1 * *\"\n\npermissions:\n  issues: write\n\njobs:\n  contributor_report:\n    name: contributor report\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Get dates for last month\n        shell: bash\n        run: |\n          # Calculate the first day of the previous month\n          start_date=$(date -d \"last month\" +%Y-%m-01)\n\n          # Calculate the last day of the previous month\n          end_date=$(date -d \"$start_date +1 month -1 day\" +%Y-%m-%d)\n\n          #Set an environment variable with the date range\n          echo \"START_DATE=$start_date\" >> \"$GITHUB_ENV\"\n          echo \"END_DATE=$end_date\" >> \"$GITHUB_ENV\"\n\n      - name: Run contributor action\n        uses: github/contributors@v1\n        env:\n          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          START_DATE: ${{ env.START_DATE }}\n          END_DATE: ${{ env.END_DATE }}\n          REPOSITORY: super-linter/super-linter\n\n      - name: Create issue\n        uses: peter-evans/create-issue-from-file@v5\n        with:\n          title: Thank you super-linter contributors (${{ env.START_DATE }}..${{ env.END_DATE }})\n          token: ${{ secrets.GITHUB_TOKEN }}\n          content-filepath: ./contributors.md\n", "metadata": {"source": "github.com/github/super-linter", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/thank_contributors.yaml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.88, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "# reusable workflow\nname: .e2e-run\n\non:\n  workflow_call:\n    inputs:\n      id:\n        required: false\n        type: string\n      type:\n        required: true\n        type: string\n      name:\n        required: true\n        type: string\n      registry:\n        required: false\n        type: string\n      slug:\n        required: false\n        type: string\n      username_secret:\n        required: false\n        type: string\n      password_secret:\n        required: false\n        type: string\n\nenv:\n  HARBOR_VERSION: v2.7.0\n  NEXUS_VERSION: 3.47.1\n  DISTRIBUTION_VERSION: 2.8.1\n\njobs:\n  run:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        include:\n          -\n            buildx_version: edge\n            buildkit_image: moby/buildkit:latest\n          -\n            buildx_version: latest\n            buildkit_image: moby/buildkit:buildx-stable-1\n          -\n            buildx_version: https://github.com/docker/buildx.git#master\n            buildkit_image: moby/buildkit:master\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up env\n        if: inputs.type == 'local'\n        run: |\n          cat ./.github/e2e/${{ inputs.id }}/env >> $GITHUB_ENV\n      -\n        name: Set up BuildKit config\n        run: |\n          touch /tmp/buildkitd.toml\n          if [ \"${{ inputs.type }}\" = \"local\" ]; then\n            echo -e \"[registry.\\\"${{ env.REGISTRY_FQDN }}\\\"]\\nhttp = true\\ninsecure = true\" > /tmp/buildkitd.toml\n          fi\n      -\n        name: Set up Docker daemon\n        if: inputs.type == 'local'\n        run: |\n          if [ ! -e /etc/docker/daemon.json ]; then\n            echo '{}' | sudo tee /etc/docker/daemon.json >/dev/null\n          fi\n          DOCKERD_CONFIG=$(jq '.+{\"insecure-registries\":[\"http://${{ env.REGISTRY_FQDN }}\"]}' /etc/docker/daemon.json)\n          sudo tee /etc/docker/daemon.json <<<\"$DOCKERD_CONFIG\" >/dev/null\n          cat /etc/docker/daemon.json\n          sudo service docker restart\n      -\n        name: Install ${{ inputs.name }}\n        if: inputs.type == 'local'\n        run: |\n          sudo -E bash ./.github/e2e/${{ inputs.id }}/install.sh\n          sudo chown $(id -u):$(id -g) -R ~/.docker\n      -\n        name: Docker meta\n        id: meta\n        uses: docker/metadata-action@v5\n        with:\n          images: ${{ env.REGISTRY_SLUG || inputs.slug }}\n          tags: |\n            type=ref,event=branch,enable=${{ matrix.buildx_version == 'latest' && matrix.buildkit_image == 'moby/buildkit:buildx-stable-1' }}\n            type=ref,event=tag,enable=${{ matrix.buildx_version == 'latest' && matrix.buildkit_image == 'moby/buildkit:buildx-stable-1' }}\n            type=raw,gh-runid-${{ github.run_id }}\n      -\n        name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ matrix.buildx_version }}\n          buildkitd-config: /tmp/buildkitd.toml\n          buildkitd-flags: --debug --allow-insecure-entitlement security.insecure --allow-insecure-entitlement network.host\n          driver-opts: |\n            image=${{ matrix.buildkit_image }}\n            network=host\n      -\n        name: Login to Registry\n        if: github.event_name != 'pull_request' && (env.REGISTRY_USER || inputs.username_secret) != ''\n        uses: docker/login-action@v3\n        with:\n          registry: ${{ env.REGISTRY_FQDN || inputs.registry }}\n          username: ${{ env.REGISTRY_USER || secrets[inputs.username_secret] }}\n          password: ${{ env.REGISTRY_PASSWORD || secrets[inputs.password_secret] }}\n      -\n        name: Build and push\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/multi.Dockerfile\n          platforms: linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/ppc64le,linux/s390x\n          push: ${{ github.event_name != 'pull_request' }}\n          tags: ${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n          cache-from: type=registry,ref=${{ env.REGISTRY_SLUG || inputs.slug }}:master\n          cache-to: type=inline\n      -\n        name: Inspect image\n        run: |\n          docker pull ${{ env.REGISTRY_SLUG || inputs.slug }}:${{ steps.meta.outputs.version }}\n          docker image inspect ${{ env.REGISTRY_SLUG || inputs.slug }}:${{ steps.meta.outputs.version }}\n      -\n        name: Check manifest\n        run: |\n          docker buildx imagetools inspect ${{ env.REGISTRY_SLUG || inputs.slug }}:${{ steps.meta.outputs.version }} --format '{{json .}}'\n", "metadata": {"source": "github.com/docker/build-push-action", "language": "yaml", "complexity": "complex", "file_path": ".github/workflows/.e2e-run.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.88, "syntax_valid": true, "completeness_score": 0.8500000000000001, "authenticity_score": 1.0}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: ci\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\non:\n  workflow_dispatch:\n    inputs:\n      buildx-version:\n        description: 'Buildx version or Git context'\n        default: 'latest'\n        required: false\n      buildkit-image:\n        description: 'BuildKit image'\n        default: 'moby/buildkit:buildx-stable-1'\n        required: false\n  schedule:\n    - cron: '0 10 * * *'\n  push:\n    branches:\n      - 'master'\n      - 'releases/v*'\n  pull_request:\n\nenv:\n  BUILDX_VERSION: edge\n  BUILDKIT_IMAGE: moby/buildkit:latest\n\njobs:\n  minimal:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n        with:\n          path: action\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build\n        uses: ./action\n        with:\n          file: ./test/Dockerfile\n\n  git-context:\n    runs-on: ubuntu-latest\n    services:\n      registry:\n        image: registry:2\n        ports:\n          - 5000:5000\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n        with:\n          path: action\n      -\n        name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n      -\n        name: Set up Docker Buildx\n        id: buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            network=host\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build and push\n        id: docker_build\n        uses: ./action\n        with:\n          file: ./test/Dockerfile\n          builder: ${{ steps.buildx.outputs.name }}\n          platforms: linux/amd64,linux/arm64\n          push: true\n          tags: |\n            localhost:5000/name/app:latest\n            localhost:5000/name/app:1.0.0\n      -\n        name: Inspect\n        run: |\n          docker buildx imagetools inspect localhost:5000/name/app:1.0.0 --format '{{json .}}'\n      -\n        name: Check digest\n        run: |\n          if [ -z \"${{ steps.docker_build.outputs.digest }}\" ]; then\n            echo \"::error::Digest should not be empty\"\n            exit 1\n          fi\n\n  git-context-secret:\n    runs-on: ubuntu-latest\n    services:\n      registry:\n        image: registry:2\n        ports:\n          - 5000:5000\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n        with:\n          path: action\n      -\n        name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n      -\n        name: Set up Docker Buildx\n        id: buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            network=host\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build and push\n        id: docker_build\n        uses: ./action\n        with:\n          file: ./test/Dockerfile\n          builder: ${{ steps.buildx.outputs.name }}\n          platforms: linux/amd64,linux/arm64\n          push: true\n          tags: |\n            localhost:5000/name/app:latest\n            localhost:5000/name/app:1.0.0\n          secrets: |\n            GIT_AUTH_TOKEN=${{ github.token }}\n            \"MYSECRET=aaaaaaaa\n            bbbbbbb\n            ccccccccc\"\n            FOO=bar\n            \"EMPTYLINE=aaaa\n\n            bbbb\n            ccc\"\n      -\n        name: Inspect\n        run: |\n          docker buildx imagetools inspect localhost:5000/name/app:1.0.0 --format '{{json .}}'\n      -\n        name: Check digest\n        run: |\n          if [ -z \"${{ steps.docker_build.outputs.digest }}\" ]; then\n            echo \"::error::Digest should not be empty\"\n            exit 1\n          fi\n\n  path-context:\n    runs-on: ubuntu-latest\n    services:\n      registry:\n        image: registry:2\n        ports:\n          - 5000:5000\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n      -\n        name: Set up Docker Buildx\n        id: buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            network=host\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build and push\n        id: docker_build\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/Dockerfile\n          builder: ${{ steps.buildx.outputs.name }}\n          push: true\n          tags: |\n            localhost:5000/name/app:latest\n            localhost:5000/name/app:1.0.0\n      -\n        name: Inspect\n        run: |\n          docker buildx imagetools inspect localhost:5000/name/app:1.0.0 --format '{{json .}}'\n      -\n        name: Check digest\n        run: |\n          if [ -z \"${{ steps.docker_build.outputs.digest }}\" ]; then\n            echo \"::error::Digest should not be empty\"\n            exit 1\n          fi\n\n  example:\n    runs-on: ubuntu-latest\n    env:\n      DOCKER_IMAGE: localhost:5000/name/app\n    services:\n      registry:\n        image: registry:2\n        ports:\n          - 5000:5000\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Docker meta\n        id: meta\n        uses: docker/metadata-action@v5\n        with:\n          images: ${{ env.DOCKER_IMAGE }}\n          tags: |\n            type=schedule\n            type=ref,event=branch\n            type=ref,event=pr\n            type=semver,pattern={{version}}\n            type=semver,pattern={{major}}.{{minor}}\n            type=semver,pattern={{major}}\n            type=sha\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            network=host\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build and export to Docker client\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/Dockerfile\n          load: true\n          tags: ${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n      -\n        name: Build and push to local registry\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/Dockerfile\n          push: ${{ github.event_name != 'pull_request' }}\n          tags: ${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n      -\n        name: Inspect image\n        run: |\n          docker image inspect ${{ env.DOCKER_IMAGE }}:${{ steps.meta.outputs.version }}\n      -\n        name: Check manifest\n        if: github.event_name != 'pull_request'\n        run: |\n          docker buildx imagetools inspect ${{ env.DOCKER_IMAGE }}:${{ steps.meta.outputs.version }} --format '{{json .}}'\n\n  error:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Stop docker\n        run: |\n          sudo systemctl stop docker docker.socket\n      -\n        name: Build\n        id: docker_build\n        continue-on-error: true\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/Dockerfile\n      -\n        name: Check\n        run: |\n          if [ \"${{ steps.docker_build.outcome }}\" != \"failure\" ] || [ \"${{ steps.docker_build.conclusion }}\" != \"success\" ]; then\n            echo \"::error::Should have failed\"\n            exit 1\n          fi\n\n  error-buildx:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build\n        id: docker_build\n        continue-on-error: true\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/Dockerfile\n          platforms: linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/ppc64le,linux/s390x\n          push: true\n          tags: localhost:5000/name/app:latest\n      -\n        name: Check\n        run: |\n          if [ \"${{ steps.docker_build.outcome }}\" != \"failure\" ] || [ \"${{ steps.docker_build.conclusion }}\" != \"success\" ]; then\n            echo \"::error::Should have failed\"\n            exit 1\n          fi\n\n  docker-driver:\n    runs-on: ubuntu-latest\n    services:\n      registry:\n        image: registry:2\n        ports:\n          - 5000:5000\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Build\n        id: docker_build\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/Dockerfile\n          push: true\n          tags: localhost:5000/name/app:latest\n\n  export-docker:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Build\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/Dockerfile\n          load: true\n          tags: myimage:latest\n      -\n        name: Inspect\n        run: |\n          docker image inspect myimage:latest\n\n  secret:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build\n        uses: ./\n        with:\n          context: .\n          file: ./test/secret.Dockerfile\n          secrets: |\n            MYSECRET=foo\n            INVALID_SECRET=\n\n  secret-envs:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up Docker buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build\n        uses: ./\n        env:\n          ENV_SECRET: foo\n        with:\n          context: .\n          file: ./test/secret.Dockerfile\n          secret-envs: |\n            MYSECRET=ENV_SECRET\n            INVALID_SECRET=\n\n  network:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: List networks\n        run: docker network ls\n      -\n        name: Build\n        uses: ./\n        with:\n          context: ./test\n          tags: name/app:latest\n          network: host\n\n  shm-size:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/shmsize.Dockerfile\n          tags: name/app:latest\n          shm-size: 2g\n\n  ulimit:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            network=host\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/ulimit.Dockerfile\n          tags: name/app:latest\n          ulimit: |\n            nofile=1024:1024\n            nproc=3\n\n  cgroup-parent:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            network=host\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/cgroup.Dockerfile\n          tags: name/app:latest\n          cgroup-parent: foo\n\n  add-hosts:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            network=host\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/addhost.Dockerfile\n          tags: name/app:latest\n          add-hosts: |\n            docker:10.180.0.1\n            foo:10.0.0.1\n\n  no-cache-filters:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/nocachefilter.Dockerfile\n          no-cache-filters: build\n          tags: name/app:latest\n          cache-from: type=gha,scope=nocachefilter\n          cache-to: type=gha,scope=nocachefilter,mode=max\n\n  attests-compat:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        include:\n          - buildx: edge\n            buildkit: moby/buildkit:latest\n          - buildx: latest\n            buildkit: moby/buildkit:buildx-stable-1\n          - buildx: latest\n            buildkit: moby/buildkit:v0.10.6\n          - buildx: v0.9.1\n            buildkit: moby/buildkit:buildx-stable-1\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ matrix.buildx }}\n          driver-opts: |\n            network=host\n            image=${{ matrix.buildkit }}\n      -\n        name: Build\n        uses: ./\n        with:\n          context: ./test/go\n          file: ./test/go/Dockerfile\n          outputs: type=cacheonly\n\n  provenance:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        include:\n          - target: image\n            output: type=image,name=localhost:5000/name/app:latest,push=true\n            attr: mode=max\n          - target: image\n            output: type=image,name=localhost:5000/name/app:latest,push=true\n            attr: ''\n          - target: binary\n            output: /tmp/buildx-build\n            attr: mode=max\n          - target: binary\n            output: /tmp/buildx-build\n            attr: ''\n    services:\n      registry:\n        image: registry:2\n        ports:\n          - 5000:5000\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            network=host\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build\n        uses: ./\n        with:\n          context: ./test/go\n          file: ./test/go/Dockerfile\n          target: ${{ matrix.target }}\n          outputs: ${{ matrix.output }}\n          provenance: ${{ matrix.attr }}\n      -\n        name: Inspect Provenance\n        if: matrix.target == 'image'\n        run: |\n          docker buildx imagetools inspect localhost:5000/name/app:latest --format '{{json .Provenance}}'\n      -\n        name: Check output folder\n        if: matrix.target == 'binary'\n        run: |\n          tree /tmp/buildx-build\n      -\n        name: Print local Provenance\n        if: matrix.target == 'binary'\n        run: |\n          cat /tmp/buildx-build/provenance.json | jq\n\n  sbom:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        include:\n          - target: image\n            output: type=image,name=localhost:5000/name/app:latest,push=true\n          - target: binary\n            output: /tmp/buildx-build\n    services:\n      registry:\n        image: registry:2\n        ports:\n          - 5000:5000\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            network=host\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build\n        uses: ./\n        with:\n          context: ./test/go\n          file: ./test/go/Dockerfile\n          target: ${{ matrix.target }}\n          outputs: ${{ matrix.output }}\n          sbom: true\n          cache-from: type=gha,scope=attests-${{ matrix.target }}\n          cache-to: type=gha,scope=attests-${{ matrix.target }},mode=max\n      -\n        name: Inspect SBOM\n        if: matrix.target == 'image'\n        run: |\n          docker buildx imagetools inspect localhost:5000/name/app:latest --format '{{json .SBOM}}'\n      -\n        name: Check output folder\n        if: matrix.target == 'binary'\n        run: |\n          tree /tmp/buildx-build\n      -\n        name: Print local SBOM\n        if: matrix.target == 'binary'\n        run: |\n          cat /tmp/buildx-build/sbom.spdx.json | jq\n\n  multi:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        dockerfile:\n          - multi\n          - multi-sudo\n    services:\n      registry:\n        image: registry:2\n        ports:\n          - 5000:5000\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n      -\n        name: Set up Docker Buildx\n        id: buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            network=host\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build and push\n        id: docker_build\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/${{ matrix.dockerfile }}.Dockerfile\n          builder: ${{ steps.buildx.outputs.name }}\n          platforms: linux/amd64,linux/arm64\n          push: true\n          tags: |\n            localhost:5000/name/app:latest\n            localhost:5000/name/app:1.0.0\n      -\n        name: Inspect\n        run: |\n          docker buildx imagetools inspect localhost:5000/name/app:1.0.0 --format '{{json .}}'\n      -\n        name: Check digest\n        run: |\n          if [ -z \"${{ steps.docker_build.outputs.digest }}\" ]; then\n            echo \"::error::Digest should not be empty\"\n            exit 1\n          fi\n\n  digest:\n    runs-on: ubuntu-latest\n    env:\n      DOCKER_IMAGE: localhost:5000/name/app\n    strategy:\n      fail-fast: false\n      matrix:\n        driver:\n          - docker\n          - docker-container\n        load:\n          - true\n          - false\n        push:\n          - true\n          - false\n        exclude:\n          - driver: docker\n            load: true\n            push: true\n          - driver: docker-container\n            load: true\n            push: true\n    services:\n      registry:\n        image: registry:2\n        ports:\n          - 5000:5000\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver: ${{ matrix.driver }}\n          driver-opts: |\n            network=host\n      -\n        name: Build\n        id: docker_build\n        uses: ./\n        with:\n          context: ./test\n          load: ${{ matrix.load }}\n          push: ${{ matrix.push }}\n          tags: ${{ env.DOCKER_IMAGE }}:latest\n          platforms: ${{ matrix.platforms }}\n      -\n        name: Docker images\n        run: |\n          docker image ls --no-trunc\n      -\n        name: Check digest\n        run: |\n          if [[ \"${{ matrix.driver }}\" = \"docker-container\" ]] && [[ \"${{ matrix.load }}\" = \"false\" ]] && [[ \"${{ matrix.push }}\" = \"false\" ]]; then\n            if [ -n \"${{ steps.docker_build.outputs.digest }}\" ]; then\n              echo \"::error::Digest should be empty\"\n              exit 1\n            fi\n          elif [[ \"${{ matrix.push }}\" = \"true\" ]] && [[ -z \"${{ steps.docker_build.outputs.digest }}\" ]]; then\n            echo \"::error::Digest should not be empty\"\n            exit 1\n          fi\n      -\n        name: Check manifest\n        if: ${{ matrix.push }}\n        run: |\n          set -x\n          docker buildx imagetools inspect ${{ env.DOCKER_IMAGE }}@${{ steps.docker_build.outputs.digest }} --format '{{json .}}'\n      -\n        name: Check image ID\n        run: |\n          if [[ \"${{ matrix.driver }}\" = \"docker-container\" ]] && [[ \"${{ matrix.load }}\" = \"false\" ]] && [[ \"${{ matrix.push }}\" = \"false\" ]]; then\n            if [ -n \"${{ steps.docker_build.outputs.imageid }}\" ]; then\n              echo \"::error::Image ID should be empty\"\n              exit 1\n            fi\n          elif [ -z \"${{ steps.docker_build.outputs.imageid }}\" ]; then\n            echo \"::error::Image ID should not be empty\"\n            exit 1\n          fi\n      -\n        name: Inspect image\n        if: ${{ matrix.load }}\n        run: |\n          set -x\n          docker image inspect ${{ steps.docker_build.outputs.imageid }}\n\n  registry-cache:\n    runs-on: ubuntu-latest\n    services:\n      registry:\n        image: registry:2\n        ports:\n          - 5000:5000\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            network=host\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build and push\n        id: docker_build\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/multi.Dockerfile\n          builder: ${{ steps.buildx.outputs.name }}\n          platforms: linux/amd64,linux/arm64\n          push: true\n          tags: |\n            localhost:5000/name/app:latest\n            localhost:5000/name/app:1.0.0\n          cache-from: type=registry,ref=localhost:5000/name/app\n          cache-to: type=inline\n      -\n        name: Inspect\n        run: |\n          docker buildx imagetools inspect localhost:5000/name/app:latest --format '{{json .}}'\n      -\n        name: Check digest\n        run: |\n          if [ -z \"${{ steps.docker_build.outputs.digest }}\" ]; then\n            echo \"::error::Digest should not be empty\"\n            exit 1\n          fi\n\n  github-cache:\n    runs-on: ubuntu-latest\n    services:\n      registry:\n        image: registry:2\n        ports:\n          - 5000:5000\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            network=host\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n          buildkitd-flags: --debug\n      -\n        name: Build and push\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/multi.Dockerfile\n          platforms: linux/amd64,linux/arm64\n          push: true\n          tags: |\n            localhost:5000/name/app:latest\n            localhost:5000/name/app:1.0.0\n          cache-from: type=gha,scope=ci-${{ matrix.buildx_version }}\n          cache-to: type=gha,scope=ci-${{ matrix.buildx_version }}\n      -\n        name: Inspect\n        run: |\n          docker buildx imagetools inspect localhost:5000/name/app:1.0.0 --format '{{json .}}'\n\n  local-cache:\n    runs-on: ubuntu-latest\n    services:\n      registry:\n        image: registry:2\n        ports:\n          - 5000:5000\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            network=host\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n          buildkitd-flags: --debug\n      -\n        name: Cache Build\n        uses: actions/cache@v4\n        with:\n          path: /tmp/.buildx-cache\n          key: ${{ runner.os }}-local-test-${{ github.sha }}\n          restore-keys: |\n            ${{ runner.os }}-local-test-\n      -\n        name: Build and push\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/multi.Dockerfile\n          platforms: linux/amd64,linux/arm64\n          push: true\n          tags: |\n            localhost:5000/name/app:latest\n            localhost:5000/name/app:1.0.0\n          cache-from: type=local,src=/tmp/.buildx-cache\n          cache-to: type=local,dest=/tmp/.buildx-cache-new\n      -\n        name: Inspect\n        run: |\n          docker buildx imagetools inspect localhost:5000/name/app:1.0.0 --format '{{json .}}'\n      -\n        # Temp fix\n        # https://github.com/docker/build-push-action/issues/252\n        # https://github.com/moby/buildkit/issues/1896\n        name: Move cache\n        run: |\n          rm -rf /tmp/.buildx-cache\n          mv /tmp/.buildx-cache-new /tmp/.buildx-cache\n\n  standalone:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Uninstall docker cli\n        run: |\n          if dpkg -s \"docker-ce\" >/dev/null 2>&1; then\n            sudo dpkg -r --force-depends docker-ce-cli docker-buildx-plugin\n          else\n            sudo apt-get purge -y moby-cli moby-buildx\n          fi\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            network=host\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/Dockerfile\n\n  named-context-pin:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build base image\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/named-context.Dockerfile\n          build-contexts: |\n            alpine=docker-image://alpine:edge\n\n  named-context-docker:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver: docker\n      -\n        name: Build base image\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/named-context-base.Dockerfile\n          load: true\n          tags: my-base-image:local\n      -\n        name: Build\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/named-context.Dockerfile\n          build-contexts: |\n            base=docker-image://my-base-image:local\n\n  named-context-container:\n    runs-on: ubuntu-latest\n    services:\n      registry:\n        image: registry:2\n        ports:\n          - 5000:5000\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n            network=host\n      -\n        name: Build base image\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/named-context-base.Dockerfile\n          tags: localhost:5000/my-base-image:latest\n          push: true\n      -\n        name: Build\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/named-context.Dockerfile\n          build-contexts: |\n            alpine=docker-image://localhost:5000/my-base-image:latest\n\n  docker-config-malformed:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set malformed docker config\n        run: |\n          mkdir -p ~/.docker\n          echo 'foo_bar' >> ~/.docker/config.json\n      -\n        name: Build\n        uses: ./\n        with:\n          context: ./test\n\n  proxy-docker-config:\n    runs-on: ubuntu-latest\n    services:\n      squid-proxy:\n        image: ubuntu/squid:latest\n        ports:\n          - 3128:3128\n    steps:\n      -\n        name: Check proxy\n        run: |\n          netstat -aptn\n          curl --retry 5 --retry-all-errors --retry-delay 0 --connect-timeout 5 --proxy http://127.0.0.1:3128 -v --insecure --head https://www.google.com\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set proxy config\n        run: |\n          mkdir -p ~/.docker\n          echo '{\"proxies\":{\"default\":{\"httpProxy\":\"http://127.0.0.1:3128\",\"httpsProxy\":\"http://127.0.0.1:3128\"}}}' > ~/.docker/config.json\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n            network=host\n          buildkitd-flags: --debug\n      -\n        name: Build\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/proxy.Dockerfile\n\n  proxy-buildkitd:\n    runs-on: ubuntu-latest\n    services:\n      squid-proxy:\n        image: ubuntu/squid:latest\n        ports:\n          - 3128:3128\n    steps:\n      -\n        name: Check proxy\n        run: |\n          netstat -aptn\n          curl --retry 5 --retry-all-errors --retry-delay 0 --connect-timeout 5 --proxy http://127.0.0.1:3128 -v --insecure --head https://www.google.com\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n            network=host\n            env.http_proxy=http://127.0.0.1:3128\n            env.https_proxy=http://127.0.0.1:3128\n          buildkitd-flags: --debug\n      -\n        name: Build\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/Dockerfile\n\n  annotations:\n    runs-on: ubuntu-latest\n    env:\n      DOCKER_IMAGE: localhost:5000/name/app\n    services:\n      registry:\n        image: registry:2\n        ports:\n          - 5000:5000\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Docker meta\n        id: meta\n        uses: docker/metadata-action@v5\n        with:\n          images: ${{ env.DOCKER_IMAGE }}\n          tags: |\n            type=schedule\n            type=ref,event=branch\n            type=ref,event=pr\n            type=semver,pattern={{version}}\n            type=semver,pattern={{major}}.{{minor}}\n            type=semver,pattern={{major}}\n            type=sha\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            network=host\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build and push to local registry\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/Dockerfile\n          push: true\n          tags: ${{ steps.meta.outputs.tags }}\n          annotations: |\n            index:com.example.key=value\n            index:com.example.key2=value2\n            manifest:com.example.key3=value3\n      -\n        name: Check manifest\n        run: |\n          docker buildx imagetools inspect ${{ env.DOCKER_IMAGE }}:${{ steps.meta.outputs.version }} --format '{{json .}}'\n\n  multi-output:\n    runs-on: ubuntu-latest\n    services:\n      registry:\n        image: registry:2\n        ports:\n          - 5000:5000\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            network=host\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n          buildkitd-flags: --debug\n      -\n        name: Build\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/Dockerfile\n          outputs: |\n            type=image,name=localhost:5000/name/app:latest,push=true\n            type=docker,name=app:local\n            type=oci,dest=/tmp/oci.tar\n      -\n        name: Check registry\n        run: |\n          docker buildx imagetools inspect localhost:5000/name/app:latest --format '{{json .}}'\n      -\n        name: Check docker\n        run: |\n          docker image inspect app:local\n      -\n        name: Check oci\n        run: |\n          set -ex\n          mkdir -p /tmp/oci-out\n          tar xf /tmp/oci.tar -C /tmp/oci-out\n          tree -nh /tmp/oci-out\n\n  load-and-push:\n    runs-on: ubuntu-latest\n    services:\n      registry:\n        image: registry:2\n        ports:\n          - 5000:5000\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            network=host\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n          buildkitd-flags: --debug\n      -\n        name: Build\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/Dockerfile\n          load: true\n          push: true\n          tags: localhost:5000/name/app:latest\n      -\n        name: Check registry\n        run: |\n          docker buildx imagetools inspect localhost:5000/name/app:latest --format '{{json .}}'\n      -\n        name: Check docker\n        run: |\n          docker image inspect localhost:5000/name/app:latest\n\n  summary-disable:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n        with:\n          path: action\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build\n        uses: ./action\n        with:\n          file: ./test/Dockerfile\n        env:\n          DOCKER_BUILD_SUMMARY: false\n\n  summary-disable-deprecated:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n        with:\n          path: action\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build\n        uses: ./action\n        with:\n          file: ./test/Dockerfile\n        env:\n          DOCKER_BUILD_NO_SUMMARY: true\n\n  summary-not-supported:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n        with:\n          path: action\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: v0.12.1\n          driver-opts: |\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build\n        uses: ./action\n        with:\n          file: ./test/Dockerfile\n\n  record-upload-disable:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n        with:\n          path: action\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build\n        uses: ./action\n        with:\n          file: ./test/Dockerfile\n        env:\n          DOCKER_BUILD_RECORD_UPLOAD: false\n\n  record-retention-days:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        days:\n          - 2\n          - 0\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n        with:\n          path: action\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build\n        uses: ./action\n        with:\n          file: ./test/Dockerfile\n        env:\n          DOCKER_BUILD_RECORD_RETENTION_DAYS: ${{ matrix.days }}\n\n  export-legacy:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        legacy:\n          - false\n          - true\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n        with:\n          path: action\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build\n        uses: ./action\n        with:\n          file: ./test/Dockerfile\n        env:\n          DOCKER_BUILD_EXPORT_LEGACY: ${{ matrix.legacy }}\n\n  checks:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        buildx-version:\n          - edge\n          - latest\n          - v0.14.1\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ matrix.buildx-version }}\n          driver-opts: |\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/lint.Dockerfile\n\n  annotations-disabled:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/lint.Dockerfile\n        env:\n          DOCKER_BUILD_CHECKS_ANNOTATIONS: false\n\n  call-check:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build\n        id: docker_build\n        continue-on-error: true\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/lint.Dockerfile\n          call: check\n      -\n        name: Check\n        run: |\n          if [ \"${{ steps.docker_build.outcome }}\" != \"failure\" ] || [ \"${{ steps.docker_build.conclusion }}\" != \"success\" ]; then\n            echo \"::error::Should have failed\"\n            exit 1\n          fi\n\n  no-default-attestations:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n        with:\n          path: action\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build\n        uses: ./action\n        with:\n          file: ./test/Dockerfile\n        env:\n          BUILDX_NO_DEFAULT_ATTESTATIONS: 1\n", "metadata": {"source": "github.com/docker/build-push-action", "language": "yaml", "complexity": "complex", "file_path": ".github/workflows/ci.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8300000000000001, "syntax_valid": true, "completeness_score": 0.55, "authenticity_score": 1.0}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: e2e\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 10 * * *'\n  push:\n    branches:\n      - 'master'\n    tags:\n      - 'v*'\n\njobs:\n  build:\n    uses: ./.github/workflows/.e2e-run.yml\n    strategy:\n      fail-fast: false\n      matrix:\n        include:\n          -\n            name: Distribution\n            id: distribution\n            type: local\n          -\n            name: Docker Hub\n            registry: ''\n            slug: ghactionstest/ghactionstest\n            username_secret: DOCKERHUB_USERNAME\n            password_secret: DOCKERHUB_TOKEN\n            type: remote\n          -\n            name: GitHub\n            registry: ghcr.io\n            slug: ghcr.io/docker-ghactiontest/test\n            username_secret: GHCR_USERNAME\n            password_secret: GHCR_PAT\n            type: remote\n          -\n            name: GitLab\n            registry: registry.gitlab.com\n            slug: registry.gitlab.com/test1716/test\n            username_secret: GITLAB_USERNAME\n            password_secret: GITLAB_TOKEN\n            type: remote\n          -\n            name: AWS ECR\n            registry: 175142243308.dkr.ecr.us-east-2.amazonaws.com\n            slug: 175142243308.dkr.ecr.us-east-2.amazonaws.com/sandbox/test-docker-action\n            username_secret: AWS_ACCESS_KEY_ID\n            password_secret: AWS_SECRET_ACCESS_KEY\n            type: remote\n          -\n            name: AWS ECR Public\n            registry: public.ecr.aws\n            slug: public.ecr.aws/q3b5f1u4/test-docker-action\n            username_secret: AWS_ACCESS_KEY_ID\n            password_secret: AWS_SECRET_ACCESS_KEY\n            type: remote\n          -\n            name: Google Artifact Registry\n            registry: us-east4-docker.pkg.dev\n            slug: us-east4-docker.pkg.dev/sandbox-298914/docker-official-github-actions/test-docker-action\n            username_secret: GAR_USERNAME\n            password_secret: GAR_JSON_KEY\n            type: remote\n          -\n            name: Azure Container Registry\n            registry: officialgithubactions.azurecr.io\n            slug: officialgithubactions.azurecr.io/test-docker-action\n            username_secret: AZURE_CLIENT_ID\n            password_secret: AZURE_CLIENT_SECRET\n            type: remote\n          -\n            name: Quay\n            registry: quay.io\n            slug: quay.io/docker_build_team/ghactiontest\n            username_secret: QUAY_USERNAME\n            password_secret: QUAY_TOKEN\n            type: remote\n          -\n            name: Artifactory\n            registry: infradock.jfrog.io\n            slug: infradock.jfrog.io/test-ghaction/build-push-action\n            username_secret: ARTIFACTORY_USERNAME\n            password_secret: ARTIFACTORY_TOKEN\n            type: remote\n          -\n            name: Harbor\n            id: harbor\n            type: local\n          -\n            name: Nexus\n            id: nexus\n            type: local\n    with:\n      id: ${{ matrix.id }}\n      type: ${{ matrix.type }}\n      name: ${{ matrix.name }}\n      registry: ${{ matrix.registry }}\n      slug: ${{ matrix.slug }}\n      username_secret: ${{ matrix.username_secret }}\n      password_secret: ${{ matrix.password_secret }}\n    secrets: inherit\n", "metadata": {"source": "github.com/docker/build-push-action", "language": "yaml", "complexity": "complex", "file_path": ".github/workflows/e2e.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8999999999999999, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 1.0}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: pr-assign-author\n\npermissions:\n  contents: read\n\non:\n  pull_request_target:\n    types:\n      - opened\n      - reopened\n\njobs:\n  run:\n    uses: crazy-max/.github/.github/workflows/pr-assign-author.yml@1b673f36fad86812f538c1df9794904038a23cbf\n    permissions:\n      contents: read\n      pull-requests: write\n", "metadata": {"source": "github.com/docker/build-push-action", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/pr-assign-author.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.89, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 1.0}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: publish\n\non:\n  release:\n    types:\n      - published\n\njobs:\n  publish:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      id-token: write\n      packages: write\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Publish\n        uses: actions/publish-immutable-action@v0.0.4\n", "metadata": {"source": "github.com/docker/build-push-action", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/publish.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.89, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 1.0}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: test\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\non:\n  push:\n    branches:\n      - 'master'\n      - 'releases/v*'\n  pull_request:\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Test\n        uses: docker/bake-action@v6\n        with:\n          source: .\n          targets: test\n      -\n        name: Upload coverage\n        uses: codecov/codecov-action@v5\n        with:\n          files: ./coverage/clover.xml\n          token: ${{ secrets.CODECOV_TOKEN }}\n", "metadata": {"source": "github.com/docker/build-push-action", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/test.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.89, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 1.0}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: validate\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\non:\n  push:\n    branches:\n      - 'master'\n      - 'releases/v*'\n  pull_request:\n\njobs:\n  prepare:\n    runs-on: ubuntu-latest\n    outputs:\n      targets: ${{ steps.generate.outputs.targets }}\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: List targets\n        id: generate\n        uses: docker/bake-action/subaction/list-targets@v6\n        with:\n          target: validate\n\n  validate:\n    runs-on: ubuntu-latest\n    needs:\n      - prepare\n    strategy:\n      fail-fast: false\n      matrix:\n        target: ${{ fromJson(needs.prepare.outputs.targets) }}\n    steps:\n      -\n        name: Validate\n        uses: docker/bake-action@v6\n        with:\n          targets: ${{ matrix.target }}\n", "metadata": {"source": "github.com/docker/build-push-action", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/validate.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.89, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 1.0}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "# reusable workflow\nname: .e2e-run\n\non:\n  workflow_call:\n    inputs:\n      id:\n        required: false\n        type: string\n      type:\n        required: true\n        type: string\n      name:\n        required: true\n        type: string\n      registry:\n        required: false\n        type: string\n      slug:\n        required: false\n        type: string\n      username_secret:\n        required: false\n        type: string\n      password_secret:\n        required: false\n        type: string\n\nenv:\n  HARBOR_VERSION: v2.7.0\n  NEXUS_VERSION: 3.47.1\n  DISTRIBUTION_VERSION: 2.8.1\n\njobs:\n  run:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        include:\n          -\n            buildx_version: edge\n            buildkit_image: moby/buildkit:latest\n          -\n            buildx_version: latest\n            buildkit_image: moby/buildkit:buildx-stable-1\n          -\n            buildx_version: https://github.com/docker/buildx.git#master\n            buildkit_image: moby/buildkit:master\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up env\n        if: inputs.type == 'local'\n        run: |\n          cat ./.github/e2e/${{ inputs.id }}/env >> $GITHUB_ENV\n      -\n        name: Set up BuildKit config\n        run: |\n          touch /tmp/buildkitd.toml\n          if [ \"${{ inputs.type }}\" = \"local\" ]; then\n            echo -e \"[registry.\\\"${{ env.REGISTRY_FQDN }}\\\"]\\nhttp = true\\ninsecure = true\" > /tmp/buildkitd.toml\n          fi\n      -\n        name: Set up Docker daemon\n        if: inputs.type == 'local'\n        run: |\n          if [ ! -e /etc/docker/daemon.json ]; then\n            echo '{}' | sudo tee /etc/docker/daemon.json >/dev/null\n          fi\n          DOCKERD_CONFIG=$(jq '.+{\"insecure-registries\":[\"http://${{ env.REGISTRY_FQDN }}\"]}' /etc/docker/daemon.json)\n          sudo tee /etc/docker/daemon.json <<<\"$DOCKERD_CONFIG\" >/dev/null\n          cat /etc/docker/daemon.json\n          sudo service docker restart\n      -\n        name: Install ${{ inputs.name }}\n        if: inputs.type == 'local'\n        run: |\n          sudo -E bash ./.github/e2e/${{ inputs.id }}/install.sh\n          sudo chown $(id -u):$(id -g) -R ~/.docker\n      -\n        name: Docker meta\n        id: meta\n        uses: docker/metadata-action@v5\n        with:\n          images: ${{ env.REGISTRY_SLUG || inputs.slug }}\n          tags: |\n            type=ref,event=branch,enable=${{ matrix.buildx_version == 'latest' && matrix.buildkit_image == 'moby/buildkit:buildx-stable-1' }}\n            type=ref,event=tag,enable=${{ matrix.buildx_version == 'latest' && matrix.buildkit_image == 'moby/buildkit:buildx-stable-1' }}\n            type=raw,gh-runid-${{ github.run_id }}\n      -\n        name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ matrix.buildx_version }}\n          buildkitd-config: /tmp/buildkitd.toml\n          buildkitd-flags: --debug --allow-insecure-entitlement security.insecure --allow-insecure-entitlement network.host\n          driver-opts: |\n            image=${{ matrix.buildkit_image }}\n            network=host\n      -\n        name: Login to Registry\n        if: github.event_name != 'pull_request' && (env.REGISTRY_USER || inputs.username_secret) != ''\n        uses: docker/login-action@v3\n        with:\n          registry: ${{ env.REGISTRY_FQDN || inputs.registry }}\n          username: ${{ env.REGISTRY_USER || secrets[inputs.username_secret] }}\n          password: ${{ env.REGISTRY_PASSWORD || secrets[inputs.password_secret] }}\n      -\n        name: Build and push\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/multi.Dockerfile\n          platforms: linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/ppc64le,linux/s390x\n          push: ${{ github.event_name != 'pull_request' }}\n          tags: ${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n          cache-from: type=registry,ref=${{ env.REGISTRY_SLUG || inputs.slug }}:master\n          cache-to: type=inline\n      -\n        name: Inspect image\n        run: |\n          docker pull ${{ env.REGISTRY_SLUG || inputs.slug }}:${{ steps.meta.outputs.version }}\n          docker image inspect ${{ env.REGISTRY_SLUG || inputs.slug }}:${{ steps.meta.outputs.version }}\n      -\n        name: Check manifest\n        run: |\n          docker buildx imagetools inspect ${{ env.REGISTRY_SLUG || inputs.slug }}:${{ steps.meta.outputs.version }} --format '{{json .}}'\n", "metadata": {"source": "github.com/docker/build-push-action", "language": "yaml", "complexity": "complex", "file_path": ".github/workflows/.e2e-run.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.88, "syntax_valid": true, "completeness_score": 0.8500000000000001, "authenticity_score": 1.0}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: ci\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\non:\n  workflow_dispatch:\n    inputs:\n      buildx-version:\n        description: 'Buildx version or Git context'\n        default: 'latest'\n        required: false\n      buildkit-image:\n        description: 'BuildKit image'\n        default: 'moby/buildkit:buildx-stable-1'\n        required: false\n  schedule:\n    - cron: '0 10 * * *'\n  push:\n    branches:\n      - 'master'\n      - 'releases/v*'\n  pull_request:\n\nenv:\n  BUILDX_VERSION: edge\n  BUILDKIT_IMAGE: moby/buildkit:latest\n\njobs:\n  minimal:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n        with:\n          path: action\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build\n        uses: ./action\n        with:\n          file: ./test/Dockerfile\n\n  git-context:\n    runs-on: ubuntu-latest\n    services:\n      registry:\n        image: registry:2\n        ports:\n          - 5000:5000\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n        with:\n          path: action\n      -\n        name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n      -\n        name: Set up Docker Buildx\n        id: buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            network=host\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build and push\n        id: docker_build\n        uses: ./action\n        with:\n          file: ./test/Dockerfile\n          builder: ${{ steps.buildx.outputs.name }}\n          platforms: linux/amd64,linux/arm64\n          push: true\n          tags: |\n            localhost:5000/name/app:latest\n            localhost:5000/name/app:1.0.0\n      -\n        name: Inspect\n        run: |\n          docker buildx imagetools inspect localhost:5000/name/app:1.0.0 --format '{{json .}}'\n      -\n        name: Check digest\n        run: |\n          if [ -z \"${{ steps.docker_build.outputs.digest }}\" ]; then\n            echo \"::error::Digest should not be empty\"\n            exit 1\n          fi\n\n  git-context-secret:\n    runs-on: ubuntu-latest\n    services:\n      registry:\n        image: registry:2\n        ports:\n          - 5000:5000\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n        with:\n          path: action\n      -\n        name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n      -\n        name: Set up Docker Buildx\n        id: buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            network=host\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build and push\n        id: docker_build\n        uses: ./action\n        with:\n          file: ./test/Dockerfile\n          builder: ${{ steps.buildx.outputs.name }}\n          platforms: linux/amd64,linux/arm64\n          push: true\n          tags: |\n            localhost:5000/name/app:latest\n            localhost:5000/name/app:1.0.0\n          secrets: |\n            GIT_AUTH_TOKEN=${{ github.token }}\n            \"MYSECRET=aaaaaaaa\n            bbbbbbb\n            ccccccccc\"\n            FOO=bar\n            \"EMPTYLINE=aaaa\n\n            bbbb\n            ccc\"\n      -\n        name: Inspect\n        run: |\n          docker buildx imagetools inspect localhost:5000/name/app:1.0.0 --format '{{json .}}'\n      -\n        name: Check digest\n        run: |\n          if [ -z \"${{ steps.docker_build.outputs.digest }}\" ]; then\n            echo \"::error::Digest should not be empty\"\n            exit 1\n          fi\n\n  path-context:\n    runs-on: ubuntu-latest\n    services:\n      registry:\n        image: registry:2\n        ports:\n          - 5000:5000\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n      -\n        name: Set up Docker Buildx\n        id: buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            network=host\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build and push\n        id: docker_build\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/Dockerfile\n          builder: ${{ steps.buildx.outputs.name }}\n          push: true\n          tags: |\n            localhost:5000/name/app:latest\n            localhost:5000/name/app:1.0.0\n      -\n        name: Inspect\n        run: |\n          docker buildx imagetools inspect localhost:5000/name/app:1.0.0 --format '{{json .}}'\n      -\n        name: Check digest\n        run: |\n          if [ -z \"${{ steps.docker_build.outputs.digest }}\" ]; then\n            echo \"::error::Digest should not be empty\"\n            exit 1\n          fi\n\n  example:\n    runs-on: ubuntu-latest\n    env:\n      DOCKER_IMAGE: localhost:5000/name/app\n    services:\n      registry:\n        image: registry:2\n        ports:\n          - 5000:5000\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Docker meta\n        id: meta\n        uses: docker/metadata-action@v5\n        with:\n          images: ${{ env.DOCKER_IMAGE }}\n          tags: |\n            type=schedule\n            type=ref,event=branch\n            type=ref,event=pr\n            type=semver,pattern={{version}}\n            type=semver,pattern={{major}}.{{minor}}\n            type=semver,pattern={{major}}\n            type=sha\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            network=host\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build and export to Docker client\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/Dockerfile\n          load: true\n          tags: ${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n      -\n        name: Build and push to local registry\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/Dockerfile\n          push: ${{ github.event_name != 'pull_request' }}\n          tags: ${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n      -\n        name: Inspect image\n        run: |\n          docker image inspect ${{ env.DOCKER_IMAGE }}:${{ steps.meta.outputs.version }}\n      -\n        name: Check manifest\n        if: github.event_name != 'pull_request'\n        run: |\n          docker buildx imagetools inspect ${{ env.DOCKER_IMAGE }}:${{ steps.meta.outputs.version }} --format '{{json .}}'\n\n  error:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Stop docker\n        run: |\n          sudo systemctl stop docker docker.socket\n      -\n        name: Build\n        id: docker_build\n        continue-on-error: true\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/Dockerfile\n      -\n        name: Check\n        run: |\n          if [ \"${{ steps.docker_build.outcome }}\" != \"failure\" ] || [ \"${{ steps.docker_build.conclusion }}\" != \"success\" ]; then\n            echo \"::error::Should have failed\"\n            exit 1\n          fi\n\n  error-buildx:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build\n        id: docker_build\n        continue-on-error: true\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/Dockerfile\n          platforms: linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/ppc64le,linux/s390x\n          push: true\n          tags: localhost:5000/name/app:latest\n      -\n        name: Check\n        run: |\n          if [ \"${{ steps.docker_build.outcome }}\" != \"failure\" ] || [ \"${{ steps.docker_build.conclusion }}\" != \"success\" ]; then\n            echo \"::error::Should have failed\"\n            exit 1\n          fi\n\n  docker-driver:\n    runs-on: ubuntu-latest\n    services:\n      registry:\n        image: registry:2\n        ports:\n          - 5000:5000\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Build\n        id: docker_build\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/Dockerfile\n          push: true\n          tags: localhost:5000/name/app:latest\n\n  export-docker:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Build\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/Dockerfile\n          load: true\n          tags: myimage:latest\n      -\n        name: Inspect\n        run: |\n          docker image inspect myimage:latest\n\n  secret:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build\n        uses: ./\n        with:\n          context: .\n          file: ./test/secret.Dockerfile\n          secrets: |\n            MYSECRET=foo\n            INVALID_SECRET=\n\n  secret-envs:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up Docker buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build\n        uses: ./\n        env:\n          ENV_SECRET: foo\n        with:\n          context: .\n          file: ./test/secret.Dockerfile\n          secret-envs: |\n            MYSECRET=ENV_SECRET\n            INVALID_SECRET=\n\n  network:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: List networks\n        run: docker network ls\n      -\n        name: Build\n        uses: ./\n        with:\n          context: ./test\n          tags: name/app:latest\n          network: host\n\n  shm-size:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/shmsize.Dockerfile\n          tags: name/app:latest\n          shm-size: 2g\n\n  ulimit:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            network=host\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/ulimit.Dockerfile\n          tags: name/app:latest\n          ulimit: |\n            nofile=1024:1024\n            nproc=3\n\n  cgroup-parent:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            network=host\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/cgroup.Dockerfile\n          tags: name/app:latest\n          cgroup-parent: foo\n\n  add-hosts:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            network=host\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/addhost.Dockerfile\n          tags: name/app:latest\n          add-hosts: |\n            docker:10.180.0.1\n            foo:10.0.0.1\n\n  no-cache-filters:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/nocachefilter.Dockerfile\n          no-cache-filters: build\n          tags: name/app:latest\n          cache-from: type=gha,scope=nocachefilter\n          cache-to: type=gha,scope=nocachefilter,mode=max\n\n  attests-compat:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        include:\n          - buildx: edge\n            buildkit: moby/buildkit:latest\n          - buildx: latest\n            buildkit: moby/buildkit:buildx-stable-1\n          - buildx: latest\n            buildkit: moby/buildkit:v0.10.6\n          - buildx: v0.9.1\n            buildkit: moby/buildkit:buildx-stable-1\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ matrix.buildx }}\n          driver-opts: |\n            network=host\n            image=${{ matrix.buildkit }}\n      -\n        name: Build\n        uses: ./\n        with:\n          context: ./test/go\n          file: ./test/go/Dockerfile\n          outputs: type=cacheonly\n\n  provenance:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        include:\n          - target: image\n            output: type=image,name=localhost:5000/name/app:latest,push=true\n            attr: mode=max\n          - target: image\n            output: type=image,name=localhost:5000/name/app:latest,push=true\n            attr: ''\n          - target: binary\n            output: /tmp/buildx-build\n            attr: mode=max\n          - target: binary\n            output: /tmp/buildx-build\n            attr: ''\n    services:\n      registry:\n        image: registry:2\n        ports:\n          - 5000:5000\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            network=host\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build\n        uses: ./\n        with:\n          context: ./test/go\n          file: ./test/go/Dockerfile\n          target: ${{ matrix.target }}\n          outputs: ${{ matrix.output }}\n          provenance: ${{ matrix.attr }}\n      -\n        name: Inspect Provenance\n        if: matrix.target == 'image'\n        run: |\n          docker buildx imagetools inspect localhost:5000/name/app:latest --format '{{json .Provenance}}'\n      -\n        name: Check output folder\n        if: matrix.target == 'binary'\n        run: |\n          tree /tmp/buildx-build\n      -\n        name: Print local Provenance\n        if: matrix.target == 'binary'\n        run: |\n          cat /tmp/buildx-build/provenance.json | jq\n\n  sbom:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        include:\n          - target: image\n            output: type=image,name=localhost:5000/name/app:latest,push=true\n          - target: binary\n            output: /tmp/buildx-build\n    services:\n      registry:\n        image: registry:2\n        ports:\n          - 5000:5000\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            network=host\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build\n        uses: ./\n        with:\n          context: ./test/go\n          file: ./test/go/Dockerfile\n          target: ${{ matrix.target }}\n          outputs: ${{ matrix.output }}\n          sbom: true\n          cache-from: type=gha,scope=attests-${{ matrix.target }}\n          cache-to: type=gha,scope=attests-${{ matrix.target }},mode=max\n      -\n        name: Inspect SBOM\n        if: matrix.target == 'image'\n        run: |\n          docker buildx imagetools inspect localhost:5000/name/app:latest --format '{{json .SBOM}}'\n      -\n        name: Check output folder\n        if: matrix.target == 'binary'\n        run: |\n          tree /tmp/buildx-build\n      -\n        name: Print local SBOM\n        if: matrix.target == 'binary'\n        run: |\n          cat /tmp/buildx-build/sbom.spdx.json | jq\n\n  multi:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        dockerfile:\n          - multi\n          - multi-sudo\n    services:\n      registry:\n        image: registry:2\n        ports:\n          - 5000:5000\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n      -\n        name: Set up Docker Buildx\n        id: buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            network=host\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build and push\n        id: docker_build\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/${{ matrix.dockerfile }}.Dockerfile\n          builder: ${{ steps.buildx.outputs.name }}\n          platforms: linux/amd64,linux/arm64\n          push: true\n          tags: |\n            localhost:5000/name/app:latest\n            localhost:5000/name/app:1.0.0\n      -\n        name: Inspect\n        run: |\n          docker buildx imagetools inspect localhost:5000/name/app:1.0.0 --format '{{json .}}'\n      -\n        name: Check digest\n        run: |\n          if [ -z \"${{ steps.docker_build.outputs.digest }}\" ]; then\n            echo \"::error::Digest should not be empty\"\n            exit 1\n          fi\n\n  digest:\n    runs-on: ubuntu-latest\n    env:\n      DOCKER_IMAGE: localhost:5000/name/app\n    strategy:\n      fail-fast: false\n      matrix:\n        driver:\n          - docker\n          - docker-container\n        load:\n          - true\n          - false\n        push:\n          - true\n          - false\n        exclude:\n          - driver: docker\n            load: true\n            push: true\n          - driver: docker-container\n            load: true\n            push: true\n    services:\n      registry:\n        image: registry:2\n        ports:\n          - 5000:5000\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver: ${{ matrix.driver }}\n          driver-opts: |\n            network=host\n      -\n        name: Build\n        id: docker_build\n        uses: ./\n        with:\n          context: ./test\n          load: ${{ matrix.load }}\n          push: ${{ matrix.push }}\n          tags: ${{ env.DOCKER_IMAGE }}:latest\n          platforms: ${{ matrix.platforms }}\n      -\n        name: Docker images\n        run: |\n          docker image ls --no-trunc\n      -\n        name: Check digest\n        run: |\n          if [[ \"${{ matrix.driver }}\" = \"docker-container\" ]] && [[ \"${{ matrix.load }}\" = \"false\" ]] && [[ \"${{ matrix.push }}\" = \"false\" ]]; then\n            if [ -n \"${{ steps.docker_build.outputs.digest }}\" ]; then\n              echo \"::error::Digest should be empty\"\n              exit 1\n            fi\n          elif [[ \"${{ matrix.push }}\" = \"true\" ]] && [[ -z \"${{ steps.docker_build.outputs.digest }}\" ]]; then\n            echo \"::error::Digest should not be empty\"\n            exit 1\n          fi\n      -\n        name: Check manifest\n        if: ${{ matrix.push }}\n        run: |\n          set -x\n          docker buildx imagetools inspect ${{ env.DOCKER_IMAGE }}@${{ steps.docker_build.outputs.digest }} --format '{{json .}}'\n      -\n        name: Check image ID\n        run: |\n          if [[ \"${{ matrix.driver }}\" = \"docker-container\" ]] && [[ \"${{ matrix.load }}\" = \"false\" ]] && [[ \"${{ matrix.push }}\" = \"false\" ]]; then\n            if [ -n \"${{ steps.docker_build.outputs.imageid }}\" ]; then\n              echo \"::error::Image ID should be empty\"\n              exit 1\n            fi\n          elif [ -z \"${{ steps.docker_build.outputs.imageid }}\" ]; then\n            echo \"::error::Image ID should not be empty\"\n            exit 1\n          fi\n      -\n        name: Inspect image\n        if: ${{ matrix.load }}\n        run: |\n          set -x\n          docker image inspect ${{ steps.docker_build.outputs.imageid }}\n\n  registry-cache:\n    runs-on: ubuntu-latest\n    services:\n      registry:\n        image: registry:2\n        ports:\n          - 5000:5000\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            network=host\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build and push\n        id: docker_build\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/multi.Dockerfile\n          builder: ${{ steps.buildx.outputs.name }}\n          platforms: linux/amd64,linux/arm64\n          push: true\n          tags: |\n            localhost:5000/name/app:latest\n            localhost:5000/name/app:1.0.0\n          cache-from: type=registry,ref=localhost:5000/name/app\n          cache-to: type=inline\n      -\n        name: Inspect\n        run: |\n          docker buildx imagetools inspect localhost:5000/name/app:latest --format '{{json .}}'\n      -\n        name: Check digest\n        run: |\n          if [ -z \"${{ steps.docker_build.outputs.digest }}\" ]; then\n            echo \"::error::Digest should not be empty\"\n            exit 1\n          fi\n\n  github-cache:\n    runs-on: ubuntu-latest\n    services:\n      registry:\n        image: registry:2\n        ports:\n          - 5000:5000\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            network=host\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n          buildkitd-flags: --debug\n      -\n        name: Build and push\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/multi.Dockerfile\n          platforms: linux/amd64,linux/arm64\n          push: true\n          tags: |\n            localhost:5000/name/app:latest\n            localhost:5000/name/app:1.0.0\n          cache-from: type=gha,scope=ci-${{ matrix.buildx_version }}\n          cache-to: type=gha,scope=ci-${{ matrix.buildx_version }}\n      -\n        name: Inspect\n        run: |\n          docker buildx imagetools inspect localhost:5000/name/app:1.0.0 --format '{{json .}}'\n\n  local-cache:\n    runs-on: ubuntu-latest\n    services:\n      registry:\n        image: registry:2\n        ports:\n          - 5000:5000\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            network=host\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n          buildkitd-flags: --debug\n      -\n        name: Cache Build\n        uses: actions/cache@v4\n        with:\n          path: /tmp/.buildx-cache\n          key: ${{ runner.os }}-local-test-${{ github.sha }}\n          restore-keys: |\n            ${{ runner.os }}-local-test-\n      -\n        name: Build and push\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/multi.Dockerfile\n          platforms: linux/amd64,linux/arm64\n          push: true\n          tags: |\n            localhost:5000/name/app:latest\n            localhost:5000/name/app:1.0.0\n          cache-from: type=local,src=/tmp/.buildx-cache\n          cache-to: type=local,dest=/tmp/.buildx-cache-new\n      -\n        name: Inspect\n        run: |\n          docker buildx imagetools inspect localhost:5000/name/app:1.0.0 --format '{{json .}}'\n      -\n        # Temp fix\n        # https://github.com/docker/build-push-action/issues/252\n        # https://github.com/moby/buildkit/issues/1896\n        name: Move cache\n        run: |\n          rm -rf /tmp/.buildx-cache\n          mv /tmp/.buildx-cache-new /tmp/.buildx-cache\n\n  standalone:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Uninstall docker cli\n        run: |\n          if dpkg -s \"docker-ce\" >/dev/null 2>&1; then\n            sudo dpkg -r --force-depends docker-ce-cli docker-buildx-plugin\n          else\n            sudo apt-get purge -y moby-cli moby-buildx\n          fi\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            network=host\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/Dockerfile\n\n  named-context-pin:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build base image\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/named-context.Dockerfile\n          build-contexts: |\n            alpine=docker-image://alpine:edge\n\n  named-context-docker:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver: docker\n      -\n        name: Build base image\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/named-context-base.Dockerfile\n          load: true\n          tags: my-base-image:local\n      -\n        name: Build\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/named-context.Dockerfile\n          build-contexts: |\n            base=docker-image://my-base-image:local\n\n  named-context-container:\n    runs-on: ubuntu-latest\n    services:\n      registry:\n        image: registry:2\n        ports:\n          - 5000:5000\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n            network=host\n      -\n        name: Build base image\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/named-context-base.Dockerfile\n          tags: localhost:5000/my-base-image:latest\n          push: true\n      -\n        name: Build\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/named-context.Dockerfile\n          build-contexts: |\n            alpine=docker-image://localhost:5000/my-base-image:latest\n\n  docker-config-malformed:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set malformed docker config\n        run: |\n          mkdir -p ~/.docker\n          echo 'foo_bar' >> ~/.docker/config.json\n      -\n        name: Build\n        uses: ./\n        with:\n          context: ./test\n\n  proxy-docker-config:\n    runs-on: ubuntu-latest\n    services:\n      squid-proxy:\n        image: ubuntu/squid:latest\n        ports:\n          - 3128:3128\n    steps:\n      -\n        name: Check proxy\n        run: |\n          netstat -aptn\n          curl --retry 5 --retry-all-errors --retry-delay 0 --connect-timeout 5 --proxy http://127.0.0.1:3128 -v --insecure --head https://www.google.com\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set proxy config\n        run: |\n          mkdir -p ~/.docker\n          echo '{\"proxies\":{\"default\":{\"httpProxy\":\"http://127.0.0.1:3128\",\"httpsProxy\":\"http://127.0.0.1:3128\"}}}' > ~/.docker/config.json\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n            network=host\n          buildkitd-flags: --debug\n      -\n        name: Build\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/proxy.Dockerfile\n\n  proxy-buildkitd:\n    runs-on: ubuntu-latest\n    services:\n      squid-proxy:\n        image: ubuntu/squid:latest\n        ports:\n          - 3128:3128\n    steps:\n      -\n        name: Check proxy\n        run: |\n          netstat -aptn\n          curl --retry 5 --retry-all-errors --retry-delay 0 --connect-timeout 5 --proxy http://127.0.0.1:3128 -v --insecure --head https://www.google.com\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n            network=host\n            env.http_proxy=http://127.0.0.1:3128\n            env.https_proxy=http://127.0.0.1:3128\n          buildkitd-flags: --debug\n      -\n        name: Build\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/Dockerfile\n\n  annotations:\n    runs-on: ubuntu-latest\n    env:\n      DOCKER_IMAGE: localhost:5000/name/app\n    services:\n      registry:\n        image: registry:2\n        ports:\n          - 5000:5000\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Docker meta\n        id: meta\n        uses: docker/metadata-action@v5\n        with:\n          images: ${{ env.DOCKER_IMAGE }}\n          tags: |\n            type=schedule\n            type=ref,event=branch\n            type=ref,event=pr\n            type=semver,pattern={{version}}\n            type=semver,pattern={{major}}.{{minor}}\n            type=semver,pattern={{major}}\n            type=sha\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            network=host\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build and push to local registry\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/Dockerfile\n          push: true\n          tags: ${{ steps.meta.outputs.tags }}\n          annotations: |\n            index:com.example.key=value\n            index:com.example.key2=value2\n            manifest:com.example.key3=value3\n      -\n        name: Check manifest\n        run: |\n          docker buildx imagetools inspect ${{ env.DOCKER_IMAGE }}:${{ steps.meta.outputs.version }} --format '{{json .}}'\n\n  multi-output:\n    runs-on: ubuntu-latest\n    services:\n      registry:\n        image: registry:2\n        ports:\n          - 5000:5000\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            network=host\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n          buildkitd-flags: --debug\n      -\n        name: Build\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/Dockerfile\n          outputs: |\n            type=image,name=localhost:5000/name/app:latest,push=true\n            type=docker,name=app:local\n            type=oci,dest=/tmp/oci.tar\n      -\n        name: Check registry\n        run: |\n          docker buildx imagetools inspect localhost:5000/name/app:latest --format '{{json .}}'\n      -\n        name: Check docker\n        run: |\n          docker image inspect app:local\n      -\n        name: Check oci\n        run: |\n          set -ex\n          mkdir -p /tmp/oci-out\n          tar xf /tmp/oci.tar -C /tmp/oci-out\n          tree -nh /tmp/oci-out\n\n  load-and-push:\n    runs-on: ubuntu-latest\n    services:\n      registry:\n        image: registry:2\n        ports:\n          - 5000:5000\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            network=host\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n          buildkitd-flags: --debug\n      -\n        name: Build\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/Dockerfile\n          load: true\n          push: true\n          tags: localhost:5000/name/app:latest\n      -\n        name: Check registry\n        run: |\n          docker buildx imagetools inspect localhost:5000/name/app:latest --format '{{json .}}'\n      -\n        name: Check docker\n        run: |\n          docker image inspect localhost:5000/name/app:latest\n\n  summary-disable:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n        with:\n          path: action\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build\n        uses: ./action\n        with:\n          file: ./test/Dockerfile\n        env:\n          DOCKER_BUILD_SUMMARY: false\n\n  summary-disable-deprecated:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n        with:\n          path: action\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build\n        uses: ./action\n        with:\n          file: ./test/Dockerfile\n        env:\n          DOCKER_BUILD_NO_SUMMARY: true\n\n  summary-not-supported:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n        with:\n          path: action\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: v0.12.1\n          driver-opts: |\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build\n        uses: ./action\n        with:\n          file: ./test/Dockerfile\n\n  record-upload-disable:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n        with:\n          path: action\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build\n        uses: ./action\n        with:\n          file: ./test/Dockerfile\n        env:\n          DOCKER_BUILD_RECORD_UPLOAD: false\n\n  record-retention-days:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        days:\n          - 2\n          - 0\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n        with:\n          path: action\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build\n        uses: ./action\n        with:\n          file: ./test/Dockerfile\n        env:\n          DOCKER_BUILD_RECORD_RETENTION_DAYS: ${{ matrix.days }}\n\n  export-legacy:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        legacy:\n          - false\n          - true\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n        with:\n          path: action\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build\n        uses: ./action\n        with:\n          file: ./test/Dockerfile\n        env:\n          DOCKER_BUILD_EXPORT_LEGACY: ${{ matrix.legacy }}\n\n  checks:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        buildx-version:\n          - edge\n          - latest\n          - v0.14.1\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ matrix.buildx-version }}\n          driver-opts: |\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/lint.Dockerfile\n\n  annotations-disabled:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/lint.Dockerfile\n        env:\n          DOCKER_BUILD_CHECKS_ANNOTATIONS: false\n\n  call-check:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build\n        id: docker_build\n        continue-on-error: true\n        uses: ./\n        with:\n          context: ./test\n          file: ./test/lint.Dockerfile\n          call: check\n      -\n        name: Check\n        run: |\n          if [ \"${{ steps.docker_build.outcome }}\" != \"failure\" ] || [ \"${{ steps.docker_build.conclusion }}\" != \"success\" ]; then\n            echo \"::error::Should have failed\"\n            exit 1\n          fi\n\n  no-default-attestations:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n        with:\n          path: action\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}\n          driver-opts: |\n            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}\n      -\n        name: Build\n        uses: ./action\n        with:\n          file: ./test/Dockerfile\n        env:\n          BUILDX_NO_DEFAULT_ATTESTATIONS: 1\n", "metadata": {"source": "github.com/docker/build-push-action", "language": "yaml", "complexity": "complex", "file_path": ".github/workflows/ci.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8300000000000001, "syntax_valid": true, "completeness_score": 0.55, "authenticity_score": 1.0}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: e2e\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 10 * * *'\n  push:\n    branches:\n      - 'master'\n    tags:\n      - 'v*'\n\njobs:\n  build:\n    uses: ./.github/workflows/.e2e-run.yml\n    strategy:\n      fail-fast: false\n      matrix:\n        include:\n          -\n            name: Distribution\n            id: distribution\n            type: local\n          -\n            name: Docker Hub\n            registry: ''\n            slug: ghactionstest/ghactionstest\n            username_secret: DOCKERHUB_USERNAME\n            password_secret: DOCKERHUB_TOKEN\n            type: remote\n          -\n            name: GitHub\n            registry: ghcr.io\n            slug: ghcr.io/docker-ghactiontest/test\n            username_secret: GHCR_USERNAME\n            password_secret: GHCR_PAT\n            type: remote\n          -\n            name: GitLab\n            registry: registry.gitlab.com\n            slug: registry.gitlab.com/test1716/test\n            username_secret: GITLAB_USERNAME\n            password_secret: GITLAB_TOKEN\n            type: remote\n          -\n            name: AWS ECR\n            registry: 175142243308.dkr.ecr.us-east-2.amazonaws.com\n            slug: 175142243308.dkr.ecr.us-east-2.amazonaws.com/sandbox/test-docker-action\n            username_secret: AWS_ACCESS_KEY_ID\n            password_secret: AWS_SECRET_ACCESS_KEY\n            type: remote\n          -\n            name: AWS ECR Public\n            registry: public.ecr.aws\n            slug: public.ecr.aws/q3b5f1u4/test-docker-action\n            username_secret: AWS_ACCESS_KEY_ID\n            password_secret: AWS_SECRET_ACCESS_KEY\n            type: remote\n          -\n            name: Google Artifact Registry\n            registry: us-east4-docker.pkg.dev\n            slug: us-east4-docker.pkg.dev/sandbox-298914/docker-official-github-actions/test-docker-action\n            username_secret: GAR_USERNAME\n            password_secret: GAR_JSON_KEY\n            type: remote\n          -\n            name: Azure Container Registry\n            registry: officialgithubactions.azurecr.io\n            slug: officialgithubactions.azurecr.io/test-docker-action\n            username_secret: AZURE_CLIENT_ID\n            password_secret: AZURE_CLIENT_SECRET\n            type: remote\n          -\n            name: Quay\n            registry: quay.io\n            slug: quay.io/docker_build_team/ghactiontest\n            username_secret: QUAY_USERNAME\n            password_secret: QUAY_TOKEN\n            type: remote\n          -\n            name: Artifactory\n            registry: infradock.jfrog.io\n            slug: infradock.jfrog.io/test-ghaction/build-push-action\n            username_secret: ARTIFACTORY_USERNAME\n            password_secret: ARTIFACTORY_TOKEN\n            type: remote\n          -\n            name: Harbor\n            id: harbor\n            type: local\n          -\n            name: Nexus\n            id: nexus\n            type: local\n    with:\n      id: ${{ matrix.id }}\n      type: ${{ matrix.type }}\n      name: ${{ matrix.name }}\n      registry: ${{ matrix.registry }}\n      slug: ${{ matrix.slug }}\n      username_secret: ${{ matrix.username_secret }}\n      password_secret: ${{ matrix.password_secret }}\n    secrets: inherit\n", "metadata": {"source": "github.com/docker/build-push-action", "language": "yaml", "complexity": "complex", "file_path": ".github/workflows/e2e.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8999999999999999, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 1.0}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: pr-assign-author\n\npermissions:\n  contents: read\n\non:\n  pull_request_target:\n    types:\n      - opened\n      - reopened\n\njobs:\n  run:\n    uses: crazy-max/.github/.github/workflows/pr-assign-author.yml@1b673f36fad86812f538c1df9794904038a23cbf\n    permissions:\n      contents: read\n      pull-requests: write\n", "metadata": {"source": "github.com/docker/build-push-action", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/pr-assign-author.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.89, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 1.0}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: publish\n\non:\n  release:\n    types:\n      - published\n\njobs:\n  publish:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      id-token: write\n      packages: write\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Publish\n        uses: actions/publish-immutable-action@v0.0.4\n", "metadata": {"source": "github.com/docker/build-push-action", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/publish.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.89, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 1.0}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: test\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\non:\n  push:\n    branches:\n      - 'master'\n      - 'releases/v*'\n  pull_request:\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: Test\n        uses: docker/bake-action@v6\n        with:\n          source: .\n          targets: test\n      -\n        name: Upload coverage\n        uses: codecov/codecov-action@v5\n        with:\n          files: ./coverage/clover.xml\n          token: ${{ secrets.CODECOV_TOKEN }}\n", "metadata": {"source": "github.com/docker/build-push-action", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/test.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.89, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 1.0}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: validate\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\non:\n  push:\n    branches:\n      - 'master'\n      - 'releases/v*'\n  pull_request:\n\njobs:\n  prepare:\n    runs-on: ubuntu-latest\n    outputs:\n      targets: ${{ steps.generate.outputs.targets }}\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v4\n      -\n        name: List targets\n        id: generate\n        uses: docker/bake-action/subaction/list-targets@v6\n        with:\n          target: validate\n\n  validate:\n    runs-on: ubuntu-latest\n    needs:\n      - prepare\n    strategy:\n      fail-fast: false\n      matrix:\n        target: ${{ fromJson(needs.prepare.outputs.targets) }}\n    steps:\n      -\n        name: Validate\n        uses: docker/bake-action@v6\n        with:\n          targets: ${{ matrix.target }}\n", "metadata": {"source": "github.com/docker/build-push-action", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/validate.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.89, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 1.0}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "on:\n  [pull_request]\n\nname: Check\n\njobs:\n  check:\n    name: Run Unit Tests\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n    - name: Run tests\n      run: |\n        npm ci\n        npm test\n\n  conventional-commits:\n    name: Semantic Pull Request\n    runs-on: ubuntu-latest\n    steps:\n      - name: validate\n        uses: actions/github-script@v6\n        with:\n          script: |\n            // See https://gist.github.com/marcojahn/482410b728c31b221b70ea6d2c433f0c#file-conventional-commit-regex-md\n            const regex = /^(build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test){1}(\\([\\w\\-\\.]+\\))?(!)?: ([\\w ])+([\\s\\S]*)/g;\n            const pr = context.payload.pull_request;\n            const title = pr.title;\n            if (title.match(regex) == null) {\n              throw `PR title \"${title}\"\" does not match conventional commits from https://www.conventionalcommits.org/en/v1.0.0/`\n            }\n", "metadata": {"source": "github.com/aws-actions/amazon-ecr-login", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/check.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8825000000000002, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "# For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [main]\n  schedule:\n    - cron: '0 0 * * 2'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        # Override automatic language detection by changing the below list\n        # Supported options are ['csharp', 'cpp', 'go', 'java', 'javascript', 'python']\n        language: ['javascript']\n        # Learn more...\n        # https://docs.github.com/en/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#overriding-automatic-language-detection\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n      with:\n        # We must fetch at least the immediate parents so that if this is\n        # a pull request then we can checkout the head.\n        fetch-depth: 2\n\n    # If this run was triggered by a pull request event, then checkout\n    # the head of the pull request instead of the merge commit.\n    - run: git checkout HEAD^2\n      if: ${{ github.event_name == 'pull_request' }}\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # ℹ️ Command-line programs to run using the OS shell.\n    # 📚 https://git.io/JvXDl\n\n    # ✏️ If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n", "metadata": {"source": "github.com/aws-actions/amazon-ecr-login", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/codeql-analysis.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8625, "syntax_valid": true, "completeness_score": 0.8, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "on:\n  push:\n    branches:\n      - main\n\nname: Package\n\njobs:\n  check:\n    name: Package distribution file\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n      with:\n        ref: main\n    - name: Package\n      run: |\n        npm ci\n        npm test\n        npm run package\n    - name: Commit\n      run: |\n        git config --global user.name \"GitHub Actions\"\n        git add dist/\n        git commit -m \"chore: Update dist\" || echo \"No changes to commit\"\n        git push origin HEAD:main\n", "metadata": {"source": "github.com/aws-actions/amazon-ecr-login", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/package.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8825000000000002, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "on:\n  [pull_request]\n\nname: Check\n\njobs:\n  check:\n    name: Run Unit Tests\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n    - name: Run tests\n      run: |\n        npm ci\n        npm test\n\n  conventional-commits:\n    name: Semantic Pull Request\n    runs-on: ubuntu-latest\n    steps:\n      - name: validate\n        uses: actions/github-script@v6\n        with:\n          script: |\n            // See https://gist.github.com/marcojahn/482410b728c31b221b70ea6d2c433f0c#file-conventional-commit-regex-md\n            const regex = /^(build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test){1}(\\([\\w\\-\\.]+\\))?(!)?: ([\\w ])+([\\s\\S]*)/g;\n            const pr = context.payload.pull_request;\n            const title = pr.title;\n            if (title.match(regex) == null) {\n              throw `PR title \"${title}\"\" does not match conventional commits from https://www.conventionalcommits.org/en/v1.0.0/`\n            }\n", "metadata": {"source": "github.com/aws-actions/amazon-ecr-login", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/check.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8825000000000002, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "# For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [main]\n  schedule:\n    - cron: '0 0 * * 2'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        # Override automatic language detection by changing the below list\n        # Supported options are ['csharp', 'cpp', 'go', 'java', 'javascript', 'python']\n        language: ['javascript']\n        # Learn more...\n        # https://docs.github.com/en/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#overriding-automatic-language-detection\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n      with:\n        # We must fetch at least the immediate parents so that if this is\n        # a pull request then we can checkout the head.\n        fetch-depth: 2\n\n    # If this run was triggered by a pull request event, then checkout\n    # the head of the pull request instead of the merge commit.\n    - run: git checkout HEAD^2\n      if: ${{ github.event_name == 'pull_request' }}\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # ℹ️ Command-line programs to run using the OS shell.\n    # 📚 https://git.io/JvXDl\n\n    # ✏️ If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n", "metadata": {"source": "github.com/aws-actions/amazon-ecr-login", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/codeql-analysis.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8625, "syntax_valid": true, "completeness_score": 0.8, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "on:\n  push:\n    branches:\n      - main\n\nname: Package\n\njobs:\n  check:\n    name: Package distribution file\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n      with:\n        ref: main\n    - name: Package\n      run: |\n        npm ci\n        npm test\n        npm run package\n    - name: Commit\n      run: |\n        git config --global user.name \"GitHub Actions\"\n        git add dist/\n        git commit -m \"chore: Update dist\" || echo \"No changes to commit\"\n        git push origin HEAD:main\n", "metadata": {"source": "github.com/aws-actions/amazon-ecr-login", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/package.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8825000000000002, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "---\nname: Dependabot auto-merge\non: pull_request\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ (github.event.pull_request && github.event.pull_request.number) || github.ref || github.run_id }}\n  cancel-in-progress: true\n\npermissions:\n  contents: read\n\njobs:\n  dependabot:\n    permissions:\n      contents: write\n      pull-requests: write\n    runs-on: ubuntu-latest\n    if: ${{ github.event.pull_request.user.login == 'dependabot[bot]' && github.repository_owner == 'prometheus' }}\n    steps:\n    - name: Dependabot metadata\n      id: metadata\n      uses: dependabot/fetch-metadata@08eff52bf64351f401fb50d4972fa95b9f2c2d1b # v2.4.0\n      with:\n        github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n    - name: Enable auto-merge for Dependabot PRs\n      if: ${{steps.metadata.outputs.update-type == 'version-update:semver-minor' || steps.metadata.outputs.update-type == 'version-update:semver-patch'}}\n      run: gh pr merge --auto --merge \"$PR_URL\"\n      env:\n        PR_URL: ${{github.event.pull_request.html_url}}\n        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n", "metadata": {"source": "github.com/prometheus/prometheus", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/automerge-dependabot.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: buf.build\non:\n  pull_request:\n    paths:\n      - \".github/workflows/buf-lint.yml\"\n      - \"**.proto\"\npermissions:\n  contents: read\n\njobs:\n  buf:\n    name: lint\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n        with:\n          persist-credentials: false\n      - uses: bufbuild/buf-setup-action@a47c93e0b1648d5651a065437926377d060baa99 # v1.50.0\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n      - uses: bufbuild/buf-lint-action@06f9dd823d873146471cfaaf108a993fe00e5325 # v1.1.1\n        with:\n          input: 'prompb'\n      - uses: bufbuild/buf-breaking-action@c57b3d842a5c3f3b454756ef65305a50a587c5ba # v1.1.4\n        with:\n          input: 'prompb'\n          against: 'https://github.com/prometheus/prometheus.git#branch=main,ref=HEAD,subdir=prompb'\n", "metadata": {"source": "github.com/prometheus/prometheus", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/buf-lint.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: buf.build\non:\n  push:\n    branches:\n      - main\npermissions:\n  contents: read\n\njobs:\n  buf:\n    name: lint and publish\n    runs-on: ubuntu-latest\n    if: github.repository_owner == 'prometheus'\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n        with:\n          persist-credentials: false\n      - uses: bufbuild/buf-setup-action@a47c93e0b1648d5651a065437926377d060baa99 # v1.50.0\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n      - uses: bufbuild/buf-lint-action@06f9dd823d873146471cfaaf108a993fe00e5325 # v1.1.1\n        with:\n          input: 'prompb'\n      - uses: bufbuild/buf-breaking-action@c57b3d842a5c3f3b454756ef65305a50a587c5ba # v1.1.4\n        with:\n          input: 'prompb'\n          against: 'https://github.com/prometheus/prometheus.git#branch=main,ref=HEAD~1,subdir=prompb'\n      - uses: bufbuild/buf-push-action@a654ff18effe4641ebea4a4ce242c49800728459 # v1.1.1\n        with:\n          input: 'prompb'\n          buf_token: ${{ secrets.BUF_TOKEN }}\n", "metadata": {"source": "github.com/prometheus/prometheus", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/buf.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "---\nname: \"CodeQL\"\n\non:\n  workflow_call:\n  schedule:\n    - cron: \"26 14 * * 1\"\n\npermissions:\n  contents: read\n  security-events: write\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [\"javascript\"]\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n        with:\n          persist-credentials: false\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@181d5eefc20863364f96762470ba6f862bdef56b # v3.29.2\n        with:\n          languages: ${{ matrix.language }}\n\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@181d5eefc20863364f96762470ba6f862bdef56b # v3.29.2\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@181d5eefc20863364f96762470ba6f862bdef56b # v3.29.2\n", "metadata": {"source": "github.com/prometheus/prometheus", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/codeql-analysis.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "---\nname: Push README to Docker Hub\non:\n  push:\n    paths:\n      - \"README.md\"\n      - \"README-containers.md\"\n      - \".github/workflows/container_description.yml\"\n    branches: [ main, master ]\n\npermissions:\n  contents: read\n\njobs:\n  PushDockerHubReadme:\n    runs-on: ubuntu-latest\n    name: Push README to Docker Hub\n    if: github.repository_owner == 'prometheus' || github.repository_owner == 'prometheus-community' # Don't run this workflow on forks.\n    steps:\n      - name: git checkout\n        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n        with:\n          persist-credentials: false\n      - name: Set docker hub repo name\n        run: echo \"DOCKER_REPO_NAME=$(make docker-repo-name)\" >> $GITHUB_ENV\n      - name: Push README to Dockerhub\n        uses: christian-korneck/update-container-description-action@d36005551adeaba9698d8d67a296bd16fa91f8e8 # v1\n        env:\n          DOCKER_USER: ${{ secrets.DOCKER_HUB_LOGIN }}\n          DOCKER_PASS: ${{ secrets.DOCKER_HUB_PASSWORD }}\n        with:\n          destination_container_repo: ${{ env.DOCKER_REPO_NAME }}\n          provider: dockerhub\n          short_description: ${{ env.DOCKER_REPO_NAME }}\n          # Empty string results in README-containers.md being pushed if it\n          # exists. Otherwise, README.md is pushed.\n          readme_file: ''\n\n  PushQuayIoReadme:\n    runs-on: ubuntu-latest\n    name: Push README to quay.io\n    if: github.repository_owner == 'prometheus' || github.repository_owner == 'prometheus-community' # Don't run this workflow on forks.\n    steps:\n      - name: git checkout\n        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n        with:\n          persist-credentials: false\n      - name: Set quay.io org name\n        run: echo \"DOCKER_REPO=$(echo quay.io/${GITHUB_REPOSITORY_OWNER} | tr -d '-')\" >> $GITHUB_ENV\n      - name: Set quay.io repo name\n        run: echo \"DOCKER_REPO_NAME=$(make docker-repo-name)\" >> $GITHUB_ENV\n      - name: Push README to quay.io\n        uses: christian-korneck/update-container-description-action@d36005551adeaba9698d8d67a296bd16fa91f8e8 # v1\n        env:\n          DOCKER_APIKEY: ${{ secrets.QUAY_IO_API_TOKEN }}\n        with:\n          destination_container_repo: ${{ env.DOCKER_REPO_NAME }}\n          provider: quay\n          # Empty string results in README-containers.md being pushed if it\n          # exists. Otherwise, README.md is pushed.\n          readme_file: ''\n", "metadata": {"source": "github.com/prometheus/prometheus", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/container_description.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8700000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: CIFuzz\non:\n  workflow_call:\npermissions:\n  contents: read\n\njobs:\n  Fuzzing:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Build Fuzzers\n        id: build\n        uses: google/oss-fuzz/infra/cifuzz/actions/build_fuzzers@cafd7a0eb8ecb4e007c56897996a9b65c49c972f # master\n        with:\n          oss-fuzz-project-name: \"prometheus\"\n          dry-run: false\n      - name: Run Fuzzers\n        uses: google/oss-fuzz/infra/cifuzz/actions/run_fuzzers@cafd7a0eb8ecb4e007c56897996a9b65c49c972f # master\n        # Note: Regularly check for updates to the pinned commit hash at:\n        # https://github.com/google/oss-fuzz/tree/master/infra/cifuzz/actions/run_fuzzers\n        with:\n          oss-fuzz-project-name: \"prometheus\"\n          fuzz-seconds: 600\n          dry-run: false\n      - name: Upload Crash\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        if: failure() && steps.build.outcome == 'success'\n        with:\n          name: artifacts\n          path: ./out/artifacts\n", "metadata": {"source": "github.com/prometheus/prometheus", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/fuzzing.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8925000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: 'Lock Threads'\n\non:\n  schedule:\n    - cron: '13 23 * * *'\n  workflow_dispatch:\n\npermissions:\n  issues: write\n\nconcurrency:\n  group: lock\n\njobs:\n  action:\n    runs-on: ubuntu-latest\n    if: github.repository_owner == 'prometheus'\n    steps:\n      - uses: dessant/lock-threads@1bf7ec25051fe7c00bdd17e6a7cf3d7bfb7dc771 # v5.0.1\n        with:\n          process-only: 'issues'\n          issue-inactive-days: '180'\n          github-token: ${{ secrets.PROMBOT_LOCKTHREADS_TOKEN }}\n", "metadata": {"source": "github.com/prometheus/prometheus", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/lock.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "on:\n  repository_dispatch:\n    types: [prombench_start, prombench_restart, prombench_stop]\nname: Prombench Workflow\npermissions:\n  contents: read\nenv:\n  AUTH_FILE: ${{ secrets.TEST_INFRA_PROVIDER_AUTH }}\n  CLUSTER_NAME: test-infra\n  DOMAIN_NAME: prombench.prometheus.io\n  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n  GITHUB_ORG: prometheus\n  GITHUB_REPO: prometheus\n  GITHUB_STATUS_TARGET_URL: https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}\n  LAST_COMMIT_SHA: ${{ github.event.client_payload.LAST_COMMIT_SHA }}\n  GKE_PROJECT_ID: macro-mile-203600\n  PR_NUMBER: ${{ github.event.client_payload.PR_NUMBER }}\n  PROVIDER: gke\n  RELEASE: ${{ github.event.client_payload.RELEASE }}\n  BENCHMARK_VERSION: ${{ github.event.client_payload.BENCHMARK_VERSION }}\n  BENCHMARK_DIRECTORY: ${{ github.event.client_payload.BENCHMARK_DIRECTORY }}\n  ZONE: europe-west3-a\njobs:\n  benchmark_start:\n    name: Benchmark Start\n    if: github.event.action == 'prombench_start'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Update status to pending\n        run: >-\n          curl -i -X POST\n          -H \"Authorization: Bearer $GITHUB_TOKEN\"\n          -H \"Content-Type: application/json\"\n          --data '{\"state\":\"pending\",  \"context\": \"prombench-status-update-start\", \"target_url\": \"'$GITHUB_STATUS_TARGET_URL'\"}'\n          \"https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$LAST_COMMIT_SHA\"\n      - name: Run make deploy to start test\n        id: make_deploy\n        uses: docker://prominfra/prombench:master\n        with:\n          args: >-\n            until make all_nodes_deleted; do echo \"waiting for nodepools to be deleted\"; sleep 10; done;\n            make deploy;\n      - name: Update status to failure\n        if: failure()\n        run: >-\n          curl -i -X POST\n          -H \"Authorization: Bearer $GITHUB_TOKEN\"\n          -H \"Content-Type: application/json\"\n          --data '{\"state\":\"failure\",  \"context\": \"prombench-status-update-start\", \"target_url\": \"'$GITHUB_STATUS_TARGET_URL'\"}'\n          \"https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$LAST_COMMIT_SHA\"\n      - name: Update status to success\n        if: success()\n        run: >-\n          curl -i -X POST\n          -H \"Authorization: Bearer $GITHUB_TOKEN\"\n          -H \"Content-Type: application/json\"\n          --data '{\"state\":\"success\",  \"context\": \"prombench-status-update-start\", \"target_url\": \"'$GITHUB_STATUS_TARGET_URL'\"}'\n          \"https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$LAST_COMMIT_SHA\"\n  benchmark_cancel:\n    name: Benchmark Cancel\n    if: github.event.action == 'prombench_stop'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Update status to pending\n        run: >-\n          curl -i -X POST\n          -H \"Authorization: Bearer $GITHUB_TOKEN\"\n          -H \"Content-Type: application/json\"\n          --data '{\"state\":\"pending\",  \"context\": \"prombench-status-update-cancel\", \"target_url\": \"'$GITHUB_STATUS_TARGET_URL'\"}'\n          \"https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$LAST_COMMIT_SHA\"\n      - name: Run make clean to stop test\n        id: make_clean\n        uses: docker://prominfra/prombench:master\n        with:\n          args: >-\n            until make all_nodes_running; do echo \"waiting for nodepools to be created\"; sleep 10; done;\n            make clean;\n      - name: Update status to failure\n        if: failure()\n        run: >-\n          curl -i -X POST\n          -H \"Authorization: Bearer $GITHUB_TOKEN\"\n          -H \"Content-Type: application/json\"\n          --data '{\"state\":\"failure\",  \"context\": \"prombench-status-update-cancel\", \"target_url\": \"'$GITHUB_STATUS_TARGET_URL'\"}'\n          \"https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$LAST_COMMIT_SHA\"\n      - name: Update status to success\n        if: success()\n        run: >-\n          curl -i -X POST\n          -H \"Authorization: Bearer $GITHUB_TOKEN\"\n          -H \"Content-Type: application/json\"\n          --data '{\"state\":\"success\",  \"context\": \"prombench-status-update-cancel\", \"target_url\": \"'$GITHUB_STATUS_TARGET_URL'\"}'\n          \"https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$LAST_COMMIT_SHA\"\n  benchmark_restart:\n    name: Benchmark Restart\n    if: github.event.action == 'prombench_restart'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Update status to pending\n        run: >-\n          curl -i -X POST\n          -H \"Authorization: Bearer $GITHUB_TOKEN\"\n          -H \"Content-Type: application/json\"\n          --data '{\"state\":\"pending\",  \"context\": \"prombench-status-update-restart\", \"target_url\": \"'$GITHUB_STATUS_TARGET_URL'\"}'\n          \"https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$LAST_COMMIT_SHA\"\n      - name: Run make clean then make deploy to restart test\n        id: make_restart\n        uses: docker://prominfra/prombench:master\n        with:\n          args: >-\n            until make all_nodes_running; do echo \"waiting for nodepools to be created\"; sleep 10; done;\n            make clean;\n            until make all_nodes_deleted; do echo \"waiting for nodepools to be deleted\"; sleep 10; done;\n            make deploy;\n      - name: Update status to failure\n        if: failure()\n        run: >-\n          curl -i -X POST\n          -H \"Authorization: Bearer $GITHUB_TOKEN\"\n          -H \"Content-Type: application/json\"\n          --data '{\"state\":\"failure\",  \"context\": \"prombench-status-update-restart\", \"target_url\": \"'$GITHUB_STATUS_TARGET_URL'\"}'\n          \"https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$LAST_COMMIT_SHA\"\n      - name: Update status to success\n        if: success()\n        run: >-\n          curl -i -X POST\n          -H \"Authorization: Bearer $GITHUB_TOKEN\"\n          -H \"Content-Type: application/json\"\n          --data '{\"state\":\"success\",  \"context\": \"prombench-status-update-restart\", \"target_url\": \"'$GITHUB_STATUS_TARGET_URL'\"}'\n          \"https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$LAST_COMMIT_SHA\"\n", "metadata": {"source": "github.com/prometheus/prometheus", "language": "yaml", "complexity": "complex", "file_path": ".github/workflows/prombench.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.9025000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "---\nname: Sync repo files\non:\n  schedule:\n    - cron: '44 17 * * *'\npermissions:\n  contents: read\n\njobs:\n  repo_sync:\n    runs-on: ubuntu-latest\n    if: github.repository_owner == 'prometheus'\n    container:\n      image: quay.io/prometheus/golang-builder\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n        with:\n          persist-credentials: false\n      - run: ./scripts/sync_repo_files.sh\n        env:\n          GITHUB_TOKEN: ${{ secrets.PROMBOT_GITHUB_TOKEN }}\n", "metadata": {"source": "github.com/prometheus/prometheus", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/repo_sync.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "# Copyright 2022 Google LLC\n\nname: Scorecards supply-chain security\non:\n  pull_request:\n  push:\n    branches: [ \"main\" ]\n\n# Declare default permissions as read only.\npermissions: read-all\n\njobs:\n  analysis:\n    name: Scorecards analysis\n    runs-on: ubuntu-latest\n    permissions:\n      # Needed to upload the results to code-scanning dashboard.\n      security-events: write\n      # Used to receive a badge.\n      id-token: write\n\n    steps:\n      - name: \"Checkout code\"\n        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # tag=v4.2.2\n        with:\n          persist-credentials: false\n\n      - name: \"Run analysis\"\n        uses: ossf/scorecard-action@05b42c624433fc40578a4040d5cf5e36ddca8cde # tag=v2.4.2\n        with:\n          results_file: results.sarif\n          results_format: sarif\n          # Publish the results for public repositories to enable scorecard badges. For more details, see\n          # https://github.com/ossf/scorecard-action#publishing-results.\n          publish_results: ${{ github.event_name != 'pull_request' }}\n\n      # Upload the results as artifacts (optional). Commenting out will disable uploads of run results in SARIF\n      # format to the repository Actions tab.\n      - name: \"Upload artifact\"\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # tag=v4.6.2\n        with:\n          name: SARIF file\n          path: results.sarif\n          retention-days: 5\n\n      # Upload the results to GitHub's code scanning dashboard.\n      - name: \"Upload to code-scanning\"\n        uses: github/codeql-action/upload-sarif@181d5eefc20863364f96762470ba6f862bdef56b # tag=v3.29.2\n        with:\n          sarif_file: results.sarif\n", "metadata": {"source": "github.com/prometheus/prometheus", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/scorecards.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8700000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Stale Check\non:\n  workflow_dispatch: {}\n  schedule:\n    - cron: '16 22 * * *'\npermissions:\n  issues: write\n  pull-requests: write\njobs:\n  stale:\n    if: github.repository_owner == 'prometheus' || github.repository_owner == 'prometheus-community' # Don't run this workflow on forks.\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/stale@5bef64f19d7facfb25b37b414482c7164d639639 # v9.1.0\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          # opt out of defaults to avoid marking issues as stale and closing them\n          # https://github.com/actions/stale#days-before-close\n          # https://github.com/actions/stale#days-before-stale\n          days-before-stale: -1\n          days-before-close: -1\n          # Setting it to empty string to skip comments.\n          # https://github.com/actions/stale#stale-pr-message\n          # https://github.com/actions/stale#stale-issue-message\n          stale-pr-message: ''\n          stale-issue-message: ''\n          operations-per-run: 30\n          # override days-before-stale, for only marking the pull requests as stale\n          days-before-pr-stale: 60\n          stale-pr-label: stale\n          exempt-pr-labels: keepalive\n", "metadata": {"source": "github.com/prometheus/prometheus", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/stale.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8700000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "---\nname: Dependabot auto-merge\non: pull_request\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ (github.event.pull_request && github.event.pull_request.number) || github.ref || github.run_id }}\n  cancel-in-progress: true\n\npermissions:\n  contents: read\n\njobs:\n  dependabot:\n    permissions:\n      contents: write\n      pull-requests: write\n    runs-on: ubuntu-latest\n    if: ${{ github.event.pull_request.user.login == 'dependabot[bot]' && github.repository_owner == 'prometheus' }}\n    steps:\n    - name: Dependabot metadata\n      id: metadata\n      uses: dependabot/fetch-metadata@08eff52bf64351f401fb50d4972fa95b9f2c2d1b # v2.4.0\n      with:\n        github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n    - name: Enable auto-merge for Dependabot PRs\n      if: ${{steps.metadata.outputs.update-type == 'version-update:semver-minor' || steps.metadata.outputs.update-type == 'version-update:semver-patch'}}\n      run: gh pr merge --auto --merge \"$PR_URL\"\n      env:\n        PR_URL: ${{github.event.pull_request.html_url}}\n        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n", "metadata": {"source": "github.com/prometheus/prometheus", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/automerge-dependabot.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: buf.build\non:\n  pull_request:\n    paths:\n      - \".github/workflows/buf-lint.yml\"\n      - \"**.proto\"\npermissions:\n  contents: read\n\njobs:\n  buf:\n    name: lint\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n        with:\n          persist-credentials: false\n      - uses: bufbuild/buf-setup-action@a47c93e0b1648d5651a065437926377d060baa99 # v1.50.0\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n      - uses: bufbuild/buf-lint-action@06f9dd823d873146471cfaaf108a993fe00e5325 # v1.1.1\n        with:\n          input: 'prompb'\n      - uses: bufbuild/buf-breaking-action@c57b3d842a5c3f3b454756ef65305a50a587c5ba # v1.1.4\n        with:\n          input: 'prompb'\n          against: 'https://github.com/prometheus/prometheus.git#branch=main,ref=HEAD,subdir=prompb'\n", "metadata": {"source": "github.com/prometheus/prometheus", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/buf-lint.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: buf.build\non:\n  push:\n    branches:\n      - main\npermissions:\n  contents: read\n\njobs:\n  buf:\n    name: lint and publish\n    runs-on: ubuntu-latest\n    if: github.repository_owner == 'prometheus'\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n        with:\n          persist-credentials: false\n      - uses: bufbuild/buf-setup-action@a47c93e0b1648d5651a065437926377d060baa99 # v1.50.0\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n      - uses: bufbuild/buf-lint-action@06f9dd823d873146471cfaaf108a993fe00e5325 # v1.1.1\n        with:\n          input: 'prompb'\n      - uses: bufbuild/buf-breaking-action@c57b3d842a5c3f3b454756ef65305a50a587c5ba # v1.1.4\n        with:\n          input: 'prompb'\n          against: 'https://github.com/prometheus/prometheus.git#branch=main,ref=HEAD~1,subdir=prompb'\n      - uses: bufbuild/buf-push-action@a654ff18effe4641ebea4a4ce242c49800728459 # v1.1.1\n        with:\n          input: 'prompb'\n          buf_token: ${{ secrets.BUF_TOKEN }}\n", "metadata": {"source": "github.com/prometheus/prometheus", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/buf.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "---\nname: \"CodeQL\"\n\non:\n  workflow_call:\n  schedule:\n    - cron: \"26 14 * * 1\"\n\npermissions:\n  contents: read\n  security-events: write\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [\"javascript\"]\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n        with:\n          persist-credentials: false\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@181d5eefc20863364f96762470ba6f862bdef56b # v3.29.2\n        with:\n          languages: ${{ matrix.language }}\n\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@181d5eefc20863364f96762470ba6f862bdef56b # v3.29.2\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@181d5eefc20863364f96762470ba6f862bdef56b # v3.29.2\n", "metadata": {"source": "github.com/prometheus/prometheus", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/codeql-analysis.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "---\nname: Push README to Docker Hub\non:\n  push:\n    paths:\n      - \"README.md\"\n      - \"README-containers.md\"\n      - \".github/workflows/container_description.yml\"\n    branches: [ main, master ]\n\npermissions:\n  contents: read\n\njobs:\n  PushDockerHubReadme:\n    runs-on: ubuntu-latest\n    name: Push README to Docker Hub\n    if: github.repository_owner == 'prometheus' || github.repository_owner == 'prometheus-community' # Don't run this workflow on forks.\n    steps:\n      - name: git checkout\n        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n        with:\n          persist-credentials: false\n      - name: Set docker hub repo name\n        run: echo \"DOCKER_REPO_NAME=$(make docker-repo-name)\" >> $GITHUB_ENV\n      - name: Push README to Dockerhub\n        uses: christian-korneck/update-container-description-action@d36005551adeaba9698d8d67a296bd16fa91f8e8 # v1\n        env:\n          DOCKER_USER: ${{ secrets.DOCKER_HUB_LOGIN }}\n          DOCKER_PASS: ${{ secrets.DOCKER_HUB_PASSWORD }}\n        with:\n          destination_container_repo: ${{ env.DOCKER_REPO_NAME }}\n          provider: dockerhub\n          short_description: ${{ env.DOCKER_REPO_NAME }}\n          # Empty string results in README-containers.md being pushed if it\n          # exists. Otherwise, README.md is pushed.\n          readme_file: ''\n\n  PushQuayIoReadme:\n    runs-on: ubuntu-latest\n    name: Push README to quay.io\n    if: github.repository_owner == 'prometheus' || github.repository_owner == 'prometheus-community' # Don't run this workflow on forks.\n    steps:\n      - name: git checkout\n        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n        with:\n          persist-credentials: false\n      - name: Set quay.io org name\n        run: echo \"DOCKER_REPO=$(echo quay.io/${GITHUB_REPOSITORY_OWNER} | tr -d '-')\" >> $GITHUB_ENV\n      - name: Set quay.io repo name\n        run: echo \"DOCKER_REPO_NAME=$(make docker-repo-name)\" >> $GITHUB_ENV\n      - name: Push README to quay.io\n        uses: christian-korneck/update-container-description-action@d36005551adeaba9698d8d67a296bd16fa91f8e8 # v1\n        env:\n          DOCKER_APIKEY: ${{ secrets.QUAY_IO_API_TOKEN }}\n        with:\n          destination_container_repo: ${{ env.DOCKER_REPO_NAME }}\n          provider: quay\n          # Empty string results in README-containers.md being pushed if it\n          # exists. Otherwise, README.md is pushed.\n          readme_file: ''\n", "metadata": {"source": "github.com/prometheus/prometheus", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/container_description.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8700000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: CIFuzz\non:\n  workflow_call:\npermissions:\n  contents: read\n\njobs:\n  Fuzzing:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Build Fuzzers\n        id: build\n        uses: google/oss-fuzz/infra/cifuzz/actions/build_fuzzers@cafd7a0eb8ecb4e007c56897996a9b65c49c972f # master\n        with:\n          oss-fuzz-project-name: \"prometheus\"\n          dry-run: false\n      - name: Run Fuzzers\n        uses: google/oss-fuzz/infra/cifuzz/actions/run_fuzzers@cafd7a0eb8ecb4e007c56897996a9b65c49c972f # master\n        # Note: Regularly check for updates to the pinned commit hash at:\n        # https://github.com/google/oss-fuzz/tree/master/infra/cifuzz/actions/run_fuzzers\n        with:\n          oss-fuzz-project-name: \"prometheus\"\n          fuzz-seconds: 600\n          dry-run: false\n      - name: Upload Crash\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        if: failure() && steps.build.outcome == 'success'\n        with:\n          name: artifacts\n          path: ./out/artifacts\n", "metadata": {"source": "github.com/prometheus/prometheus", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/fuzzing.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8925000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: 'Lock Threads'\n\non:\n  schedule:\n    - cron: '13 23 * * *'\n  workflow_dispatch:\n\npermissions:\n  issues: write\n\nconcurrency:\n  group: lock\n\njobs:\n  action:\n    runs-on: ubuntu-latest\n    if: github.repository_owner == 'prometheus'\n    steps:\n      - uses: dessant/lock-threads@1bf7ec25051fe7c00bdd17e6a7cf3d7bfb7dc771 # v5.0.1\n        with:\n          process-only: 'issues'\n          issue-inactive-days: '180'\n          github-token: ${{ secrets.PROMBOT_LOCKTHREADS_TOKEN }}\n", "metadata": {"source": "github.com/prometheus/prometheus", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/lock.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "on:\n  repository_dispatch:\n    types: [prombench_start, prombench_restart, prombench_stop]\nname: Prombench Workflow\npermissions:\n  contents: read\nenv:\n  AUTH_FILE: ${{ secrets.TEST_INFRA_PROVIDER_AUTH }}\n  CLUSTER_NAME: test-infra\n  DOMAIN_NAME: prombench.prometheus.io\n  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n  GITHUB_ORG: prometheus\n  GITHUB_REPO: prometheus\n  GITHUB_STATUS_TARGET_URL: https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}\n  LAST_COMMIT_SHA: ${{ github.event.client_payload.LAST_COMMIT_SHA }}\n  GKE_PROJECT_ID: macro-mile-203600\n  PR_NUMBER: ${{ github.event.client_payload.PR_NUMBER }}\n  PROVIDER: gke\n  RELEASE: ${{ github.event.client_payload.RELEASE }}\n  BENCHMARK_VERSION: ${{ github.event.client_payload.BENCHMARK_VERSION }}\n  BENCHMARK_DIRECTORY: ${{ github.event.client_payload.BENCHMARK_DIRECTORY }}\n  ZONE: europe-west3-a\njobs:\n  benchmark_start:\n    name: Benchmark Start\n    if: github.event.action == 'prombench_start'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Update status to pending\n        run: >-\n          curl -i -X POST\n          -H \"Authorization: Bearer $GITHUB_TOKEN\"\n          -H \"Content-Type: application/json\"\n          --data '{\"state\":\"pending\",  \"context\": \"prombench-status-update-start\", \"target_url\": \"'$GITHUB_STATUS_TARGET_URL'\"}'\n          \"https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$LAST_COMMIT_SHA\"\n      - name: Run make deploy to start test\n        id: make_deploy\n        uses: docker://prominfra/prombench:master\n        with:\n          args: >-\n            until make all_nodes_deleted; do echo \"waiting for nodepools to be deleted\"; sleep 10; done;\n            make deploy;\n      - name: Update status to failure\n        if: failure()\n        run: >-\n          curl -i -X POST\n          -H \"Authorization: Bearer $GITHUB_TOKEN\"\n          -H \"Content-Type: application/json\"\n          --data '{\"state\":\"failure\",  \"context\": \"prombench-status-update-start\", \"target_url\": \"'$GITHUB_STATUS_TARGET_URL'\"}'\n          \"https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$LAST_COMMIT_SHA\"\n      - name: Update status to success\n        if: success()\n        run: >-\n          curl -i -X POST\n          -H \"Authorization: Bearer $GITHUB_TOKEN\"\n          -H \"Content-Type: application/json\"\n          --data '{\"state\":\"success\",  \"context\": \"prombench-status-update-start\", \"target_url\": \"'$GITHUB_STATUS_TARGET_URL'\"}'\n          \"https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$LAST_COMMIT_SHA\"\n  benchmark_cancel:\n    name: Benchmark Cancel\n    if: github.event.action == 'prombench_stop'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Update status to pending\n        run: >-\n          curl -i -X POST\n          -H \"Authorization: Bearer $GITHUB_TOKEN\"\n          -H \"Content-Type: application/json\"\n          --data '{\"state\":\"pending\",  \"context\": \"prombench-status-update-cancel\", \"target_url\": \"'$GITHUB_STATUS_TARGET_URL'\"}'\n          \"https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$LAST_COMMIT_SHA\"\n      - name: Run make clean to stop test\n        id: make_clean\n        uses: docker://prominfra/prombench:master\n        with:\n          args: >-\n            until make all_nodes_running; do echo \"waiting for nodepools to be created\"; sleep 10; done;\n            make clean;\n      - name: Update status to failure\n        if: failure()\n        run: >-\n          curl -i -X POST\n          -H \"Authorization: Bearer $GITHUB_TOKEN\"\n          -H \"Content-Type: application/json\"\n          --data '{\"state\":\"failure\",  \"context\": \"prombench-status-update-cancel\", \"target_url\": \"'$GITHUB_STATUS_TARGET_URL'\"}'\n          \"https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$LAST_COMMIT_SHA\"\n      - name: Update status to success\n        if: success()\n        run: >-\n          curl -i -X POST\n          -H \"Authorization: Bearer $GITHUB_TOKEN\"\n          -H \"Content-Type: application/json\"\n          --data '{\"state\":\"success\",  \"context\": \"prombench-status-update-cancel\", \"target_url\": \"'$GITHUB_STATUS_TARGET_URL'\"}'\n          \"https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$LAST_COMMIT_SHA\"\n  benchmark_restart:\n    name: Benchmark Restart\n    if: github.event.action == 'prombench_restart'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Update status to pending\n        run: >-\n          curl -i -X POST\n          -H \"Authorization: Bearer $GITHUB_TOKEN\"\n          -H \"Content-Type: application/json\"\n          --data '{\"state\":\"pending\",  \"context\": \"prombench-status-update-restart\", \"target_url\": \"'$GITHUB_STATUS_TARGET_URL'\"}'\n          \"https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$LAST_COMMIT_SHA\"\n      - name: Run make clean then make deploy to restart test\n        id: make_restart\n        uses: docker://prominfra/prombench:master\n        with:\n          args: >-\n            until make all_nodes_running; do echo \"waiting for nodepools to be created\"; sleep 10; done;\n            make clean;\n            until make all_nodes_deleted; do echo \"waiting for nodepools to be deleted\"; sleep 10; done;\n            make deploy;\n      - name: Update status to failure\n        if: failure()\n        run: >-\n          curl -i -X POST\n          -H \"Authorization: Bearer $GITHUB_TOKEN\"\n          -H \"Content-Type: application/json\"\n          --data '{\"state\":\"failure\",  \"context\": \"prombench-status-update-restart\", \"target_url\": \"'$GITHUB_STATUS_TARGET_URL'\"}'\n          \"https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$LAST_COMMIT_SHA\"\n      - name: Update status to success\n        if: success()\n        run: >-\n          curl -i -X POST\n          -H \"Authorization: Bearer $GITHUB_TOKEN\"\n          -H \"Content-Type: application/json\"\n          --data '{\"state\":\"success\",  \"context\": \"prombench-status-update-restart\", \"target_url\": \"'$GITHUB_STATUS_TARGET_URL'\"}'\n          \"https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$LAST_COMMIT_SHA\"\n", "metadata": {"source": "github.com/prometheus/prometheus", "language": "yaml", "complexity": "complex", "file_path": ".github/workflows/prombench.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.9025000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "---\nname: Sync repo files\non:\n  schedule:\n    - cron: '44 17 * * *'\npermissions:\n  contents: read\n\njobs:\n  repo_sync:\n    runs-on: ubuntu-latest\n    if: github.repository_owner == 'prometheus'\n    container:\n      image: quay.io/prometheus/golang-builder\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n        with:\n          persist-credentials: false\n      - run: ./scripts/sync_repo_files.sh\n        env:\n          GITHUB_TOKEN: ${{ secrets.PROMBOT_GITHUB_TOKEN }}\n", "metadata": {"source": "github.com/prometheus/prometheus", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/repo_sync.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "# Copyright 2022 Google LLC\n\nname: Scorecards supply-chain security\non:\n  pull_request:\n  push:\n    branches: [ \"main\" ]\n\n# Declare default permissions as read only.\npermissions: read-all\n\njobs:\n  analysis:\n    name: Scorecards analysis\n    runs-on: ubuntu-latest\n    permissions:\n      # Needed to upload the results to code-scanning dashboard.\n      security-events: write\n      # Used to receive a badge.\n      id-token: write\n\n    steps:\n      - name: \"Checkout code\"\n        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # tag=v4.2.2\n        with:\n          persist-credentials: false\n\n      - name: \"Run analysis\"\n        uses: ossf/scorecard-action@05b42c624433fc40578a4040d5cf5e36ddca8cde # tag=v2.4.2\n        with:\n          results_file: results.sarif\n          results_format: sarif\n          # Publish the results for public repositories to enable scorecard badges. For more details, see\n          # https://github.com/ossf/scorecard-action#publishing-results.\n          publish_results: ${{ github.event_name != 'pull_request' }}\n\n      # Upload the results as artifacts (optional). Commenting out will disable uploads of run results in SARIF\n      # format to the repository Actions tab.\n      - name: \"Upload artifact\"\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # tag=v4.6.2\n        with:\n          name: SARIF file\n          path: results.sarif\n          retention-days: 5\n\n      # Upload the results to GitHub's code scanning dashboard.\n      - name: \"Upload to code-scanning\"\n        uses: github/codeql-action/upload-sarif@181d5eefc20863364f96762470ba6f862bdef56b # tag=v3.29.2\n        with:\n          sarif_file: results.sarif\n", "metadata": {"source": "github.com/prometheus/prometheus", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/scorecards.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8700000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Stale Check\non:\n  workflow_dispatch: {}\n  schedule:\n    - cron: '16 22 * * *'\npermissions:\n  issues: write\n  pull-requests: write\njobs:\n  stale:\n    if: github.repository_owner == 'prometheus' || github.repository_owner == 'prometheus-community' # Don't run this workflow on forks.\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/stale@5bef64f19d7facfb25b37b414482c7164d639639 # v9.1.0\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          # opt out of defaults to avoid marking issues as stale and closing them\n          # https://github.com/actions/stale#days-before-close\n          # https://github.com/actions/stale#days-before-stale\n          days-before-stale: -1\n          days-before-close: -1\n          # Setting it to empty string to skip comments.\n          # https://github.com/actions/stale#stale-pr-message\n          # https://github.com/actions/stale#stale-issue-message\n          stale-pr-message: ''\n          stale-issue-message: ''\n          operations-per-run: 30\n          # override days-before-stale, for only marking the pull requests as stale\n          days-before-pr-stale: 60\n          stale-pr-label: stale\n          exempt-pr-labels: keepalive\n", "metadata": {"source": "github.com/prometheus/prometheus", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/stale.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8700000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate circleci configuration for automated deployment\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "---\n# Prometheus has switched to GitHub action.\n# Circle CI is not disabled repository-wise so that previous pull requests\n# continue working.\n# This file does not generate any CircleCI workflow.\n\nversion: 2.1\n\nexecutors:\n  golang:\n    docker:\n      - image: busybox\n\njobs:\n  noopjob:\n    executor: golang\n\n    steps:\n      - run:\n          command: \"true\"\n\nworkflows:\n  version: 2\n  prometheus:\n    jobs:\n      - noopjob\n    triggers:\n      - schedule:\n          cron: \"0 0 30 2 *\"\n          filters:\n            branches:\n              only:\n                - main\n", "metadata": {"source": "github.com/prometheus/prometheus", "language": "yaml", "complexity": "simple", "file_path": ".circleci/config.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "# This workflow depends on the ./actionlint-format.txt file. It is MIT licensed (thanks, rhysd!): https://github.com/rhysd/actionlint/blob/2ab3a12c7848f6c15faca9a92612ef4261d0e370/testdata/format/sarif_template.txt\nname: Actionlint\n\non:\n  push:\n    branches:\n      - main\n      - release-*\n  pull_request:\n    types:\n      - opened\n      - synchronize\n      - reopened\n\npermissions: {}\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}\n\njobs:\n  run-actionlint:\n    name: Lint GitHub Actions files\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read # to check out the code\n      actions: read # to read the workflow files\n      security-events: write # for uploading the SARIF report\n\n    env:\n      ACTIONLINT_VERSION: 1.7.7\n      # curl -LXGET https://github.com/rhysd/actionlint/releases/download/v${ACTIONLINT_VERSION}/actionlint_${ACTIONLINT_VERSION}_checksums.txt | grep linux_amd64\n      CHECKSUM: 023070a287cd8cccd71515fedc843f1985bf96c436b7effaecce67290e7e0757\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4\n        with:\n          persist-credentials: false\n\n      # GitHub Actions only runs x86_64. This will break if that assumption changes.\n      - name: Download Actionlint\n        run: |\n          set -euo pipefail\n          curl -OLXGET https://github.com/rhysd/actionlint/releases/download/v\"${ACTIONLINT_VERSION}\"/actionlint_\"${ACTIONLINT_VERSION}\"_linux_amd64.tar.gz\n          echo \"${CHECKSUM}  actionlint_${ACTIONLINT_VERSION}_linux_amd64.tar.gz\" | sha256sum -c -\n          tar xzf actionlint_\"${ACTIONLINT_VERSION}\"_linux_amd64.tar.gz\n          test -f actionlint\n          chmod +x actionlint\n\n      - name: Run Actionlint\n        run: ./actionlint -format \"$(cat .github/workflows/actionlint-format.txt)\" | tee results.sarif\n\n      - name: Upload to GitHub security events\n        if: success() || failure()\n        # If there are security problems, GitHub will automatically comment on the PR for us.\n        uses: github/codeql-action/upload-sarif@28deaeda66b76a05916b6923827895f2b14ab387 # v3.28.16\n        with:\n          sarif_file: results.sarif\n          category: actionlint\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/actionlint.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8700000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Add comment about adding a What's new note\non:\n  pull_request:\n    types: [labeled]\n\njobs:\n  add-comment:\n    if: ${{ ! github.event.pull_request.head.repo.fork && contains(github.event.pull_request.labels.*.name, 'add to what''s new') }}\n    runs-on: ubuntu-latest\n    permissions:\n      pull-requests: write\n    steps:\n      - uses: marocchino/sticky-pull-request-comment@773744901bac0e8cbb5a0dc842800d45e9b2b405 # v2.9.4\n        with:\n          message: |\n            Since you've added the `Add to what's new` label, consider drafting a [What's new note](https://admin.grafana.com/content-admin/#/collections/whats-new/new) for this feature.\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/add-to-whats-new.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "on:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 0 * * 1'\n\njobs:\n  gen-swagger:\n    name: Alerting Swagger spec generation cron job\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 2\n          persist-credentials: false\n      - name: Set go version\n        uses: actions/setup-go@19bb51245e9c80abacb2e91cc42b33fa478b8639\n        with:\n          go-version-file: go.mod\n      - name: Build swagger\n        run: |\n          make -C pkg/services/ngalert/api/tooling post.json api.json\n      - name: Open Pull Request\n        uses: peter-evans/create-pull-request@4e1beaa7521e8b457b572c090b25bd3db56bf1c5\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          commit-message: \"chore: update alerting swagger spec\"\n          title: \"Alerting: Update Swagger spec\"\n          body: |\n            This is an automated pull request to update the alerting swagger spec.\n            Please review and merge.\n          branch: update-alerting-swagger-spec\n          delete-branch: true\n          labels: 'area/alerting,type/docs,no-changelog'\n          team-reviewers: 'grafana/alerting-backend'\n          draft: false\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/alerting-swagger-gen.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.915, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Update Alerting Module\n\non:\n  workflow_dispatch:\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  update-grafana:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n      pull-requests: write\n      id-token: write\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4 # 4.2.2\n        with:\n          persist-credentials: false\n      - name: Check if update branch exists\n        run: |\n          if git ls-remote --heads origin update-alerting-module | grep -q 'update-alerting-module'; then\n            echo \"Branch 'update-alerting-module' already exists. There might be an open PR with Grafana updates.\"\n            echo \"Please review and merge/close the existing PR before running this workflow again.\"\n            exit 1\n          fi\n\n      - name: Setup Go\n        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # 5.3.0\n        with:\n          \"go-version-file\": \"go.mod\"\n\n      - name: Extract current commit hash of alerting module\n        id: current-commit\n        run: |\n          FROM_COMMIT=$(go list -m -json github.com/grafana/alerting | jq -r '.Version' | grep -oP '(?<=-)[a-f0-9]+$')\n          echo \"from_commit=$FROM_COMMIT\" >> \"$GITHUB_OUTPUT\"\n\n      - name: Get current branch name\n        id: current-branch-name\n        run: echo \"name=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}\" >> \"$GITHUB_OUTPUT\"\n\n      - name: Get latest commit\n        id: latest-commit\n        env:\n          GH_TOKEN: ${{ github.token }}\n          BRANCH: ${{ steps.current-branch-name.outputs.name }}\n        run: |\n          TO_COMMIT=\"$(gh api repos/grafana/alerting/commits/\"$BRANCH\" --jq '.sha')\"\n           if [ -z \"$TO_COMMIT\" ]; then\n            echo \"Branch $BRANCH not found in alerting repo, falling back to main branch\"\n            exit 1\n          fi\n          echo \"to_commit=$TO_COMMIT\" >> \"$GITHUB_OUTPUT\"\n\n      - name: Compare commit hashes\n        run: |\n          FROM_COMMIT=\"${{ steps.current-commit.outputs.from_commit }}\"\n          TO_COMMIT=\"${{ steps.latest-commit.outputs.to_commit }}\"\n          \n          # Compare just the length of the shorter hash\n          SHORT_TO_COMMIT=\"${TO_COMMIT:0:${#FROM_COMMIT}}\"\n          \n          if [ \"$FROM_COMMIT\" = \"$SHORT_TO_COMMIT\" ]; then\n            echo \"Current version ($FROM_COMMIT) is already at latest ($SHORT_TO_COMMIT). No update needed.\"\n            exit 0\n          fi\n          echo \"Updates available: $FROM_COMMIT -> $TO_COMMIT\"\n\n      - name: Check for commit history\n        id: check-commits\n        env:\n          GH_TOKEN: ${{ github.token }}\n          FROM_COMMIT: ${{ steps.current-commit.outputs.from_commit }}\n          TO_COMMIT: ${{ steps.latest-commit.outputs.to_commit }}\n        run: |\n          # get all commits that contains 'Alerting:' in the message\n          ALERTING_COMMITS=\"$(gh api repos/grafana/alerting/compare/\"$FROM_COMMIT\"...\"$TO_COMMIT\" \\\n            --jq '.commits[].commit.message | split(\"\\n\")[0]')\" || true\n\n          # Use printf instead of echo -e for better multiline handling\n          printf \"%s\\n\" \"$ALERTING_COMMITS\"\n\n          # make the list for markdown and replace PR numbers with links\n          ALERTING_COMMITS_FORMATTED=\"$(echo \"$ALERTING_COMMITS\" | while read -r line; do echo \"- $line\" | sed -E 's/\\(#([0-9]+)\\)/[#\\1](https:\\/\\/github.com\\/grafana\\/grafana\\/pull\\/\\1)/g'; done)\"\n\n          {\n            echo \"alerting_commits<<EOF\"\n            echo \"$ALERTING_COMMITS_FORMATTED\"\n            echo \"EOF\"\n          } >> \"$GITHUB_OUTPUT\"\n\n      - name: Update alerting module\n        env:\n          GOSUMDB: off\n          PINNED_COMMIT: ${{ steps.latest-commit.outputs.to_commit }}\n        run: |\n          go get github.com/grafana/alerting@\"$PINNED_COMMIT\"\n          make update-workspace\n\n      - id: get-secrets\n        uses: grafana/shared-workflows/actions/get-vault-secrets@main # zizmor: ignore[unpinned-uses]\n        with:\n          repo_secrets: |\n            GITHUB_APP_ID=alerting-team:app-id\n            GITHUB_APP_PRIVATE_KEY=alerting-team:private-key\n\n      - name: \"Generate token\"\n        id: generate_token\n        uses: actions/create-github-app-token@0d564482f06ca65fa9e77e2510873638c82206f2 # 1.11.5\n        with:\n          app-id: ${{ env.GITHUB_APP_ID }}\n          private-key: ${{ env.GITHUB_APP_PRIVATE_KEY }}\n\n      - name: Create Pull Request\n        uses: peter-evans/create-pull-request@67ccf781d68cd99b580ae25a5c18a1cc84ffff1f # 7.0.6\n        id: create-pr\n        with:\n          token: '${{ steps.generate_token.outputs.token }}'\n          title:  'Alerting: Update alerting module to ${{ steps.latest-commit.outputs.to_commit }}'\n          branch: alerting/update-alerting-module\n          delete-branch: true\n          body: |\n            Updates Grafana Alerting module to latest version.\n\n            Compare changes: https://github.com/grafana/alerting/compare/${{ steps.current-commit.outputs.from_commit }}...${{ steps.latest-commit.outputs.to_commit }}\n            <details>\n            <summary>Commits</summary>\n\n            ${{ steps.check-commits.outputs.alerting_commits }}\n\n            </details>\n\n            Created by: [GitHub Action Job](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n      - name: Add PR URL to Summary\n        if: steps.create-pr.outputs.pull-request-url != ''\n        env:\n          PR_URL: ${{ steps.create-pr.outputs.pull-request-url }}\n        run: |\n          {\n            echo \"## Pull Request Created\"\n            echo \"🔗 [View Pull Request]($PR_URL)\"\n          } >> \"$GITHUB_STEP_SUMMARY\"\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "complex", "file_path": ".github/workflows/alerting-update-module.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.845, "syntax_valid": true, "completeness_score": 0.6, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Analytics Events Report\n\non:\n  workflow_dispatch:\n\npermissions: {}\n\njobs:\n  generate-report:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version-file: '.nvmrc'\n          cache: 'yarn'\n\n      - name: Install dependencies\n        run: yarn install --frozen-lockfile\n\n      - name: Generate analytics report\n        run: yarn analytics-report\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/analytics-events-report.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Auto-milestone\non:\n  pull_request_target:\n    types:\n      - opened\n      - reopened\n      - closed\n      - ready_for_review\n\npermissions:\n  pull-requests: write\n  contents: write\n\n# Note: this action runs with write permissions on GITHUB_TOKEN even from forks\n# so it must not run untrusted code (such as checking out the pull request)\njobs:\n  main:\n    runs-on: ubuntu-latest\n    if: github.event.pull_request.draft == false\n    steps:\n      # Note: Github will not trigger other actions from this because it uses\n      # the GITHUB_TOKEN token\n      - name: Run auto-milestone\n        uses: grafana/grafana-github-actions-go/auto-milestone@d4c452f92ed826d515dccf1f62923e537953acd8 # main\n        with:\n          pr: ${{ github.event.pull_request.number }}\n          token: ${{ secrets.GITHUB_TOKEN }}\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/auto-milestone.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8825000000000002, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Backend Code Checks\n\non:\n  pull_request:\n    paths-ignore:\n      - '*.md'\n      - 'docs/**'\n      - 'latest.json'\n  push:\n    branches:\n      - main\n    paths-ignore:\n      - '*.md'\n      - 'docs/**'\n      - 'latest.json'\n\npermissions:\n  contents: read\n  id-token: write\n\njobs:\n  validate-configs:\n    name: Validate Backend Configs\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n      - name: Setup Go\n        uses: actions/setup-go@v5\n        with:\n          # Explicitly set Go version to 1.24.1 to ensure consistent OpenAPI spec generation\n          # The crypto/x509 package has additional fields in Go 1.24.1 that affect the generated specs\n          # This ensures the GHAs environment matches what we use in the Drone pipeline\n          go-version: 1.24.1\n          cache: true\n\n      - name: Verify code generation\n        run: |\n          CODEGEN_VERIFY=1 make gen-cue\n          CODEGEN_VERIFY=1 make gen-jsonnet\n      \n      - name: Validate go.mod\n        run: go run scripts/modowners/modowners.go check go.mod\n\n      # Enterprise setup is needed for complete OpenAPI spec generation\n      # We only do this for internal PRs\n      - name: Setup Grafana Enterprise\n        if: github.event.pull_request.head.repo.fork == false\n        uses: ./.github/actions/setup-enterprise\n        \n      - name: Generate and Validate OpenAPI Specs\n        run: |\n          # For PRs from forks, we'll just run the basic swagger-gen without validation\n          if [[ \"${{ github.event_name }}\" == \"pull_request\" && \"${{ github.event.pull_request.head.repo.fork }}\" == \"true\" ]]; then\n            echo \"PR is from a fork, skipping enterprise-based validation\"\n            make swagger-gen\n            exit 0\n          fi\n          \n          # Clean and regenerate OpenAPI specs\n          make swagger-clean && make openapi3-gen\n          \n          # Check if the generated specs differ from what's in the repository\n          for f in public/api-merged.json public/openapi3.json; do git add $f; done\n          if [ -z \"$(git diff --name-only --cached)\" ]; then\n            echo \"OpenAPI specs are up to date!\"\n          else\n            echo \"OpenAPI specs are OUT OF DATE!\"\n            git diff --cached\n            echo \"Please ensure the branch is up-to-date, then regenerate the specification by running make swagger-clean && make openapi3-gen\"\n            exit 1\n          fi\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/backend-code-checks.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.9025000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Backend Unit Tests\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n      - release-*.*.*\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}\n\npermissions: {}\n\njobs:\n  detect-changes:\n    name: Detect whether code changed\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    outputs:\n      changed: ${{ steps.detect-changes.outputs.backend }}\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          persist-credentials: true # required to get more history in the changed-files action\n          fetch-depth: 2\n      - name: Detect changes\n        id: detect-changes\n        uses: ./.github/actions/change-detection\n        with:\n          self: .github/workflows/backend-unit-tests.yml\n\n  grafana:\n    # Run this workflow only for PRs from forks\n    # the `pr-backend-unit-tests-enterprise` workflow will run instead\n    needs: detect-changes\n    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == true && needs.detect-changes.outputs.changed == 'true'\n    strategy:\n      matrix:\n        shard: [\n          1/8, 2/8, 3/8, 4/8,\n          5/8, 6/8, 7/8, 8/8,\n        ]\n      fail-fast: false\n\n    name: Grafana (${{ matrix.shard }})\n    runs-on: ubuntu-latest-8-cores\n    continue-on-error: true\n    permissions:\n      contents: read\n      id-token: write\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n      - name: Setup Go\n        uses: actions/setup-go@v5\n        with:\n          go-version-file: go.mod\n      - name: Run unit tests\n        env:\n          SHARD: ${{ matrix.shard }}\n        run: |\n          set -euo pipefail\n          readarray -t PACKAGES <<< \"$(./scripts/ci/backend-tests/shard.sh -N\"$SHARD\")\"\n          go test -short -timeout=30m \"${PACKAGES[@]}\"\n\n  grafana-enterprise:\n    # Run this workflow for non-PR events (like pushes to `main` or `release-*`) OR for internal PRs (PRs not from forks)\n    needs: detect-changes\n    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false && needs.detect-changes.outputs.changed == 'true'\n    strategy:\n      matrix:\n        shard: [\n          1/8, 2/8, 3/8, 4/8,\n          5/8, 6/8, 7/8, 8/8,\n        ]\n      fail-fast: false\n\n    name: Grafana Enterprise (${{ matrix.shard }})\n    runs-on: ubuntu-latest-8-cores\n    permissions:\n      contents: read\n      id-token: write\n    steps:\n      # Set up repository clone\n      - name: Checkout code\n        uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n      - name: Setup Go\n        uses: actions/setup-go@v5\n        with:\n          go-version-file: go.mod\n      - name: Setup Enterprise\n        uses: ./.github/actions/setup-enterprise\n        with:\n          github-app-name: 'grafana-ci-bot'\n\n      # Prepare what we need to upload test results\n      - run: echo \"RESULTS_FILE=$(date --rfc-3339=seconds --utc | sed -s 's/ /-/g')_${SHARD/\\//_}.xml\" >> \"$GITHUB_ENV\"\n        env:\n          SHARD: ${{ matrix.shard }}\n      - run: go install github.com/jstemmer/go-junit-report/v2@85bf4716ac1f025f2925510a9f5e9f5bb347c009\n\n      # Run code\n      - name: Run unit tests\n        env:\n          SHARD: ${{ matrix.shard }}\n        run: |\n          set -euo pipefail\n\n          readarray -t PACKAGES <<< \"$(./scripts/ci/backend-tests/shard.sh -N\"$SHARD\")\"\n          # This tee requires pipefail to be set, otherwise `go test`'s exit code is thrown away.\n          # That means having no `-o pipefail` => failing tests => exit code 0, which is wrong.\n          go test -short -timeout=30m \"${PACKAGES[@]}\"\n\n  # This is the job that is actually required by rulesets.\n  # We need to require EITHER the OSS or the Enterprise job to pass.\n  # However, if one is skipped, GitHub won't flat-map the shards,\n  #   so they won't be accepted by a ruleset.\n  required-backend-unit-tests:\n    needs:\n      - grafana\n      - grafana-enterprise\n    # always() is the best function here.\n    # success() || failure() will skip this function if any need is also skipped.\n    # That means conditional test suites will fail the entire requirement check.\n    if: always()\n\n    name: All backend unit tests complete\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check test suites\n        env:\n          NEEDS: ${{ toJson(needs) }}\n        run: |\n          FAILURES=\"$(echo \"$NEEDS\" | jq 'with_entries(select(.value.result == \"failure\")) | map_values(.result)')\"\n          echo \"$FAILURES\"\n          if [ \"$(echo \"$FAILURES\" | jq '. | length')\" != \"0\" ]; then\n            exit 1\n          fi\n          echo \"All OK!\"\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "complex", "file_path": ".github/workflows/backend-unit-tests.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.88, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "# We need secrets to backport, but they're not available for actions ran by forks.\n# So this workflow is used as a 'trigger', which the backport-workflow.yml will with\n# via workflow_run\n\nname: Backport (trigger)\non:\n  pull_request:\n    types:\n      - closed\n      - labeled\n\npermissions: {}\n\njobs:\n  trigger:\n    # Only run this job if the PR has been merged and has a label containing \"backport v\"\n    if: |\n      github.repository == 'grafana/grafana' &&\n      github.event.pull_request.merged == true &&\n      contains(join(github.event.pull_request.labels.*.name, ','), 'backport v')\n    runs-on: ubuntu-latest\n    steps:\n      # TODO: save this as job summary instead?\n      - name: Trigger\n        run: |\n          echo \"Triggering workflow\"\n          echo \"See https://github.com/${{ github.repository }}/actions/workflows/workflow_run.yml for progress\"\n\n      # Create a JSON artifact with details of this PR to pass to the backport workflow.\n      # The { action: 'labelled', label: 'backport-1.23.x' } can only be determined from this event payload,\n      # and is needed to do a backport after a PR has been merged\n      #\n      # Important that we don't run *anything* from the PR which could modify the backport_data.json file\n      - name: Create action data\n        run: |\n          jq '{\n            action: .action,\n            label: .label.name,\n            pr_number: .number,\n          }' \"$GITHUB_EVENT_PATH\" > /tmp/pr_info.json\n\n      - name: Upload artifact\n        uses: actions/upload-artifact@v4\n        with:\n          name: pr_info\n          path: /tmp/pr_info.json\n          retention-days: 1\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/backport-trigger.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.81, "syntax_valid": true, "completeness_score": 0.7, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "# Runs the actual backport, after being triggered by the backport-trigger.yml workflow.\n\nname: Backport (workflow)\nrun-name: \"Backport for ${{ github.event.workflow_run.head_branch }} #${{ github.event.workflow_run.run_number }}\"\non:\n  workflow_run: # zizmor: ignore[dangerous-triggers] backport-trigger.yml does not run any user code\n    workflows: [\"Backport (trigger)\"]\n    types:\n      - completed\n\npermissions: {}\n\njobs:\n  backport:\n    # Only run this job if the triggering workflow was not skipped (and on grafana repo)\n    if: github.repository == 'grafana/grafana' && github.event.workflow_run.conclusion == 'success'\n    runs-on: ubuntu-latest\n    permissions:\n      id-token: write\n      actions: read\n    steps:\n      - name: Get vault secrets\n        id: secrets\n        uses: grafana/shared-workflows/actions/get-vault-secrets@main\n        with:\n          export_env: false\n          # Secrets placed in the ci/data/repo/grafana/grafana/delivery-bot-app path in Vault\n          repo_secrets: |\n            APP_PEM=delivery-bot-app:PRIVATE_KEY\n\n      - name: Generate token\n        id: generate_token\n        uses: tibdex/github-app-token@b62528385c34dbc9f38e5f4225ac829252d1ea92\n        with:\n          app_id: ${{ vars.DELIVERY_BOT_APP_ID }}\n          private_key: ${{ fromJSON(steps.secrets.outputs.secrets).APP_PEM }}\n\n      - name: Download PR info artifact\n        uses: actions/download-artifact@v4\n        id: download-pr-info\n        with:\n          github-token: ${{ github.token }}\n          run-id: ${{ github.event.workflow_run.id }}\n          name: pr_info\n\n      - name: Get PR info\n        id: pr-info\n        env:\n          PR_INFO_FILE: ${{ steps.download-pr-info.outputs.download-path }}/pr_info.json\n        # jq-magic to convert the JSON object into a list of key=value pairs for $GITHUB_OUTPUT\n        run:\n          jq -r 'to_entries[] | select(.value | type != \"object\") | \"\\(.key)=\\(.value)\"' \"$PR_INFO_FILE\" >> \"$GITHUB_OUTPUT\"\n\n      - name: Print PR info\n        env:\n          PR_ACTION: ${{ steps.pr-info.outputs.action }}\n          PR_LABEL: ${{ steps.pr-info.outputs.label }}\n          PR_NUMBER: ${{ steps.pr-info.outputs.pr_number }}\n        run: |\n          echo \"PR action: $PR_ACTION\"\n          echo \"PR label: $PR_LABEL\"\n          echo \"PR number: $PR_NUMBER\"\n\n      - name: Checkout Grafana\n        uses: actions/checkout@v4\n        with:\n          ref: ${{ github.event.repository.default_branch }}\n          fetch-depth: 2\n          fetch-tags: false\n          token: ${{ steps.generate_token.outputs.token }}\n          persist-credentials: true\n\n      - name: Configure git user\n        run: |\n          git config --local user.name \"github-actions[bot]\"\n          git config --local user.email \"github-actions[bot]@users.noreply.github.com\"\n          git config --local --add --bool push.autoSetupRemote true\n\n      - name: Run backport\n        uses: grafana/grafana-github-actions-go/backport@dev\n        with:\n          token: ${{ steps.generate_token.outputs.token }}\n          # If triggered by being labelled, only backport that label.\n          # Otherwise, the action will backport all labels.\n          pr_label: ${{ steps.pr-info.outputs.action == 'labeled' && steps.pr-info.outputs.label || '' }}\n          pr_number: ${{ steps.pr-info.outputs.pr_number }}\n          repo_owner: ${{ github.repository_owner }}\n          repo_name: ${{ github.event.repository.name }}\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/backport-workflow.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8700000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Bump version\non:\n  workflow_dispatch:\n    inputs:\n      version:\n        description: 'Needs to match, exactly, the name of a milestone. The version to be released please respect: major.minor.patch, major.minor.patch-preview or major.minor.patch-preview<number> format. example: 7.4.3, 7.4.3-preview or 7.4.3-preview1'\n        required: true\n      push:\n        default: true\n        required: false\n      dry_run:\n        default: false\n        required: false\n\npermissions:\n  contents: write\n  pull-requests: write\n\njobs:\n  bump-version:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Grafana\n        uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n      - name: Update package.json versions\n        uses: ./pkg/build/actions/bump-version\n        with:\n          version: ${{ inputs.version }}\n      - if: ${{ inputs.push }}\n        name: Push & Create PR\n        env:\n          VERSION: ${{ inputs.version }}\n          DRY_RUN: ${{ inputs.dry_run }}\n          REF_NAME: ${{ github.ref_name }}\n          RUN_ID: ${{ github.run_id }}\n          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          git config --local user.name \"github-actions[bot]\"\n          git config --local user.email \"github-actions[bot]@users.noreply.github.com\"\n          git config --local --add --bool push.autoSetupRemote true\n          git checkout -b \"bump-version/${RUN_ID}/${VERSION}\"\n          git add .\n          git commit -m \"bump version ${VERSION}\"\n          git push\n          gh pr create --dry-run=\"$DRY_RUN\" -l \"type/ci\" -l \"no-changelog\" -B \"$REF_NAME\" --title \"Release: Bump version to ${VERSION}\" --body \"Updated version to ${VERSION}\"\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/bump-version.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.9200000000000002, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Generate changelog\non:\n  workflow_call:\n    inputs:\n      previous_version:\n        type: string\n        required: false\n        description: 'The release version (semver, git tag, branch or commit) to use for comparison'\n      version:\n        type: string\n        required: true\n        description: 'Target release version (semver, git tag, branch or commit)'\n      target:\n        required: true\n        type: string\n        description: 'The base branch that these changes are being merged into'\n      dry_run:\n        required: false\n        default: false\n        type: boolean\n      latest:\n        required: false\n        default: false\n        type: boolean\n      work_branch:\n        required: false\n        type: string\n        description: \"Use specific branch for changelog\"\n\n  workflow_dispatch:\n    inputs:\n      previous_version:\n        type: string\n        required: false\n        description: 'The release version (semver, git tag, branch or commit) to use for comparison'\n      version:\n        type: string\n        required: true\n        description: 'Target release version (semver, git tag, branch or commit)'\n      target:\n        required: true\n        type: string\n        description: 'The base branch that these changes are being merged into'\n      dry_run:\n        required: false\n        default: false\n        type: boolean\n      latest:\n        required: false\n        default: false\n        type: boolean\n      work_branch:\n        required: false\n        type: string\n        description: \"Use specific branch for changelog\"\n\npermissions: {}\n\njobs:\n  main:\n    env:\n      RUN_ID: ${{ github.run_id }}\n      VERSION: ${{ inputs.version }}\n      PREVIOUS_VERISON: ${{ inputs.previous_version }}\n      TARGET: ${{ inputs.target }}\n      DRY_RUN: ${{ inputs.dry_run }}\n    runs-on: ubuntu-latest\n    permissions:\n      id-token: write\n      contents: write\n      pull-requests: write\n    steps:\n      - name: \"Get vault secrets\"\n        id: vault-secrets\n        uses: grafana/shared-workflows/actions/get-vault-secrets@main\n        with:\n          # Secrets placed in the ci/data/repo/grafana/grafana/delivery-bot-app path in Vault\n          repo_secrets: |\n            GRAFANA_DELIVERY_BOT_APP_PEM=delivery-bot-app:PRIVATE_KEY\n      - name: \"Generate token\"\n        id: generate_token\n        uses: tibdex/github-app-token@b62528385c34dbc9f38e5f4225ac829252d1ea92\n        with:\n          app_id: ${{ vars.DELIVERY_BOT_APP_ID }}\n          private_key: ${{ env.GRAFANA_DELIVERY_BOT_APP_PEM }}\n      - name: \"Checkout Grafana repo\"\n        uses: \"actions/checkout@v4\"\n        with:\n          ref: main\n          sparse-checkout: |\n            .github/workflows\n            .github/actions\n            CHANGELOG.md\n            .nvmrc\n            .prettierignore\n            .prettierrc.js\n          fetch-depth: 0\n          fetch-tags: true\n      - name: Setup nodejs environment\n        uses: actions/setup-node@v4\n        with:\n          node-version-file: .nvmrc\n      - name: \"Configure git user\"\n        run: |\n          git config --local user.name \"github-actions[bot]\"\n          git config --local user.email \"github-actions[bot]@users.noreply.github.com\"\n          git config --local --add --bool push.autoSetupRemote true\n      - name: \"Create branch\"\n        run: |\n          if [[ \"$WORK_BRANCH\" == '' ]]; then\n            git switch -c \"changelog/${RUN_ID}/${VERSION}\"\n            exit 0\n          fi\n\n          # Checkout the changelog branch if exists, otherwise create a new one\n          if git show-ref --verify --quiet \"refs/remotes/origin/$WORK_BRANCH\"; then\n            git switch --track \"origin/$WORK_BRANCH\"\n          else\n            git switch -c \"$WORK_BRANCH\"\n          fi\n        env:\n          WORK_BRANCH: ${{ inputs.work_branch }}\n      - name: \"Generate changelog\"\n        id: changelog\n        uses: ./.github/actions/changelog\n        with:\n          previous: ${{ inputs.previous_version }}\n          github_token: ${{ steps.generate_token.outputs.token }}\n          target: v${{ inputs.version }}\n          output_file: changelog_items.md\n      - name: \"Patch CHANGELOG.md\"\n        run: |\n          # Prepare CHANGELOG.md content with version delimiters\n          (\n            echo\n            echo \"# ${VERSION} ($(date '+%F'))\"\n            echo\n            cat changelog_items.md\n          ) > CHANGELOG.part\n\n          # Check if a version exists in the changelog\n          if grep -q \"<!-- ${VERSION} START\" CHANGELOG.md ; then\n            # Replace the content between START and END delimiters\n            echo \"Version ${VERSION} is found in the CHANGELOG.md, patching contents...\"\n            sed -i -e \"/${VERSION} START/,/${VERSION} END/{//!d;}\" \\\n                   -e \"/${VERSION} START/r CHANGELOG.part\" CHANGELOG.md\n          else\n            # Prepend changelog part to the main changelog file\n            echo \"Version $VERSION not found in the CHANGELOG.md\"\n            (\n              echo \"<!-- ${VERSION} START -->\"\n              cat CHANGELOG.part\n              echo \"<!-- ${VERSION} END -->\"\n              cat CHANGELOG.md\n            ) > CHANGELOG.tmp\n            mv CHANGELOG.tmp CHANGELOG.md\n          fi\n\n          git diff CHANGELOG.md\n\n      - name: \"Prettify CHANGELOG.md\"\n        run: npx prettier --write CHANGELOG.md\n      - name: \"Commit changelog changes\"\n        run: git add CHANGELOG.md && git commit --allow-empty -m \"Update changelog\" CHANGELOG.md\n      - name: \"git push\"\n        if: inputs.dry_run != true\n        run: git push\n      - name: \"Create changelog PR\"\n        run: |\n          if gh pr view &>/dev/null; then\n            echo \"Changelog pr has already been created\"\n          else\n\n            gh pr create \\\n              --dry-run=\"${DRY_RUN}\" \\\n              --label \"no-backport\" \\\n              --label \"no-changelog\" \\\n              -B \"${TARGET}\" \\\n              --title \"Release: update changelog for ${TARGET}\" \\\n              --body \"Changelog changes for release versions:\"\n          fi\n        env:\n          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      - name: \"Add release version to PR description\"\n        if: inputs.dry_run != true\n        run: |\n          gh pr view --json body --jq .body > pr_body.md\n          echo \" -  ${VERSION}\" >> pr_body.md\n          gh pr edit --body-file pr_body.md\n        env:\n          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "complex", "file_path": ".github/workflows/changelog.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8625, "syntax_valid": true, "completeness_score": 0.8, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: \"Codeowners Validator\"\n\non:\n  pull_request:\n    branches: [ main ]\n\npermissions: {}\n\njobs:\n  codeowners-validator:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    steps:\n      # Checks-out your repository, which is validated in the next step\n      - uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n      - name: GitHub CODEOWNERS Validator\n        uses: mszostok/codeowners-validator@7f3f5e28c6d7b8dfae5731e54ce2272ca384592f\n        # input parameters\n        with:\n          # ==== GitHub Auth ====\n\n          # \"The list of checks that will be executed. By default, all checks are executed. Possible values: files,owners,duppatterns,syntax\"\n          checks: \"files,duppatterns,syntax\"\n\n          # \"The comma-separated list of experimental checks that should be executed. By default, all experimental checks are turned off. Possible values: notowned,avoid-shadowing\"\n          experimental_checks: \"notowned,avoid-shadowing\"\n\n          # The repository path in which CODEOWNERS file should be validated.\"\n          repository_path: \".\"\n\n          # Defines the level on which the application should treat check issues as failures. Defaults to warning, which treats both errors and warnings as failures, and exits with error code 3. Possible values are error and warning. Default: warning\"\n          check_failure_level: \"error\"\n\n          # The comma-separated list of patterns that should be ignored by not-owned-checker. For example, you can specify * and as a result, the * pattern from the CODEOWNERS file will be ignored and files owned by this pattern will be reported as unowned unless a later specific pattern will match that path. It's useful because often we have default owners entry at the begging of the CODOEWNERS file, e.g. * @global-owner1 @global-owner2\"\n          not_owned_checker_skip_patterns: \"\"\n\n          # Specifies whether CODEOWNERS may have unowned files. For example, `/infra/oncall-rotator/oncall-config.yml` doesn't have owner and this is not reported.\n          owner_checker_allow_unowned_patterns: \"false\"\n\n          # Specifies whether only teams are allowed as owners of files.\n          owner_checker_owners_must_be_teams: \"false\"\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/codeowners-validator.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8975, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "# For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\nname: \"CodeQL checks\"\n\non:\n  workflow_dispatch:\n  push:\n    branches: ['**'] # run on all branches\n    paths-ignore:\n      - '**/*.cue'\n      - '**/*.json'\n      - '**/*.md'\n      - '**/*.txt'\n      - '**/*.yml'\n      - pkg/storage/unified/sql/db/dbimpl/db.go # Ignoring warnings on the whole file for now while inline comments is not supported in Go (https://github.com/github/codeql/issues/11427)\n  schedule:\n    - cron: '0 4 * * 6'\n\npermissions:\n  security-events: write\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    continue-on-error: true # doesn't block PRs from being merged if this fails\n    if: github.repository == 'grafana/grafana'\n\n    strategy:\n      fail-fast: false\n      matrix:\n        # Override automatic language detection by changing the below list\n        # Supported options are listed here\n        # https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning#changing-the-languages-that-are-analyzed\n        language: ['actions', 'javascript', 'go']\n        # Learn more...\n        # https://docs.github.com/en/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#overriding-automatic-language-detection\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v4\n      with:\n        # We must fetch at least the immediate parents so that if this is\n        # a pull request then we can checkout the head.\n        fetch-depth: 2\n        persist-credentials: false\n\n    - if: matrix.language == 'go'\n      name: Set go version\n      uses: actions/setup-go@19bb51245e9c80abacb2e91cc42b33fa478b8639\n      with:\n        go-version-file: go.mod\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v3\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n    - if: matrix.language == 'go'\n      name: Build go files\n      run: |\n        go mod verify\n        make build-go\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v3\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/codeql-analysis.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8625, "syntax_valid": true, "completeness_score": 0.8, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Run commands when issues are labeled or comments added\n\n# important: this workflow uses a github app that is strictly limited\n# to issues. If you want to change the triggers for this workflow,\n# please review if the permissions are still sufficient.\non:\n  issues:\n    types: [labeled, unlabeled]\n  issue_comment:\n    types: [created]\n\nconcurrency:\n  group: issue-commands-${{ github.event.issue.number }}\n\npermissions: {}\n\njobs:\n  config:\n    runs-on: \"ubuntu-latest\"\n    outputs:\n      has-secrets: ${{ steps.check.outputs.has-secrets }}\n    steps:\n      - name: \"Check for secrets\"\n        id: check\n        shell: bash\n        run: |\n          if [ \"${{ github.repository }}\" == \"grafana/grafana\" ]; then\n            echo \"has-secrets=1\" >> \"$GITHUB_OUTPUT\"\n          fi\n\n  main:\n    needs: config\n    if: needs.config.outputs.has-secrets\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      id-token: write\n    steps:\n      - name: \"Get vault secrets\"\n        id: vault-secrets\n        uses: grafana/shared-workflows/actions/get-vault-secrets@main # zizmor: ignore[unpinned-uses]\n        with:\n          # Secrets placed in the ci/repo/grafana/grafana/plugins_platform_issue_commands_github_bot path in Vault\n          repo_secrets: |\n            GITHUB_APP_ID=grafana_pr_automation_app:app_id\n            GITHUB_APP_PRIVATE_KEY=grafana_pr_automation_app:app_pem\n\n      - name: Generate token\n        id: generate_token\n        uses: actions/create-github-app-token@3ff1caaa28b64c9cc276ce0a02e2ff584f3900c5 # v2.0.2\n        with:\n          app-id: ${{ env.GITHUB_APP_ID }}\n          private-key: ${{ env.GITHUB_APP_PRIVATE_KEY }}\n\n      - name: Checkout Actions\n        uses: actions/checkout@v4 # v4.2.2\n        with:\n          repository: \"grafana/grafana-github-actions\"\n          path: ./actions\n          ref: main\n          persist-credentials: false\n\n      - name: Install Actions\n        run: npm install --production --prefix ./actions\n      - name: Run Commands\n        uses: ./actions/commands\n        with:\n          metricsWriteAPIKey: \"\"\n          token: ${{ steps.generate_token.outputs.token }}\n          configPath: commands\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/commands.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.9099999999999999, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Create community release post\non:\n  workflow_call:\n    inputs:\n      version:\n        type: string\n        required: true\n        description: 'Needs to match, exactly, the name of a milestone. The version to be released please respect: major.minor.patch, major.minor.patch-preview or major.minor.patch-preview<number> format. example: 7.4.3, 7.4.3-preview or 7.4.3-preview1'\n      dry_run:\n        type: boolean\n        required: false\n        default: false\n        description: When enabled, this workflow will print a preview instead of creating an actual post.\n  workflow_dispatch:\n    inputs:\n      version:\n        type: string\n        required: true\n        description: 'Needs to match, exactly, the name of a milestone. The version to be released please respect: major.minor.patch, major.minor.patch-preview or major.minor.patch-preview<number> format. example: 7.4.3, 7.4.3-preview or 7.4.3-preview1'\n      dry_run:\n        type: boolean\n        required: false\n        default: false\n        description: When enabled, this workflow will print a preview instead of creating an actual post.\n\npermissions:\n  contents: read\n  id-token: write\n\njobs:\n  main:\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"Get vault secrets\"\n        id: vault-secrets\n        uses: grafana/shared-workflows/actions/get-vault-secrets@main\n        with:\n          # Secrets placed in the ci/repo/grafana/grafana/community_release path in Vault\n          repo_secrets: |\n            GRAFANABOT_FORUM_KEY=community_release:GRAFANABOT_FORUM_KEY\n\n      - name: Run community-release (manually invoked)\n        uses: grafana/grafana-github-actions-go/community-release@main\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          version: ${{ inputs.version }}\n          community_api_key: ${{ env.GRAFANABOT_FORUM_KEY }}\n          community_api_username: grafanabot\n          dry_run: ${{ inputs.dry_run }}\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/community-release.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8975000000000002, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Build and release core plugins\n\non:\n  workflow_dispatch:\n    inputs:\n      plugin_id:\n        description: \"ID of the plugin you want to publish\"\n        required: true\n        type: choice\n        options:\n          - grafana-azure-monitor-datasource\n          - grafana-pyroscope-datasource\n          - grafana-testdata-datasource\n          - jaeger\n          - parca\n          - stackdriver\n          - tempo\n          - zipkin\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}-${{ inputs.plugin_id }}\n  cancel-in-progress: true\n\nenv:\n  GRABPL_VERSION: 3.0.44\n  GCP_BUCKET: integration-artifacts # Dev: plugins-community-staging\n  GCOM_API: https://grafana.com # Dev: https://grafana-dev.com\n\n# These permissions are needed to assume roles from Github's OIDC.\npermissions:\n  contents: read\n  id-token: write\n\njobs:\n  build-and-publish:\n    env:\n      PLUGIN_ID: ${{ inputs.plugin_id }}\n    name: Build and publish ${{ inputs.plugin_id }}\n    runs-on: ubuntu-latest\n    outputs:\n      type: ${{ steps.get_dir.outputs.dir }}\n      has_backend: ${{ steps.check_backend.outputs.has_backend }}\n      version: ${{ steps.build_frontend.outputs.version }}\n    steps:\n      - name: checkout\n        uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n      - name: Verify inputs\n        run: |\n          if [ -z \"$PLUGIN_ID\" ]; then echo \"Missing plugin ID\"; exit 1; fi\n      - id: get-secrets\n        uses: grafana/shared-workflows/actions/get-vault-secrets@main # zizmor: ignore[unpinned-uses]\n        with:\n          # Secrets placed in the ci/repo/grafana/<repo>/<path> path in Vault\n          repo_secrets: |\n            PLUGINS_GOOGLE_CREDENTIALS=core-plugins-build-and-release:PLUGINS_GOOGLE_CREDENTIALS\n            PLUGINS_GRAFANA_API_KEY=core-plugins-build-and-release:PLUGINS_GRAFANA_API_KEY\n            PLUGINS_GCOM_TOKEN=core-plugins-build-and-release:PLUGINS_GCOM_TOKEN\n      - name: 'Authenticate to Google Cloud'\n        uses: 'google-github-actions/auth@6fc4af4b145ae7821d527454aa9bd537d1f2dc5f'\n        with:\n          credentials_json: '${{ env.PLUGINS_GOOGLE_CREDENTIALS }}'\n      - name: 'Set up Cloud SDK'\n        uses: 'google-github-actions/setup-gcloud@77e7a554d41e2ee56fc945c52dfd3f33d12def9a'\n      - name: Setup nodejs environment\n        uses: actions/setup-node@v4\n        with:\n          node-version-file: .nvmrc\n          cache: yarn\n      - name: Find plugin directory\n        shell: bash\n        id: get_dir\n        run: |\n          dir=\"$(dirname \\\n            \"$(grep -Elir --include=plugin.json --exclude-dir=dist \\\n              '\"id\": \"'\"${PLUGIN_ID}\"'\"' \\\n              public/app/plugins \\\n            )\" \\\n          )\"\n          echo \"dir=${dir}\" >> \"$GITHUB_OUTPUT\"\n      - name: Install frontend dependencies\n        shell: bash\n        working-directory: ${{ steps.get_dir.outputs.dir }}\n        run: |\n          yarn install --immutable\n      - name: Download grabpl executable\n        shell: sh\n        working-directory: ${{ steps.get_dir.outputs.dir }}\n        run: |\n          mkdir -pv ./bin\n          curl -fL -o ./bin/grabpl https://grafana-downloads.storage.googleapis.com/grafana-build-pipeline/v\"$GRABPL_VERSION\"/grabpl\n          chmod 0755 ./bin/grabpl\n      - name: Check backend\n        id: check_backend\n        shell: bash\n        run: |\n          if grep -Eqr --include=main.go 'datasource.Manage\\('\"$PLUGIN_ID\" pkg/tsdb; then\n            echo \"has_backend=true\" >> \"$GITHUB_OUTPUT\"\n          else\n            echo \"has_backend=false\" >> \"$GITHUB_OUTPUT\"\n          fi\n      - name: Setup golang environment\n        uses: actions/setup-go@19bb51245e9c80abacb2e91cc42b33fa478b8639\n        if: steps.check_backend.outputs.has_backend == 'true'\n        with:\n          go-version-file: go.mod\n      - name: Install Mage\n        shell: bash\n        if: steps.check_backend.outputs.has_backend == 'true'\n        run: |\n          go install github.com/magefile/mage\n      - name: Check tools\n        shell: bash\n        working-directory: ${{ steps.get_dir.outputs.dir }}\n        run: |\n          echo \"=======================================\"\n          echo \"  Frontend tools\"\n          echo \"=======================================\"\n          echo \"-------- node version -----\"\n          node --version\n          echo \"-------- npm version -----\"\n          npm --version\n          echo \"-------- yarn version -----\"\n          yarn --version\n          echo \"=======================================\"\n          echo \"  Misc tools\"\n          echo \"=======================================\"\n          echo \"-------- docker version -----\"\n          docker --version\n          echo \"-------- jq version -----\"\n          jq --version\n          echo \"-------- grabpl version -----\"\n          ./bin/grabpl --version\n          echo \"=======================================\"\n      - name: Check backend tools\n        shell: bash\n        if: steps.check_backend.outputs.has_backend == 'true'\n        working-directory: ${{ steps.get_dir.outputs.dir }}\n        run: |\n          echo \"=======================================\"\n          echo \"  Backend tools\"\n          echo \"=======================================\"\n          echo \"-------- go version -----\"\n          go version\n          echo \"-------- mage version -----\"\n          mage --version\n          echo \"=======================================\"\n      - name: build:frontend\n        shell: bash\n        id: build_frontend\n        env:\n          OUTPUT_DIR: ${{ steps.get_dir.outputs.dir }}\n        run: |\n          command=\"plugin:build:commit\"\n          if [ \"$GITHUB_REF\" != \"refs/heads/main\" ]; then\n            # Release branch, do not add commit hash to version\n            command=\"plugin:build\"\n          fi\n          yarn $command --scope=\"@grafana-plugins/$PLUGIN_ID\"\n          version=\"$(jq -r .info.version \"$OUTPUT_DIR\"/dist/plugin.json)\"\n          echo \"version=${version}\" >> \"$GITHUB_OUTPUT\"\n      - name: build:backend\n        if: steps.check_backend.outputs.has_backend == 'true'\n        shell: bash\n        env:\n          VERSION: ${{ steps.build_frontend.outputs.version }}  \n        run: |\n          make build-plugin-go PLUGIN_ID=\"$PLUGIN_ID\"\n      - name: package\n        working-directory: ${{ steps.get_dir.outputs.dir }}\n        run: |\n          mkdir -p ci/jobs/package\n          bin/grabpl plugin package\n        env:\n          GRAFANA_API_KEY: ${{ env.PLUGINS_GRAFANA_API_KEY }}\n          PLUGIN_SIGNATURE_TYPE: grafana\n      - name: Check existing release\n        env:\n          GCOM_TOKEN: ${{ env.PLUGINS_GCOM_TOKEN }}\n          VERSION: ${{ steps.build_frontend.outputs.version }}  \n          GCOM_API: ${{ env.GCOM_API }}\n        run: |\n          api_res=\"$(curl -X 'GET' -H \"Authorization: Bearer $GCOM_TOKEN\" \\\n            \"$GCOM_API/api/plugins/$PLUGIN_ID?version=$VERSION\" \\\n            -H 'accept: application/json')\"\n          api_res_code=\"$(echo \"$api_res\" | jq -r .code)\"\n          if [ \"$api_res_code\" = \"NotFound\" ]; then\n            echo \"No existing release found\"\n          else\n            echo \"Expecting a missing release, got:\"\n            echo \"$api_res\"\n            exit 1\n          fi\n      - name: store build artifacts\n        uses: actions/upload-artifact@v4\n        with:\n          name: build-artifacts\n          path: ${{ steps.get_dir.outputs.dir }}/ci/packages/*.zip\n      - name: Publish release to Google Cloud Storage\n        working-directory: ${{ steps.get_dir.outputs.dir }}\n        env:\n          VERSION: ${{ steps.build_frontend.outputs.version }}\n          GCP_BUCKET: ${{ env.GCP_BUCKET }}\n        run: |\n          echo \"Publish release to Google Cloud Storage:\"\n          set -x\n          touch ci/packages/windows ci/packages/darwin ci/packages/linux ci/packages/any\n          gsutil -m cp -r ci/packages/*windows* \"gs://$GCP_BUCKET/$PLUGIN_ID/release/${VERSION}/windows\"\n          gsutil -m cp -r ci/packages/*linux* \"gs://$GCP_BUCKET/$PLUGIN_ID/release/${VERSION}/linux\"\n          gsutil -m cp -r ci/packages/*darwin* \"gs://$GCP_BUCKET/$PLUGIN_ID/release/${VERSION}/darwin\"\n          gsutil -m cp -r ci/packages/*any* \"gs://$GCP_BUCKET/$PLUGIN_ID/release/${VERSION}/any\"\n      - name: Publish new plugin version on grafana.com\n        if: steps.check_backend.outputs.has_backend == 'true'\n        working-directory: ${{ steps.get_dir.outputs.dir }}\n        env:\n          GCOM_TOKEN: ${{ env.PLUGINS_GCOM_TOKEN }}\n          VERSION: ${{ steps.build_frontend.outputs.version }}  \n          GCP_BUCKET: ${{ env.GCP_BUCKET }}\n          OUTPUT_DIR: ${{ steps.get_dir.outputs.dir }}\n          GCOM_API: ${{ env.GCOM_API }}\n        run: |\n          echo \"Publish new plugin version on grafana.com:\"\n          echo \"Plugin version: ${VERSION}\"\n\n          OUTPUT_URL=\"https://github.com/grafana/grafana/tree/$OUTPUT_DIR\" \\\n          jq -n '{\"url\": env.OUTPUT_URL}' > body.json\n          osarchs=(linux_amd64 linux_arm64 linux_arm windows_amd64 darwin_amd64 darwin_arm64)\n          for osarch in \"${osarchs[@]}\"; do\n            echo \"Processing $osarch\"\n            KEY=\"${osarch//_/-}\" \\\n            OSARCH=\"$osarch\" \\\n            jq -s '. as $i | .[0] | .download[env.KEY] = {\n              \"url\": \"https://storage.googleapis.com/\\(env.GCP_BUCKET)/\\(env.PLUGIN_ID)/release/\\(env.VERSION)/linux/\\(env.PLUGIN_ID)-\\(env.VERSION).\\(env.OSARCH).zip\",\n              \"md5\": $i[1].plugin.md5\n            }' body.json ci/packages/info-\"$osarch\".json > tmp.json && mv tmp.json body.json\n          done\n\n          result=\"$(curl -H \"Authorization: Bearer $GCOM_TOKEN\" -H \"Content-Type: application/json\" \"$GCOM_API\"/api/plugins --data-binary '@body.json')\"\n          if [[ \"$(echo \"$result\" | jq -r .version)\" == \"null\" ]]; then\n            echo \"Failed to publish plugin version. Got:\"\n            echo \"$result\"\n            exit 1\n          fi\n      - name: Publish new plugin version on grafana.com (frontend only)\n        if: steps.check_backend.outputs.has_backend == 'false'\n        working-directory: ${{ steps.get_dir.outputs.dir }}\n        env:\n          GCOM_TOKEN: ${{ env.PLUGINS_GCOM_TOKEN }}\n          VERSION: ${{ steps.build_frontend.outputs.version }}\n          GCOM_API: ${{ env.GCOM_API }}\n          OUTPUT_DIR: ${{ steps.get_dir.outputs.dir }}\n          GCP_BUCKET: ${{ env.GCP_BUCKET }}\n        run: |\n          echo \"Publish new plugin version on grafana.com:\"\n          echo \"Plugin version: ${VERSION}\"\n\n          OUTPUT_URL=\"https://github.com/grafana/grafana/tree/$OUTPUT_DIR\" \\\n          DOWNLOAD_URL=\"https://storage.googleapis.com/$GCP_BUCKET/$PLUGIN_ID/release/${VERSION}/any/$PLUGIN_ID-${VERSION}.any.zip\" \\\n          MD5_CHECKSUM=\"$(jq -r '.plugin.md5' ci/packages/info-any.json)\" \\\n          jq -rn '{\n            \"url\": env.OUTPUT_URL,\n            \"download\": {\n              \"any\": {\n                \"url\": env.DOWNLOAD_URL,\n                \"md5\": env.MD5_CHECKSUM\n              }\n            }\n          }' > body.json\n\n          result=\"$(curl -H \"Authorization: Bearer $GCOM_TOKEN\" -H \"Content-Type: application/json\" \"$GCOM_API\"/api/plugins --data-binary '@body.json')\"\n          if [[ \"$(echo \"$result\" | jq -r .version)\" == \"null\" ]]; then\n            echo \"Failed to publish plugin version. Got:\"\n            echo \"$result\"\n            exit 1\n          fi\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "complex", "file_path": ".github/workflows/core-plugins-build-and-release.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.9025000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Create next release branch\non:\n  workflow_call:\n    inputs:\n      ownerRepo:\n        type: string\n        description: Owner/repo of the repository where the branch is created (e.g. 'grafana/grafana')\n        required: true\n      source:\n        description: The release branch to increment (eg providing `release-11.2.3` will result in `release-11.2.4` being created)\n        type: string\n        required: true\n    outputs:\n      branch:\n        description: The new branch that was created\n        value: ${{ jobs.main.outputs.branch }}\n  workflow_dispatch:\n    inputs:\n      ownerRepo:\n        description: Owner/repo of the repository where the branch is created (e.g. 'grafana/grafana')\n      source:\n        description: The release branch to increment (eg providing `release-11.2.3` will result in `release-11.2.4` being created)\n        type: string\n        required: true\n\npermissions:\n  contents: read\n  id-token: write\n\njobs:\n  main:\n    runs-on: ubuntu-latest\n    outputs:\n      branch: ${{ steps.branch.outputs.branch }}\n    steps:\n      - name: \"Get vault secrets\"\n        id: vault-secrets\n        uses: grafana/shared-workflows/actions/get-vault-secrets@main\n        with:\n          # Secrets placed in the ci/data/repo/grafana/grafana/delivery-bot-app path in Vault\n          repo_secrets: |\n            GRAFANA_DELIVERY_BOT_APP_PEM=delivery-bot-app:PRIVATE_KEY\n      - name: \"Generate token\"\n        id: generate_token\n        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a\n        with:\n          app_id: ${{ vars.DELIVERY_BOT_APP_ID }}\n          private_key: ${{ env.GRAFANA_DELIVERY_BOT_APP_PEM }}\n          repositories: \"[\\\"grafana\\\", \\\"grafana-enterprise\\\"]\"\n          permissions: \"{\\\"contents\\\": \\\"write\\\", \\\"pull_requests\\\": \\\"write\\\", \\\"workflows\\\":\\\"write\\\"}\"\n      - name: Create release branch\n        id: branch\n        uses: grafana/grafana-github-actions-go/bump-release@main # zizmor: ignore[unpinned-uses]\n        with:\n          ownerRepo: ${{ inputs.ownerRepo }}\n          source: ${{ inputs.source }}\n          token: ${{ steps.generate_token.outputs.token }}\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/create-next-release-branch.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.88, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Create security branch\non:\n  workflow_call:\n    inputs:\n      release_branch:\n        type: string\n        description: The release branch to increment (eg providing `release-11.2.3` will result in `release-11.2.3+security-01` being created)\n        required: true\n      security_branch_number:\n        type: string\n        description: 'The security branch number (e.g., 01)'\n        required: false\n        default: '01'\n      repository:\n        type: string\n        description: 'The repository to create the security branch in (e.g., grafana/grafana-security-mirror)'\n        required: true\n    outputs:\n      branch:\n        description: The new security branch that was created\n        value: ${{ jobs.main.outputs.branch }}\n  workflow_dispatch:\n    inputs:\n      release_branch:\n        type: string\n        description: The release branch to increment (eg providing `release-11.2.3` will result in `release-11.2.3+security-01` being created)\n        required: true\n      security_branch_number:\n        type: string\n        description: 'The security branch number (e.g., 01)'\n        required: false\n        default: '01'\n      repository:\n        type: string\n        description: 'The repository to create the security branch in (e.g., grafana/grafana-security-mirror)'\n        required: true\n\npermissions:\n  contents: write\n  id-token: write\n\njobs:\n  main:\n    runs-on: ubuntu-latest\n    outputs:\n      branch: ${{ steps.branch.outputs.branch }}\n    steps:\n      - name: \"Get vault secrets\"\n        id: vault-secrets\n        uses: grafana/shared-workflows/actions/get-vault-secrets@main\n        with:\n          # Secrets placed in the ci/data/repo/grafana/grafana/delivery-bot-app path in Vault\n          repo_secrets: |\n            GRAFANA_DELIVERY_BOT_APP_PEM=delivery-bot-app:PRIVATE_KEY\n\n      - name: \"Generate token\"\n        id: generate_token\n        uses: tibdex/github-app-token@b62528385c34dbc9f38e5f4225ac829252d1ea92\n        with:\n          app_id: ${{ vars.DELIVERY_BOT_APP_ID }}\n          private_key: ${{ env.GRAFANA_DELIVERY_BOT_APP_PEM }}\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          token: ${{ steps.generate_token.outputs.token }}\n          repository: ${{ inputs.repository }}\n          ref: ${{ inputs.release_branch }}\n\n      - name: Create security branch\n        id: branch\n        env:\n          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}\n          INPUT_RELEASE_BRANCH: ${{ inputs.release_branch }}\n          INPUT_SECURITY_BRANCH_NUMBER: ${{ inputs.security_branch_number }}\n          INPUT_REPOSITORY: ${{ inputs.repository }}\n        run: |\n          chmod +x .github/workflows/scripts/create-security-branch/create-security-branch.sh\n          .github/workflows/scripts/create-security-branch/create-security-branch.sh\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/create-security-branch.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8700000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "# Owned by grafana-release-guild\n# Intended to be dropped into the base repo (Ex: grafana/grafana) for use in the security mirror.\nname: Create security patch\nrun-name: create-security-patch\non:\n  pull_request:\n    types:\n      - opened\n      - reopened\n      - synchronize\n    branches:\n      - \"main\"\n      - \"v*.*.*\"\n      - \"release-*.*.*\"\n\n# This is run before the pull request has been merged, so we'll run against the src branch\njobs:\n  trigger_downstream_create_security_patch:\n    concurrency: create-patch-${{ github.ref_name }}\n    uses: grafana/security-patch-actions/.github/workflows/create-patch.yml@main # zizmor: ignore[unpinned-uses]\n    if: github.repository == 'grafana/grafana-security-mirror'\n    with:\n      repo: \"${{ github.repository }}\"\n      src_ref: \"${{ github.head_ref }}\" # this is the source branch name, Ex: \"feature/newthing\"\n      patch_ref: \"${{ github.base_ref }}\" # this is the target branch name, Ex: \"main\"\n      patch_repo: \"grafana/grafana-security-patches\"\n      patch_prefix: \"${{ github.event.pull_request.number }}\"\n    secrets: inherit # zizmor: ignore[secrets-inherit]\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/create-security-patch-from-security-mirror.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8700000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: When an issue changes and it's part of the dashboards project, add the dashboards squad label\non:\n  issues:\n    types: [opened, closed, edited, reopened, assigned, unassigned, labeled, unlabeled]\n\npermissions:\n  contents: read\n  id-token: write\n\nenv:\n  ORGANIZATION: ${{ github.repository_owner }}\n  REPO: ${{ github.event.repository.name }}\n  TARGET_PROJECT: 202\n  LABEL_IDS: \"LA_kwDOAOaWjc8AAAABT38U-A\"\n\nconcurrency:\n  group: issue-label-when-in-project-${{ github.event.number }}\njobs:\n  main:\n    if: github.repository == 'grafana/grafana'\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"Get vault secrets\"\n        id: vault-secrets\n        uses: grafana/shared-workflows/actions/get-vault-secrets@main # zizmor: ignore[unpinned-uses]\n        with:\n          # Secrets placed in the ci/repo/grafana/grafana/plugins_platform_issue_commands_github_bot path in Vault\n          repo_secrets: |\n            GITHUB_APP_ID=grafana_pr_automation_app:app_id\n            GITHUB_APP_PRIVATE_KEY=grafana_pr_automation_app:app_pem\n\n      - name: Generate token\n        id: generate_token\n        uses: actions/create-github-app-token@3ff1caaa28b64c9cc276ce0a02e2ff584f3900c5 # v2.0.2\n        with:\n          app-id: ${{ env.GITHUB_APP_ID }}\n          private-key: ${{ env.GITHUB_APP_PRIVATE_KEY }}\n      - name: Check if issue is in target project\n        env:\n          GH_TOKEN: ${{ steps.generate_token.outputs.token }}\n          ISSUE_NUMBER: ${{ github.event.issue.number }}\n          TARGET_PROJECT: ${{ env.TARGET_PROJECT }}\n        run: |\n          # shellcheck disable=SC2016 # we don't want the $s to be expanded\n          gh api graphql -f query='\n            query($org: String!, $repo: String!, $issueNumber: Int!) {\n              repository(name: $repo, owner: $org) {\n                issue (number: $issueNumber) {\n                  id\n                  projectItems(first:20) {\n                    nodes {\n                      project {\n                        number,\n                      },\n                    }\n                  }\n                }\n              }\n            }' -f org=\"$ORGANIZATION\" -f repo=\"$REPO\" -F issueNumber=\"$ISSUE_NUMBER\" > projects_data.json\n\n            {\n              echo \"IN_TARGET_PROJ=$(jq '.data.repository.issue.projectItems.nodes[] | select(.project.number=='\"$TARGET_PROJECT\"') | .project != null' projects_data.json)\"\n              echo \"ITEM_ID=$(jq '.data.repository.issue.id' projects_data.json)\"\n            } >> \"$GITHUB_ENV\"\n      - name: Set up label array\n        if: env.IN_TARGET_PROJ\n        env:\n          LABEL_IDS: ${{ env.LABEL_IDS }}\n        run: |\n          # shellcheck disable=SC2153 # we define the variable on the line above in 'read'\n          IFS=',' read -ra LABEL_IDs <<< \"$LABEL_IDS\"\n          for item in \"${LABEL_IDs[@]}\"; do\n            echo \"Item: $item\"\n          done\n      - name: Add label to issue\n        if: env.IN_TARGET_PROJ\n        env:\n          GH_TOKEN: ${{ steps.generate_token.outputs.token }}\n          LABEL_IDS: ${{ env.LABEL_IDS }}\n        run: |\n          # shellcheck disable=SC2016 # we don't want the $s to be expanded\n          gh api graphql -f query='\n            mutation ($labelableId: ID!, $labelIds: [ID!]!) {\n              addLabelsToLabelable(\n                input: {labelableId: $labelableId, labelIds: $labelIds}\n              ) {\n                  clientMutationId\n              }\n            }' -f labelableId=\"$ITEM_ID\" -f labelIds=\"$LABEL_IDS\"\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/dashboards-issue-add-label.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.88, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Deploy pr preview\n\non:\n  pull_request:\n    types:\n      - opened\n      - synchronize\n      - closed\n    paths:\n      - \"docs/sources/**\"\n\npermissions: {}\n\njobs:\n  deploy-pr-preview:\n    permissions:\n      contents: read # Clone repositories.\n      id-token: write # Fetch Vault secrets.\n      pull-requests: write # Create or update PR comments.\n      statuses: write # Update GitHub status check with deploy preview link.\n    if: \"!github.event.pull_request.head.repo.fork\"\n    uses: grafana/writers-toolkit/.github/workflows/deploy-preview.yml@main # zizmor: ignore[unpinned-uses]\n    with:\n      branch: ${{ github.head_ref }}\n      event_number: ${{ github.event.number }}\n      repo: grafana\n      sha: ${{ github.event.pull_request.head.sha }}\n      sources: |\n        [\n          {\n            \"index_file\": \"content/docs/grafana/_index.md\",\n            \"relative_prefix\": \"/docs/grafana/latest/\",\n            \"repo\": \"grafana\",\n            \"source_directory\": \"docs/sources\",\n            \"website_directory\": \"content/docs/grafana/latest\"\n          }\n        ]\n      title: ${{ github.event.pull_request.title }}\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/deploy-pr-preview.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8825000000000002, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Deploy Storybook preview\n\non:\n  pull_request:\n    paths:\n      - 'packages/grafana-ui/**'\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\npermissions: {}\n\njobs:\n  deploy-storybook-preview:\n    name: Deploy Storybook preview\n    runs-on: ubuntu-latest\n    # Don't run from forks for the moment. If we find this useful we can do the workflow_run dance\n    # to make it work for forks.\n    if: github.event.pull_request.head.repo.fork == false\n    permissions:\n      contents: read\n      id-token: write\n\n    env:\n      BUCKET_NAME: grafana-storybook-previews\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version-file: '.nvmrc'\n          cache: 'yarn'\n\n      - name: Cache node_modules\n        uses: actions/cache@v4\n        with:\n          path: |\n            node_modules\n          key: node_modules-${{ hashFiles('yarn.lock') }}\n          restore-keys: |\n            node_modules-\n\n      - name: Install dependencies\n        env:\n          # If the PR isn't from a fork then don't use the slower yarn checks\n          YARN_ENABLE_HARDENED_MODE: ${{ github.event.pull_request.head.repo.fork == false && '1' || '0' }}\n        run: yarn install --immutable\n\n      - name: Build storybook\n        run: yarn storybook:build\n\n      # Create the GCS folder name for the preview. Creates a consistent name for all deploys for the PR.\n      # Matches format of `pr_<PR_NUMBER>_<SANITIZED_BRANCH>`.\n      # Where `SANITIZED_BRANCH` is the branch name with only alphanumeric and hyphens, limited to 30 characters.\n      - name: Create deploy name\n        id: create-deploy-name\n        env:\n          BRANCH_NAME: ${{ github.event.pull_request.head.ref }}\n          PR_NUMBER: ${{ github.event.pull_request.number }}\n        run: |\n          # Convert branch name to only contain alphanumeric and hyphens\n          SANITIZED_BRANCH=$(echo \"$BRANCH_NAME\" | tr -cs \"[:alnum:]-\" \"-\" | sed \"s/^-//;s/-$//\")\n\n          # Check if SANITIZED_BRANCH is empty and fail if it is\n          if [ -z \"$SANITIZED_BRANCH\" ]; then\n            echo \"Error: Branch name resulted in empty string after sanitization\"\n            exit 1\n          fi\n\n          echo \"deploy-name=pr_${PR_NUMBER}_${SANITIZED_BRANCH:0:30}\" >> \"$GITHUB_OUTPUT\"\n\n      - name: Upload Storybook\n        uses: grafana/shared-workflows/actions/push-to-gcs@main\n        with:\n          environment: prod\n          bucket: ${{ env.BUCKET_NAME }}\n          bucket_path: ${{ steps.create-deploy-name.outputs.deploy-name }}\n          path: packages/grafana-ui/dist/storybook\n          service_account: github-gf-storybook-preview@grafanalabs-workload-identity.iam.gserviceaccount.com\n          parent: false\n\n      - name: Write summary\n        env:\n          DEPLOY_NAME: ${{ steps.create-deploy-name.outputs.deploy-name }}\n        run: |\n          echo \"## Storybook preview deployed! 🚀\" >> $GITHUB_STEP_SUMMARY\n          echo \"Check it out at https://storage.googleapis.com/${BUCKET_NAME}/${DEPLOY_NAME}/index.html\" >> $GITHUB_STEP_SUMMARY\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/deploy-storybook-preview.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.9025000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "# Only runs if anything under the packages/ directory changes.\n---\nname: Levitate / Detect breaking changes in PR\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\npermissions: {}\n\non:\n  pull_request:\n    paths:\n      - 'packages/**'\n      - '.nvmrc'\n      - '.github/workflows/detect-breaking-changes-levitate.yml'\n    branches:\n      - 'main'\n\njobs:\n  buildPR:\n    name: Build PR packages artifacts\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        working-directory: './pr'\n    permissions:\n      contents: read\n      id-token: write\n\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          path: './pr'\n          persist-credentials: false\n\n      - uses: actions/setup-node@v4\n        with:\n          node-version-file: './pr/.nvmrc'\n\n      - name: Get yarn cache directory path\n        id: yarn-cache-dir-path\n        run: echo \"dir=$(yarn config get cacheFolder)\" >> \"$GITHUB_OUTPUT\"\n\n      - name: Restore yarn cache\n        uses: actions/cache@v4\n        id: yarn-cache\n        with:\n          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}\n          key: yarn-cache-folder-${{ hashFiles('**/yarn.lock', '.yarnrc.yml') }}\n          restore-keys: |\n            yarn-cache-folder-\n\n      - name: Install dependencies\n        run: yarn install --immutable\n\n      - name: Build packages\n        run: yarn packages:build\n\n      - name: Pack packages\n        run: yarn packages:pack --out ./%s.tgz\n\n      - name: Zip built tarballed packages\n        run: zip -r ./pr_built_packages.zip ./packages/**/*.tgz\n\n      - name: Upload build output as artifact\n        uses: actions/upload-artifact@v4\n        with:\n          name: buildPr\n          path: './pr/pr_built_packages.zip'\n\n  buildBase:\n    name: Build Base packages artifacts\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      id-token: write\n    defaults:\n      run:\n        working-directory: './base'\n\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          path: './base'\n          ref: ${{ github.event.pull_request.base.ref }}\n          persist-credentials: false\n\n      - uses: actions/setup-node@v4\n        with:\n          node-version-file: './base/.nvmrc'\n\n      - name: Get yarn cache directory path\n        id: yarn-cache-dir-path\n        run: echo \"dir=$(yarn config get cacheFolder)\" >> \"$GITHUB_OUTPUT\"\n\n      - name: Restore yarn cache\n        uses: actions/cache@v4\n        id: yarn-cache\n        with:\n          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}\n          key: yarn-cache-folder-${{ hashFiles('**/yarn.lock', '.yarnrc.yml') }}\n          restore-keys: |\n            yarn-cache-folder-\n\n      - name: Install dependencies\n        run: yarn install --immutable\n\n      - name: Build packages\n        run: yarn packages:build\n\n      - name: Pack packages\n        run: yarn packages:pack --out ./%s.tgz\n\n      - name: Zip built tarballed packages\n        run: zip -r ./base_built_packages.zip ./packages/**/*.tgz\n\n      - name: Upload build output as artifact\n        uses: actions/upload-artifact@v4\n        with:\n          name: buildBase\n          path: './base/base_built_packages.zip'\n\n  Detect:\n    name: Detect breaking changes between PR and base\n    runs-on: ubuntu-latest\n    needs: ['buildPR', 'buildBase']\n    env:\n      GITHUB_STEP_NUMBER: 8\n    permissions:\n      contents: 'read'\n      id-token: 'write'\n\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n\n      - uses: actions/setup-node@v4\n        with:\n          node-version-file: '.nvmrc'\n\n      - name: Get built packages from pr\n        uses: actions/download-artifact@v4\n        with:\n          name: buildPr\n\n      - name: Get built packages from base\n        uses: actions/download-artifact@v4\n        with:\n          name: buildBase\n\n      - name: Unzip artifact from pr\n        run: unzip -j pr_built_packages.zip -d ./pr && rm pr_built_packages.zip\n\n      - name: Unzip artifact from base\n        run: unzip -j base_built_packages.zip -d ./base && rm base_built_packages.zip\n\n      - id: 'auth'\n        uses: 'google-github-actions/auth@6fc4af4b145ae7821d527454aa9bd537d1f2dc5f'\n        if: github.event.pull_request.head.repo.full_name == github.repository\n        with:\n          workload_identity_provider: projects/304398677251/locations/global/workloadIdentityPools/github/providers/github-provider\n          service_account: github-plugins-data-levitate@grafanalabs-workload-identity.iam.gserviceaccount.com\n          project_id: 'grafanalabs-global'\n\n      - name: 'Set up Cloud SDK'\n        uses: 'google-github-actions/setup-gcloud@77e7a554d41e2ee56fc945c52dfd3f33d12def9a'\n        if: github.event.pull_request.head.repo.full_name == github.repository\n        with:\n          version: '>= 363.0.0'\n          project_id: 'grafanalabs-global'\n          install_components: 'bq'\n\n      - name: Detect breaking changes\n        id: breaking-changes\n        run: ./scripts/check-breaking-changes.sh\n        env:\n          FORCE_COLOR: 3\n          IS_FORK: ${{ github.event.pull_request.head.repo.full_name != github.repository }} # used in check-breaking-changes.sh and levitate-parse-json-report.js\n\n      - name: Persisting the check output\n        run: |\n            mkdir -p ./levitate\n            echo \"{ \\\"exit_code\\\": ${IS_BREAKING}, \\\"message\\\": \\\"${MESSAGE}\\\", \\\"pr_number\\\": \\\"${PR_NUMBER}\\\" }\" > ./levitate/result.json\n        env:\n          IS_BREAKING: ${{ steps.breaking-changes.outputs.is_breaking }}\n          MESSAGE: ${{ steps.breaking-changes.outputs.message }}\n          PR_NUMBER: ${{ github.event.pull_request.number }}\n\n      - name: Upload check output as artifact\n        uses: actions/upload-artifact@v4\n        with:\n          name: levitate\n          path: levitate/\n\n\n  Report:\n    name: Report breaking changes in PR comment\n    runs-on: ubuntu-latest\n    needs: ['Detect']\n    permissions:\n      contents: read\n      id-token: write\n    if: github.event.pull_request.head.repo.full_name == github.repository\n\n    steps:\n      - id: get-secrets\n        uses: grafana/shared-workflows/actions/get-vault-secrets@28361cdb22223e5f1e34358c86c20908e7248760 # get-vault-secrets-v1.1.0\n        with:\n          # Secrets placed in the ci/repo/grafana/grafana in vault\n          repo_secrets: |\n            GITHUB_APP_ID=grafana_pr_automation_app:app_id\n            GITHUB_APP_PRIVATE_KEY=grafana_pr_automation_app:app_pem\n\n      - name: Generate token\n        id: generate_token\n        uses: actions/create-github-app-token@3ff1caaa28b64c9cc276ce0a02e2ff584f3900c5 # v2.0.2\n        with:\n          app-id: ${{ env.GITHUB_APP_ID }}\n          private-key: ${{ env.GITHUB_APP_PRIVATE_KEY }}\n\n      - uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n\n      - name: 'Download artifact'\n        uses: actions/download-artifact@v4\n        with:\n          name: levitate\n\n      - name: Parsing levitate result\n        uses: actions/github-script@v7\n        id: levitate-run\n        with:\n          script: |\n            const filePath = 'result.json';\n            const script = require('./.github/workflows/scripts/json-file-to-job-output.js');\n            await script({ core, filePath });\n\n      # Check if label exists\n      - name: Check if \"levitate breaking change\" label exists\n        id: does-label-exist\n        uses: actions/github-script@v7\n        env:\n          PR_NUMBER: ${{ github.event.pull_request.number }}\n        with:\n          script: |\n            const { data: labels } = await github.rest.issues.listLabelsOnIssue({\n              issue_number: context.issue.number,\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n            });\n            return labels.some(label => label.name === 'levitate breaking change') ? 1 : 0\n\n      # put the markdown into a variable\n      - name: Levitate Markdown\n        id: levitate-markdown\n        run: |\n            if [ -f \"levitate.md\" ]; then\n            {\n              echo 'levitate_markdown<<EOF'\n              cat levitate.md\n              echo EOF\n            } >> \"$GITHUB_OUTPUT\"\n            else\n              echo \"levitate_markdown=No breaking changes detected\" >> \"$GITHUB_OUTPUT\"\n            fi\n\n\n      # Comment on the PR\n      - name: Comment on PR\n        if: steps.levitate-run.outputs.exit_code == 1\n        uses: marocchino/sticky-pull-request-comment@773744901bac0e8cbb5a0dc842800d45e9b2b405\n        with:\n          header: levitate-breaking-change-comment\n          number: ${{ github.event.pull_request.number }}\n          message: |\n            ⚠️ &nbsp;&nbsp;**Possible breaking changes (md version)**&nbsp;&nbsp; ⚠️\n\n            ${{ steps.levitate-markdown.outputs.levitate_markdown }}\n\n            [Read our guideline](https://github.com/grafana/grafana/blob/main/contribute/breaking-changes-guide/breaking-changes-guide.md)\n\n            * Your pull request merge won't be blocked.\n          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}\n\n      # Remove comment from the PR (no more breaking changes)\n      - name: Remove comment from PR\n        if: steps.levitate-run.outputs.exit_code == 0\n        uses: marocchino/sticky-pull-request-comment@773744901bac0e8cbb5a0dc842800d45e9b2b405\n        with:\n          header: levitate-breaking-change-comment\n          number: ${{ github.event.pull_request.number }}\n          delete: true\n          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}\n\n      - name: Send Slack Message via Payload\n        id: slack\n        if: steps.levitate-run.outputs.exit_code == 1 && steps.does-label-exist.outputs.result == 0 && github.repository == 'grafana/grafana'\n        uses: grafana/shared-workflows/actions/send-slack-message@7b628e7352c2dea057c565cc4fcd5564d5f396c0 #v1.0.0\n        with:\n          channel-id: \"C031SLFH6G0\"\n          payload:  |\n            {\n              \"channel\": \"C031SLFH6G0\",\n              \"text\": \":warning: Possible breaking changes detected in *PR:* <${{ github.event.pull_request.html_url }}|#${{ github.event.pull_request.number }} :warning:\",\n              \"icon_emoji\": \":grot:\",\n              \"username\": \"Levitate Bot\",\n              \"blocks\": [\n                {\n                  \"type\": \"section\",\n                  \"text\": {\n                    \"type\": \"mrkdwn\",\n                    \"text\": \"*grafana/grafana* repository has possible breaking changes\"\n                  }\n                },\n                {\n                  \"type\": \"section\",\n                  \"fields\": [\n                    {\n                      \"type\": \"mrkdwn\",\n                      \"text\": \"*PR:* <${{ github.event.pull_request.html_url }}|#${{ github.event.pull_request.number }}>\\n\\nAuthor: ${{ github.event.pull_request.user.login }}\"\n                    },\n                    {\n                      \"type\": \"mrkdwn\",\n                      \"text\": \"*Job:* <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Job>\"\n                    }\n                  ]\n                }\n              ]\n            }\n\n      # Add the label\n      - name: Add \"levitate breaking change\" label\n        if: steps.levitate-run.outputs.exit_code == 1 && steps.does-label-exist.outputs.result == 0\n        uses: actions/github-script@v7\n        env:\n          PR_NUMBER: ${{ steps.levitate-run.outputs.pr_number }}\n        with:\n          github-token: ${{ steps.generate_token.outputs.token }}\n          script: |\n            await github.rest.issues.addLabels({\n              issue_number: process.env.PR_NUMBER,\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              labels: ['levitate breaking change']\n            })\n\n      # Remove label (no more breaking changes)\n      - name: Remove \"levitate breaking change\" label\n        if: steps.levitate-run.outputs.exit_code == 0 && steps.does-label-exist.outputs.result == 1\n        uses: actions/github-script@v7\n        env:\n          PR_NUMBER: ${{ steps.levitate-run.outputs.pr_number }}\n        with:\n          github-token: ${{ steps.generate_token.outputs.token }}\n          script: |\n            await github.rest.issues.removeLabel({\n              issue_number: process.env.PR_NUMBER,\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              name: 'levitate breaking change'\n            })\n\n      # Add reviewers\n      # This is very weird, the actual request goes through (comes back with a 201), but does not assign the team.\n      # Related issue: https://github.com/renovatebot/renovate/issues/1908\n      - name: Add \"grafana/plugins-platform-frontend\" as a reviewer\n        if: steps.levitate-run.outputs.exit_code == 1\n        uses: actions/github-script@v7\n        env:\n          PR_NUMBER: ${{ steps.levitate-run.outputs.pr_number }}\n        with:\n          github-token: ${{ steps.generate_token.outputs.token }}\n          script: |\n            await github.rest.pulls.requestReviewers({\n              pull_number: process.env.PR_NUMBER,\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              reviewers: [],\n              team_reviewers: ['plugins-platform-frontend']\n            });\n\n      # Remove reviewers (no more breaking changes)\n      - name: Remove \"grafana/plugins-platform-frontend\" from the list of reviewers\n        if: steps.levitate-run.outputs.exit_code == 0\n        uses: actions/github-script@v7\n        env:\n          PR_NUMBER: ${{ steps.levitate-run.outputs.pr_number }}\n        with:\n          github-token: ${{ steps.generate_token.outputs.token }}\n          script: |\n            await github.rest.pulls.removeRequestedReviewers({\n              pull_number: process.env.PR_NUMBER,\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              reviewers: [],\n              team_reviewers: ['plugins-platform-frontend']\n            });\n\n      - name: Exit\n        run: |\n          if [ \"${LV_EXIT_CODE}\" -ne 0 ]; then\n            echo \"Breaking changes detected. Please check the levitate report in your pull request. This workflow won't block merging.\"\n          fi\n\n          exit \"${LV_EXIT_CODE}\"\n        shell: bash\n        env:\n          LV_EXIT_CODE: ${{ steps.levitate-run.outputs.exit_code }}\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "complex", "file_path": ".github/workflows/detect-breaking-changes-levitate.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.9075000000000002, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "---\nname: Detect Plugin Extension Changes\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\npermissions: {}\n\non:\n  pull_request:\n    branches:\n      - 'main'\n    paths:\n      - 'packages/**'\n      - 'public/**'\n\nenv:\n  # Space-separated list of keywords referring to plugin extensions\n  PLUGIN_EXTENSION_KEYWORDS: \"usePluginLinks, usePluginComponent, usePluginComponents, usePluginFunctions, PluginExtensionPoints\"\n\njobs:\n  detect-plugin-extension-changes:\n    name: Detect Plugin Extension Changes\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      id-token: write\n    if: github.event.pull_request.head.repo.full_name == github.repository\n\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n          persist-credentials: false\n\n      - name: Check for plugin extension changes\n        id: check-changes\n        uses: actions/github-script@v7\n        with:\n          script: |\n            const { execSync } = require('child_process');\n            const fs = require('fs');\n            \n            // Plugin extension keywords from environment\n            const keywords = process.env.PLUGIN_EXTENSION_KEYWORDS.split(',');\n            const baseSha = '${{ github.event.pull_request.base.sha }}';\n            const headSha = '${{ github.event.pull_request.head.sha }}';\n            \n            console.log('Checking for plugin extension changes...');\n            console.log('Keywords:', keywords);\n            \n            // Get changed files in packages/ and public/ directories\n            let changedFiles = [];\n            const diffOutput = execSync(\n              `git diff --name-only ${baseSha}...${headSha} -- packages/ public/`,\n              { encoding: 'utf8' }\n            ).trim();\n            \n            if (diffOutput) {\n              changedFiles = diffOutput.split('\\n').filter(file => {\n                // Validate file path and ensure it's in target directories\n                return file.match(/^(packages\\/|public\\/)/) && \n                        file.match(/^[a-zA-Z0-9._/-]+$/) && \n                        fs.existsSync(file);\n              });\n            }\n            \n            console.log('Changed files to check:', changedFiles);\n            \n            // Check each file for plugin extension keywords\n            const filesWithChanges = new Set();\n            let hasPluginExtensionChanges = false;\n            \n            for (const file of changedFiles) {\n              try {\n                // Get the diff for this specific file\n                const fileDiff = execSync(\n                  `git diff ${baseSha}...${headSha} -- \"${file}\"`,\n                  { encoding: 'utf8' }\n                );\n                \n                // Check if any keywords are in the diff\n                for (const keyword of keywords) {\n                  if (fileDiff.includes(keyword)) {\n                    console.log(`Found ${keyword} in ${file}`);\n                    filesWithChanges.add(file);\n                    hasPluginExtensionChanges = true;\n                    break; // Found at least one keyword, move to next file\n                  }\n                }\n              } catch (error) {\n                console.log(`Error checking file ${file}:`, error.message);\n              }\n            }\n            \n            // Set outputs\n            const filesArray = Array.from(filesWithChanges);\n            const formattedFiles = filesArray.length > 0 \n              ? '`' + filesArray.join('`\\\\n- `') + '`'\n              : '';\n            \n            core.setOutput('plugin_extension_changes', hasPluginExtensionChanges.toString());\n            core.setOutput('formatted_changed_files', formattedFiles);\n\n            if (hasPluginExtensionChanges) {\n              console.log('The following files have changes that may affect plugin extensions:');\n              console.log(filesArray);\n            } else {\n              console.log('No changes detected in core Grafana extensions or extension points.');\n            }\n\n      - name: Send Slack Message via Payload\n        id: slack\n        if: steps.check-changes.outputs.plugin_extension_changes == 'true'\n        uses: grafana/shared-workflows/actions/send-slack-message@0941e3408fa4789fec9062c44a2a9e1832146ba6 #v2.0.1\n        with:\n          method: chat.postMessage\n          payload-templated: true\n          payload: |\n            {\n              \"channel\": \"C031SLFH6G0\",\n              \"text\": \"Plugin Extension changes in core Grafana *PR:* <${{ github.event.pull_request.html_url }}|#${{ github.event.pull_request.number }} :information_source:\",\n              \"icon_emoji\": \":grot:\",\n              \"username\": \"Plugin Extension Bot\",\n              \"blocks\": [\n                {\n                  \"type\": \"section\",\n                  \"text\": {\n                    \"type\": \"mrkdwn\",\n                    \"text\": \"*Plugin Extensions:* possible changes to extension points in core Grafana.\"\n                  }\n                },\n                {\n                  \"type\": \"section\",\n                  \"text\": {\n                    \"type\": \"mrkdwn\",\n                    \"text\": \"*PR:* <${{ github.event.pull_request.html_url }}|#${{ github.event.pull_request.number }}>\\n*Job:* <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Job>\"\n                  }\n                },\n                {\n                  \"type\": \"section\",\n                  \"text\": {\n                    \"type\": \"mrkdwn\",\n                    \"text\": \"*File(s) with changes:*\\n- ${{ steps.check-changes.outputs.formatted_changed_files }}\"\n                  }\n                },\n                {\n                  \"type\": \"section\",\n                  \"text\": {\n                    \"type\": \"mrkdwn\",\n                    \"text\": \"*What to do?*\\nMake sure that:\\n- All extension point ids start with `grafana/`\\n- All extension point ids are exposed via <https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/types/pluginExtensions.ts#L183|the `PluginExtensionPoints` enum in grafana-data>\\n- Core Grafana is not registering extensions to extension points offered by plugins\"\n                  }\n                }\n              ]\n            } ", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "complex", "file_path": ".github/workflows/detect-plugin-extension-changes.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.7999999999999999, "syntax_valid": true, "completeness_score": 0.6, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Documentation CI\non:\n  pull_request:\n    branches: [\"main\"]\n    paths: [\"docs/sources/**\"]\n  workflow_dispatch:\n\npermissions: {}\n\njobs:\n  vale:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      pull-requests: write\n      security-events: write\n    container:\n      image: grafana/vale:latest # zizmor: ignore[unpinned-images]\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n      - uses: grafana/writers-toolkit/vale-action@vale-action/v1 # zizmor: ignore[unpinned-uses]\n        with:\n          filter: '.Name in [\"Grafana.GrafanaCom\", \"Grafana.WordList\", \"Grafana.Spelling\", \"Grafana.ProductPossessives\"]'\n          token: ${{ secrets.GITHUB_TOKEN }}\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/documentation-ci.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8650000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Run e2e for dashboardNewLayouts\n\non:\n  pull_request:\n    branches:\n      - '**'\n    paths:\n      - 'e2e/dashboard-new-layouts/**'\n      - 'public/app/features/dashboard-scene/**'\n\nenv:\n  ARCH: linux-amd64\n\njobs:\n  dashboard-new-layouts-e2e:\n    runs-on: ubuntu-latest\n    continue-on-error: true\n    if: github.event.pull_request.draft == false\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n      - name: Pin Go version to mod file\n        uses: actions/setup-go@v5\n        with:\n          go-version-file: 'go.mod'\n      - run: go version\n      - uses: actions/setup-node@v4\n        with:\n          node-version-file: '.nvmrc'\n          cache: 'yarn'\n      - name: Install dependencies\n        run: yarn install --immutable\n      - name: Build grafana\n        run: make build\n      - name: Install Cypress dependencies\n        uses: cypress-io/github-action@108b8684ae52e735ff7891524cbffbcd4be5b19f\n        with:\n          runTests: false\n      - name: Run dashboardNewLayouts e2e\n        run: yarn e2e:dashboard-new-layouts\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/e2e-dashboard-new-layouts.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: \"Ephemeral instances\"\n\non:\n  issue_comment:\n    types: [created]\n  pull_request:\n    types: [closed]\n\npermissions: {}\n\njobs:\n  handle-ephemeral-instances:\n    if: ${{ github.event.issue.pull_request && (startsWith(github.event.comment.body, '/deploy-to-hg') || github.event.action == 'closed') && github.repository_owner == 'grafana' }}\n    runs-on:\n      labels: ubuntu-latest-16-cores\n    continue-on-error: true\n    permissions:\n      # For commenting.\n      pull-requests: write\n      # No contents permission is needed because we will impersonate an app to create the PR instead.\n      id-token: write # required for vault access\n\n    steps:\n      - name: Get vault secrets\n        id: vault-secrets\n        uses: grafana/shared-workflows/actions/get-vault-secrets@main\n        with:\n          # Secrets placed in ci/repo/grafana/grafana/\n          repo_secrets: |\n            APP_ID=ephemeral-instances-bot:app-id\n            APP_PEM=ephemeral-instances-bot:app-private-key\n            GCOM_HOST=ephemeral-instances-bot:gcom-host\n            GCOM_TOKEN=ephemeral-instances-bot:gcom-token\n            REGISTRY=ephemeral-instances-bot:registry\n            GCP_SA_ACCOUNT_KEY_BASE64=ephemeral-instances-bot:sa-key\n\n      - name: Generate a GitHub app installation token\n        id: generate_token\n        uses: tibdex/github-app-token@b62528385c34dbc9f38e5f4225ac829252d1ea92 # v1.8.0\n        with:\n          app_id: ${{ env.APP_ID }}\n          private_key: ${{ env.APP_PEM }}\n\n      - name: Checkout ephemeral instances repository\n        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4\n        with:\n          repository: grafana/ephemeral-grafana-instances-github-action\n          token: ${{ steps.generate_token.outputs.token }}\n          ref: main\n          path: ephemeral\n          persist-credentials: false\n\n      - name: build and deploy ephemeral instance\n        uses: ./ephemeral\n        with:\n          github-token: ${{ steps.generate_token.outputs.token }}\n          gcom-host: ${{ env.GCOM_HOST }}\n          gcom-token: ${{ env.GCOM_TOKEN }}\n          registry: \"${{ env.REGISTRY }}\"\n          gcp-service-account-key: ${{ env.GCP_SA_ACCOUNT_KEY_BASE64 }}\n          ephemeral-org-id: ephemeral\n          oss-or-enterprise: oss\n          verbose: true\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/ephemeral-instances-pr-comment.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8700000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Feature toggles CI\n\non:\n  pull_request:\n    paths:\n      - 'pkg/services/featuremgmt/toggles_gen_test.go'\n      - 'pkg/services/featuremgmt/registry.go'\n      - 'docs/sources/setup-grafana/configure-grafana/feature-toggles/index.md'\n\npermissions: {}\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    permissions:\n      contents: read\n\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n\n      - name: Set up Go\n        uses: actions/setup-go@v5\n        with:\n          go-version-file: 'go.mod'\n          cache: true\n\n      - name: Run feature toggle tests\n        run: go test -v -run TestFeatureToggleFiles ./pkg/services/featuremgmt/\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/feature-toggles-ci.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Lint Frontend\non:\n  pull_request:\n  push:\n    branches:\n      - main\n      - release-*.*.*\n\npermissions: {}\n\njobs:\n  detect-changes:\n    name: Detect whether code changed\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    outputs:\n      changed: ${{ steps.detect-changes.outputs.frontend }}\n      prettier: ${{ steps.detect-changes.outputs.frontend == 'true' || steps.detect-changes.outputs.docs == 'true' }}\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          persist-credentials: true # required to get more history in the changed-files action\n          fetch-depth: 2\n      - name: Detect changes\n        id: detect-changes\n        uses: ./.github/actions/change-detection\n        with:\n          self: .github/workflows/frontend-lint.yml\n\n  lint-frontend-prettier:\n    needs: detect-changes\n    permissions:\n      contents: read\n      id-token: write\n    # Run this workflow only for PRs from forks; if it gets merged into `main` or `release-*`,\n    # the `lint-frontend-prettier-enterprise` workflow will run instead\n    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == true && needs.detect-changes.outputs.prettier == 'true'\n    name: Lint\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n      with:\n        persist-credentials: false\n    - uses: actions/setup-node@v4\n      with:\n        node-version-file: '.nvmrc'\n        cache: 'yarn'\n        cache-dependency-path: 'yarn.lock'\n    - run: yarn install --immutable --check-cache\n    - run: yarn run prettier:check\n    - run: yarn run lint\n  lint-frontend-prettier-enterprise:\n    needs: detect-changes\n    permissions:\n      contents: read\n      id-token: write\n    # Run this workflow for non-PR events (like pushes to `main` or `release-*`) OR for internal PRs (PRs not from forks)\n    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false && needs.detect-changes.outputs.prettier == 'true'\n    name: Lint\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n      with:\n        persist-credentials: false\n    - uses: actions/setup-node@v4\n      with:\n        node-version-file: '.nvmrc'\n        cache: 'yarn'\n        cache-dependency-path: 'yarn.lock'\n    - name: Setup Enterprise\n      uses: ./.github/actions/setup-enterprise\n      with:\n        github-app-name: 'grafana-ci-bot'\n    - run: yarn install --immutable --check-cache\n    - run: yarn run prettier:check\n    - run: yarn run lint\n  lint-frontend-typecheck:\n    needs: detect-changes\n    permissions:\n      contents: read\n      id-token: write\n    # Run this workflow only for PRs from forks; if it gets merged into `main` or `release-*`,\n    # the `lint-frontend-typecheck-enterprise` workflow will run instead\n    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == true && needs.detect-changes.outputs.changed == 'true'\n    name: Typecheck\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n      with:\n        persist-credentials: false\n    - uses: actions/setup-node@v4\n      with:\n        node-version-file: '.nvmrc'\n        cache: 'yarn'\n        cache-dependency-path: 'yarn.lock'\n    - run: yarn install --immutable --check-cache\n    - run: yarn run typecheck\n  lint-frontend-typecheck-enterprise:\n    needs: detect-changes\n    permissions:\n      contents: read\n      id-token: write\n    # Run this workflow for non-PR events (like pushes to `main` or `release-*`) OR for internal PRs (PRs not from forks)\n    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false && needs.detect-changes.outputs.changed == 'true'\n    name: Typecheck\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n      with:\n        persist-credentials: false\n    - uses: actions/setup-node@v4\n      with:\n        node-version-file: '.nvmrc'\n        cache: 'yarn'\n        cache-dependency-path: 'yarn.lock'\n    - name: Setup Enterprise\n      uses: ./.github/actions/setup-enterprise\n      with:\n        github-app-name: 'grafana-ci-bot'\n    - run: yarn install --immutable --check-cache\n    - run: yarn run typecheck\n  lint-frontend-betterer:\n    needs: detect-changes\n    permissions:\n      contents: read\n      id-token: write\n    if: needs.detect-changes.outputs.changed == 'true'\n    name: Betterer\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n      with:\n        persist-credentials: false\n    - uses: actions/setup-node@v4\n      with:\n        node-version-file: '.nvmrc'\n        cache: 'yarn'\n        cache-dependency-path: 'yarn.lock'\n    - run: yarn install --immutable --check-cache\n    - run: yarn run betterer:ci\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "complex", "file_path": ".github/workflows/frontend-lint.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8700000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Create or update GitHub release\non:\n  workflow_call:\n    inputs:\n      version:\n        required: true\n        description: Needs to match, exactly, the name of a milestone (NO v prefix)\n        type: string\n      latest:\n        required: false\n        default: \"0\"\n        description: Mark this release as latest (`1`) or not (`0`, default)\n        type: string\n      dry_run:\n        required: false\n        default: false\n        type: boolean\n  workflow_dispatch:\n    inputs:\n      version:\n        required: true\n        description: Needs to match, exactly, the name of a milestone (NO v prefix)\n        type: string\n      latest:\n        required: false\n        default: \"0\"\n        description: Mark this release as latest (`1`) or not (`0`, default)\n        type: string\n      dry_run:\n        required: false\n        default: false\n        type: boolean\n\npermissions:\n  # contents: write allows the action(s) to create github releases\n  contents: write\n  id-token: write\n\njobs:\n  main:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Create GitHub release (manually invoked)\n        uses: grafana/grafana-github-actions-go/github-release@main # zizmor: ignore[unpinned-uses]\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          version: ${{ inputs.version }}\n          latest: ${{ inputs.latest }}\n          dry_run: ${{ inputs.dry_run }}\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/github-release.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8700000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: golangci-lint\non:\n  push:\n    paths:\n      - pkg/**\n      - .github/workflows/go-lint.yml\n      - go.*\n    branches:\n      - main\n  pull_request:\n\npermissions:\n  contents: read\n\njobs:\n  lint-go:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n      - uses: actions/setup-go@v5\n        with:\n          go-version-file: ./go.mod\n      - name: golangci-lint\n        uses: golangci/golangci-lint-action@1481404843c368bc19ca9406f87d6e0fc97bdcfd\n        with:\n          version: v2.0.2\n          args: |\n            --verbose $(go list -m -f '{{.Dir}}' | xargs -I{} sh -c 'test ! -f {}/.nolint && echo {}/...')\n          install-mode: binary\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/go-lint.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8200000000000001, "syntax_valid": true, "completeness_score": 0.8, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Crowdin automatic task management\n\non:\n  workflow_dispatch:\n  # once a month on the first day of the month at midnight\n  schedule:\n    - cron: \"0 0 1 * *\"\n\njobs:\n  create-tasks-in-crowdin:\n    uses: grafana/grafana-github-actions/.github/workflows/crowdin-create-tasks.yml@main\n    with:\n      crowdin_project_id: 5\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/i18n-crowdin-create-tasks.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8700000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Crowdin Download Action\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: \"0 0 * * *\"\n\njobs:\n  download-sources-from-crowdin:\n    if: github.repository == 'grafana/grafana'\n    uses: grafana/grafana-github-actions/.github/workflows/crowdin-download.yml@main\n    with:\n      crowdin_project_id: 5\n      pr_labels: 'area/frontend, area/internationalization, no-changelog, no-backport'\n      github_board_id: 78 # Frontend Platform project\n      en_paths: public/locales/en-US/grafana.json, public/app/plugins/datasource/azuremonitor/locales/en-US/grafana-azure-monitor-datasource.json, public/app/plugins/datasource/mssql/locales/en-US/mssql.json, packages/grafana-prometheus/src/locales/en-US/grafana-prometheus.json, packages/grafana-sql/src/locales/en-US/grafana-sql.json\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/i18n-crowdin-download.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Crowdin Upload Action\n\non:\n  workflow_dispatch:\n  push:\n    paths:\n      - 'public/locales/en-US/grafana.json'\n      - 'public/app/plugins/datasource/azuremonitor/locales/en-US/grafana-azure-monitor-datasource.json'\n      - 'public/app/plugins/datasource/mssql/locales/en-US/mssql.json'\n      - 'packages/grafana-sql/src/locales/en-US/grafana-sql.json'\n      - 'packages/grafana-prometheus/src/locales/en-US/grafana-prometheus.json'\n    branches:\n      - main\n\njobs:\n  upload-sources-to-crowdin:\n    if: github.repository == 'grafana/grafana'\n    uses: grafana/grafana-github-actions/.github/workflows/crowdin-upload.yml@main\n    with:\n      crowdin_project_id: 5\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/i18n-crowdin-upload.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Verify i18n\n\npermissions:\n  contents: read\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n      - release-*.*.*\n\njobs:\n  verify-i18n:\n    uses: grafana/grafana-github-actions/.github/workflows/verify-i18n.yml@main\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/i18n-verify.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Run commands when issues are opened\n\n# important: this workflow uses a github app that is strictly limited\n# to issues. If you want to change the triggers for this workflow,\n# please review if the permissions are still sufficient.\non:\n  issues:\n    types: [opened]\n\nconcurrency:\n  group: issue-opened-${{ github.event.issue.number }}\n\npermissions: {}\n\njobs:\n  main:\n    runs-on: ubuntu-latest\n    if: github.repository == 'grafana/grafana'\n    permissions:\n      contents: read\n      id-token: write\n    steps:\n\n      - name: Checkout Actions\n        uses: actions/checkout@v4 # v4.2.2\n        with:\n          repository: \"grafana/grafana-github-actions\"\n          path: ./actions\n          ref: main\n          persist-credentials: false\n\n      - name: Install Actions\n        run: npm install --production --prefix ./actions\n\n      # give issue-openers a chance to add labels after submit\n      - name: Sleep for 2 minutes\n        run: sleep 2m\n        shell: bash\n\n      - name: \"Get vault secrets\"\n        id: vault-secrets\n        uses: grafana/shared-workflows/actions/get-vault-secrets@main # zizmor: ignore[unpinned-uses]\n        with:\n          # Secrets placed in the ci/repo/grafana/grafana/plugins_platform_issue_commands_github_bot path in Vault\n          repo_secrets: |\n            GITHUB_APP_ID=grafana_pr_automation_app:app_id\n            GITHUB_APP_PRIVATE_KEY=grafana_pr_automation_app:app_pem\n\n      - name: Generate token\n        id: generate_token\n        uses: actions/create-github-app-token@3ff1caaa28b64c9cc276ce0a02e2ff584f3900c5 # v2.0.2\n        with:\n          app-id: ${{ env.GITHUB_APP_ID }}\n          private-key: ${{ env.GITHUB_APP_PRIVATE_KEY }}\n\n      - name: Run Commands\n        uses: ./actions/commands\n        with:\n          token: ${{ steps.generate_token.outputs.token }}\n          configPath: \"issue-opened\"\n\n  auto-triage:\n    needs: [main]\n    permissions:\n      contents: read\n      id-token: write\n    if: github.repository == 'grafana/grafana' && github.event.issue.author_association != 'MEMBER' && github.event.issue.author_association != 'OWNER'\n    runs-on: ubuntu-latest\n    steps:\n\n      - name: \"Get vault secrets\"\n        id: vault-secrets\n        uses: grafana/shared-workflows/actions/get-vault-secrets@main # zizmor: ignore[unpinned-uses]\n        with:\n          # Secrets placed in the ci/repo/grafana/grafana/plugins_platform_issue_triager path in Vault\n          repo_secrets: |\n            AUTOTRIAGER_OPENAI_API_KEY=plugins_platform_issue_triager:AUTOTRIAGER_OPENAI_API_KEY\n            AUTOTRIAGER_SLACK_WEBHOOK_URL=plugins_platform_issue_triager:AUTOTRIAGER_SLACK_WEBHOOK_URL\n            GITHUB_APP_ID=plugins_platform_issue_triager_github_bot:app_id\n            GITHUB_APP_PRIVATE_KEY=plugins_platform_issue_triager_github_bot:app_pem\n\n      - name: Generate token\n        id: generate_token\n        uses: actions/create-github-app-token@3ff1caaa28b64c9cc276ce0a02e2ff584f3900c5 # v2.0.2\n        with:\n          app-id: ${{ env.GITHUB_APP_ID }}\n          private-key: ${{ env.GITHUB_APP_PRIVATE_KEY }}\n\n      - name: Checkout\n        uses: actions/checkout@v4 # v4.2.2\n        with:\n          persist-credentials: false\n\n      - name: Send issue to the auto triager action\n        id: auto_triage\n        uses: grafana/auto-triager@main # zizmor: ignore[unpinned-uses]\n        with:\n          token: ${{ steps.generate_token.outputs.token }}\n          issue_number: ${{ github.event.issue.number }}\n          openai_api_key: ${{ env.AUTOTRIAGER_OPENAI_API_KEY }}\n          add_labels: true\n          labels_file: ${{ github.workspace }}/.github/workflows/auto-triager/labels.txt\n          types_file: ${{ github.workspace }}/.github/workflows/auto-triager/types.txt\n          prompt_file: ${{ github.workspace }}/.github/workflows/auto-triager/prompt.txt\n\n      - name: \"Send Slack notification\"\n        if: ${{ steps.auto_triage.outputs.triage_labels != '' }}\n        uses: slackapi/slack-github-action@37ebaef184d7626c5f204ab8d3baff4262dd30f0 # v1.27.0\n        with:\n          payload: >\n            {\n              \"icon_emoji\": \":robocto:\",\n              \"username\": \"Auto Triager\",\n              \"type\": \"mrkdwn\",\n              \"text\": \"Auto triager found the following labels: ${{ steps.auto_triage.outputs.triage_labels }} for issue ${{ github.event.issue.html_url }}\",\n              \"channel\": \"#triage-automation-ci\"\n            }\n        env:\n          SLACK_WEBHOOK_URL:  ${{ env.AUTOTRIAGER_SLACK_WEBHOOK_URL }}\n  auto-label-internal-issues:\n    needs: [main]\n    if: github.repository == 'grafana/grafana'\n    runs-on: ubuntu-latest\n    permissions:\n      issues: write\n      id-token: write\n    steps:\n        - name: \"Get vault secrets\"\n          id: vault-secrets\n          uses: grafana/shared-workflows/actions/get-vault-secrets@main # zizmor: ignore[unpinned-uses]\n          with:\n            # Secrets placed in the ci/repo/grafana/grafana/plugins_platform_issue_triager path in Vault\n            repo_secrets: |\n              GITHUB_APP_ID=plugins_platform_issue_triager_github_bot:app_id\n              GITHUB_APP_PRIVATE_KEY=plugins_platform_issue_triager_github_bot:app_pem  \n        - name: Generate token\n          id: generate_token\n          uses: actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e # v2.0.6\n          with:\n            app-id: ${{ env.GITHUB_APP_ID }}\n            private-key: ${{ env.GITHUB_APP_PRIVATE_KEY }}\n            permission-members: read\n        - name: Check if member of grafana org\n          id: check-if-grafana-org-member\n          continue-on-error: true\n          run: gh api https://api.github.com/orgs/grafana/members/${{ env.ACTOR }} >/dev/null 2>&1 && echo \"is_grafana_org_member=true\" >> \"$GITHUB_OUTPUT\"\n          env:\n              GH_TOKEN: ${{ steps.generate_token.outputs.token }}\n              ACTOR: ${{ github.actor }}\n        - name: \"Auto label internal issues\"\n          if:  steps.check-if-grafana-org-member.outputs.is_grafana_org_member == 'true' || github.event.issue.author_association == 'MEMBER' || github.event.issue.author_association == 'OWNER'\n          run: gh issue edit \"$NUMBER\" --add-label \"$LABELS\"\n          env:\n            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n            GH_REPO: ${{ github.repository }}\n            NUMBER: ${{ github.event.issue.number }}\n            LABELS: internal", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "complex", "file_path": ".github/workflows/issue-opened.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8925000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Documentation\n\non:\n  pull_request:\n    paths:\n      - '*.md'\n      - 'docs/**'\n      - 'packages/**/*.md'\n      - 'latest.json'\n  push:\n    branches:\n      - main\n    paths:\n      - '*.md'\n      - 'docs/**'\n      - 'packages/**/*.md'\n      - 'latest.json'\n\npermissions: {}\n\njobs:\n  docs:\n    name: Build & Verify Docs\n    runs-on: ubuntu-latest\n\n    permissions:\n      contents: read\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version-file: '.nvmrc'\n          cache: 'yarn'\n\n      - name: Install dependencies\n        run: yarn install --immutable\n\n      - name: Lint docs\n        run: yarn run prettier:checkDocs\n        env:\n          # Increase memory for prettier due to large number of files\n          NODE_OPTIONS: --max_old_space_size=8192\n\n      - name: Build docs website\n        run: |\n          # Create and start a container from the docs-base image in detached mode\n          docker run -d --name docs-builder grafana/docs-base:latest tail -f /dev/null\n\n          # Create the directory structure inside the container\n          docker exec docs-builder mkdir -p /hugo/content/docs/grafana/latest\n\n          # Create the _index.md file\n          docker exec docs-builder /bin/sh -c \"echo -e '---\\nredirectURL: /docs/grafana/latest/\\ntype: redirect\\nversioned: true\\n---\\n' > /hugo/content/docs/grafana/_index.md\"\n\n          # Copy the docs sources from the host to the container\n          docker cp docs/sources/. docs-builder:/hugo/content/docs/grafana/latest/\n\n          # Run the make prod command inside the container\n          docker exec -w /hugo docs-builder make prod || echo \"Build completed with warnings\"\n\n          # Clean up the container\n          docker rm -f docs-builder\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/lint-build-docs.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.875, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Migrate open PRs\n# Migrate open PRs from a superseded release branch to the current release branch and notify authors\non: \n  workflow_call:\n    inputs:\n      from:\n        description: 'The base branch to check for open PRs'\n        required: true\n        type: string\n      to:\n        description: 'The base branch to migrate open PRs to'\n        required: true\n        type: string\n      ownerRepo:\n        description: Owner/repo of the repository where the branch is created (e.g. 'grafana/grafana')\n        required: true\n        type: string\n  workflow_dispatch:\n    inputs:\n      from:\n        description: 'The base branch to check for open PRs'\n        required: true\n        type: string\n      to:\n        description: 'The base branch to migrate open PRs to'\n        required: true\n        type: string\n      ownerRepo:\n        description: Owner/repo of the repository where the branch is created (e.g. 'grafana/grafana')\n        required: true\n        type: string\n\npermissions:\n  contents: read\n  id-token: write\n\njobs:\n  main:\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"Get vault secrets\"\n        id: vault-secrets\n        uses: grafana/shared-workflows/actions/get-vault-secrets@main\n        with:\n          # Secrets placed in the ci/data/repo/grafana/grafana/delivery-bot-app path in Vault\n          repo_secrets: |\n            GRAFANA_DELIVERY_BOT_APP_PEM=delivery-bot-app:PRIVATE_KEY\n      - name: \"Generate token\"\n        id: generate_token\n        uses: tibdex/github-app-token@b62528385c34dbc9f38e5f4225ac829252d1ea92\n        with:\n          app_id: ${{ vars.DELIVERY_BOT_APP_ID }}\n          private_key: ${{ env.GRAFANA_DELIVERY_BOT_APP_PEM }}\n      - name: Migrate PRs\n        uses: grafana/grafana-github-actions-go/migrate-open-prs@main\n        with:\n          token: ${{ steps.generate_token.outputs.token }}\n          ownerRepo: ${{ inputs.ownerRepo }}\n          from: ${{ inputs.from }}\n          to: ${{ inputs.to }}\n          binary_release_tag: 'dev'\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/migrate-prs.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8700000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: PR Checks\non:\n  pull_request_target:\n    types:\n      - opened\n      - reopened\n      - synchronize\n      - ready_for_review\n      - labeled\n      - unlabeled\n      - edited\n      - auto_merge_enabled\n  issues:\n    types:\n      - milestoned\n      - demilestoned\n\nconcurrency:\n  group: pr-checks-${{ github.event.number }}\n\npermissions:\n  statuses: write\n  checks: write\n  actions: write\n  contents: read\n  pull-requests: read\n\njobs:\n  main:\n    runs-on: ubuntu-latest\n    if: github.event.pull_request.draft == false\n    steps:\n      - name: Checkout Actions\n        uses: actions/checkout@v4 # v4.2.2\n        with:\n          repository: \"grafana/grafana-github-actions\"\n          path: ./actions\n          ref: main\n          persist-credentials: false\n      - name: Install Actions\n        run: npm install --production --prefix ./actions\n      - name: Run PR Checks\n        uses: ./actions/pr-checks\n        with:\n          token: ${{secrets.GITHUB_TOKEN}}\n          configPath: pr-checks\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/pr-checks.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8825000000000002, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: \"CodeQL for PR / javascript\"\n\non:\n  workflow_dispatch:\n  pull_request:\n    branches: [main]\n    paths:\n      - '**/*.js'\n      - '**/*.ts'\n      - '**/*.tsx'\n\npermissions:\n  security-events: write\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    if: github.repository == 'grafana/grafana'\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v4\n      with:\n        # We must fetch at least the immediate parents so that if this is\n        # a pull request then we can checkout the head.\n        fetch-depth: 2\n        persist-credentials: false\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v3\n      with:\n        languages: \"javascript\"\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v3\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/pr-codeql-analysis-javascript.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8700000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: \"CodeQL for PR / python\"\n\non:\n  workflow_dispatch:\n  pull_request:\n    branches: [main]\n    paths:\n      - '**/*.py'\n\npermissions:\n  security-events: write\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    if: github.repository == 'grafana/grafana'\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v4\n      with:\n        # We must fetch at least the immediate parents so that if this is\n        # a pull request then we can checkout the head.\n        fetch-depth: 2\n        persist-credentials: false\n\n    - name: Check for Python files\n      id: check-python\n      run: |\n        if [ -z \"$(find . -name '*.py' -type f)\" ]; then\n          echo \"No Python files found, skipping analysis\"\n          echo \"skip=true\" >> \"$GITHUB_OUTPUT\"\n        else\n          echo \"Python files found, proceeding with analysis\"\n          echo \"skip=false\" >> \"$GITHUB_OUTPUT\"\n        fi\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      if: steps.check-python.outputs.skip != 'true'\n      uses: github/codeql-action/init@v3\n      with:\n        languages: \"python\"\n\n    - name: Perform CodeQL Analysis\n      if: steps.check-python.outputs.skip != 'true'\n      uses: github/codeql-action/analyze@v3\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/pr-codeql-analysis-python.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.88, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: PR automation\non:\n  pull_request_target:\n    types:\n      - labeled\n      - opened\n      - synchronize\npermissions: {}\nconcurrency:\n  group: pr-commands-${{ github.event.number }}\njobs:\n  main:\n    permissions:\n      contents: read\n      pull-requests: write\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Actions\n        uses: actions/checkout@v4 # v4.2.2\n        with:\n          repository: \"grafana/grafana-github-actions\"\n          path: ./actions\n          ref: main\n          persist-credentials: false\n      - name: Install Actions\n        run: npm install --production --prefix ./actions\n      - name: Run Commands\n        uses: ./actions/commands\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          configPath: pr-commands\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/pr-commands.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: \"Update Go Workspace for Dependabot PRs\"\non:\n  pull_request:\n    branches: [main]\n    paths:\n      - .github/workflows/pr-dependabot-update-go-workspace.yml\n      - go.mod\n      - go.sum\n      - go.work\n      - go.work.sum\n      - '**/go.mod'\n      - '**/go.sum'\n      - '**.go'\npermissions:\n  contents: write\n  id-token: write\njobs:\n  update:\n    runs-on: \"ubuntu-latest\"\n    if: ${{ github.actor == 'dependabot[bot]' && github.event.pull_request.head.repo.full_name == github.repository }}\n    continue-on-error: true\n    steps:\n    - name: Retrieve GitHub App secrets\n      id: get-secrets\n      uses: grafana/shared-workflows/actions/get-vault-secrets@get-vault-secrets-v1.0.1 # zizmor: ignore[unpinned-uses]\n      with:\n        repo_secrets: |\n          APP_ID=grafana-go-workspace-bot:app-id\n          APP_INSTALLATION_ID=grafana-go-workspace-bot:app-installation-id\n          PRIVATE_KEY=grafana-go-workspace-bot:private-key\n\n    - name: Generate GitHub App token\n      id: generate_token\n      uses: actions/create-github-app-token@v1\n      with:\n        app-id: ${{ env.APP_ID }}\n        private-key: ${{ env.PRIVATE_KEY }}\n\n    - name: Checkout repository\n      uses: actions/checkout@v4\n      with:\n        repository: ${{ github.event.pull_request.head.repo.full_name }}\n        ref: ${{ github.event.pull_request.head.ref }}\n        token: ${{ steps.generate_token.outputs.token }}\n        persist-credentials: false\n\n    - name: Set go version\n      uses: actions/setup-go@19bb51245e9c80abacb2e91cc42b33fa478b8639\n      with:\n        go-version-file: go.mod\n\n    - name: Configure Git\n      run: |\n          git config --local user.email \"41898282+github-actions[bot]@users.noreply.github.com\"\n          git config --local user.name \"github-actions[bot]\"\n          git config --local --add --bool push.autoSetupRemote true\n\n    - name: Update workspace\n      run: make update-workspace\n\n    - name: Commit and push workspace changes\n      env:\n        BRANCH_NAME: ${{ github.head_ref || github.ref_name }} \n      run: |\n        if ! git diff --exit-code --quiet; then\n          echo \"Committing and pushing workspace changes\"\n          git commit -a -m \"update workspace\"\n          git push origin \"$BRANCH_NAME\"\n        fi\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/pr-dependabot-update-go-workspace.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.9025000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: External PR labelling\n\non:\n  # We need \"write\" permissions on the PR to be able to add a label.\n  pull_request_target: # zizmor: ignore[dangerous-triggers] We need this to have labelling permissions. There are no user inputs here, so we should be fine.\n    types:\n      - opened\n\npermissions: {}\n\njobs:\n  label-if-external:\n    name: Add 'pr/external' label if the PR is external\n    if: github.event.pull_request.author_association != 'MEMBER' && github.event.pull_request.author_association != 'OWNER'\n    runs-on: ubuntu-latest\n    permissions:\n      pull-requests: write # to write the label\n\n    steps:\n      - name: Add the 'pr/external' label\n        env:\n          PR_NUMBER: ${{ github.event.pull_request.number }}\n        run: |\n          echo \"Adding 'pr/external' label to the PR\"\n          gh pr edit \"$PR_NUMBER\" --add-label pr/external\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/pr-external-labelling.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8700000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Frontend tests\non:\n  pull_request:\n  push:\n    branches:\n      - main\n      - release-*.*.*\n\npermissions: {}\n\njobs:\n  detect-changes:\n    name: Detect whether code changed\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    outputs:\n      changed: ${{ steps.detect-changes.outputs.frontend }}\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          persist-credentials: true # required to get more history in the changed-files action\n          fetch-depth: 2\n      - name: Detect changes\n        id: detect-changes\n        uses: ./.github/actions/change-detection\n        with:\n          self: .github/workflows/pr-frontend-unit-tests.yml\n\n  frontend-unit-tests:\n    permissions:\n      contents: read\n      id-token: write\n    # Run this workflow only for PRs from forks; if it gets merged into `main` or `release-*`,\n    # the `frontend-unit-tests-enterprise` workflow will run instead\n    needs: detect-changes\n    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == true && needs.detect-changes.outputs.changed == 'true'\n    runs-on: ubuntu-latest-8-cores\n    name: \"Unit tests (${{ matrix.chunk }} / 8)\"\n    strategy:\n      fail-fast: false\n      matrix:\n        chunk: [1, 2, 3, 4, 5, 6, 7, 8]\n    steps:\n    - uses: actions/checkout@v4\n      with:\n        persist-credentials: false\n    - uses: actions/setup-node@v4\n      with:\n        node-version-file: '.nvmrc'\n        cache: 'yarn'\n        cache-dependency-path: 'yarn.lock'\n    - run: yarn install --immutable --check-cache\n    - run: yarn run test:ci\n      env:\n        TEST_MAX_WORKERS: 2\n        TEST_SHARD: ${{ matrix.chunk }}\n        TEST_SHARD_TOTAL: 8\n\n  frontend-unit-tests-enterprise:\n    permissions:\n      contents: read\n      id-token: write\n    # Run this workflow for non-PR events (like pushes to `main` or `release-*`) OR for internal PRs (PRs not from forks)\n    needs: detect-changes\n    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false && needs.detect-changes.outputs.changed == 'true'\n    runs-on: ubuntu-latest-8-cores\n    name: \"Unit tests (${{ matrix.chunk }} / 8)\"\n    strategy:\n      fail-fast: false\n      matrix:\n        chunk: [1, 2, 3, 4, 5, 6, 7, 8]\n    steps:\n    - uses: actions/checkout@v4\n      with:\n        persist-credentials: false\n    - uses: actions/setup-node@v4\n      with:\n        node-version-file: '.nvmrc'\n        cache: 'yarn'\n        cache-dependency-path: 'yarn.lock'\n    - name: Setup Enterprise\n      uses: ./.github/actions/setup-enterprise\n      with:\n        github-app-name: 'grafana-ci-bot'\n    - run: yarn install --immutable --check-cache\n    - run: yarn run test:ci\n      env:\n        TEST_MAX_WORKERS: 2\n        TEST_SHARD: ${{ matrix.chunk }}\n        TEST_SHARD_TOTAL: 8\n\n  frontend-decoupled-plugin-tests:\n    needs: detect-changes\n    if: needs.detect-changes.outputs.changed == 'true'\n    runs-on: ubuntu-latest-8-cores\n    name: \"Decoupled plugin tests\"\n    steps:\n    - uses: actions/checkout@v4\n      with:\n        persist-credentials: false\n    - uses: actions/setup-node@v4\n      with:\n        node-version-file: '.nvmrc'\n        cache: 'yarn'\n        cache-dependency-path: 'yarn.lock'\n    - run: yarn install --immutable --check-cache\n    - run: yarn run plugin:test:ci\n\n  # This is the job that is actually required by rulesets.\n  # We need to require EITHER the OSS or the Enterprise job to pass.\n  # However, if one is skipped, GitHub won't flat-map the shards,\n  #   so they won't be accepted by a ruleset.\n  required-frontend-unit-tests:\n    needs:\n      - frontend-unit-tests\n      - frontend-unit-tests-enterprise\n      - frontend-decoupled-plugin-tests\n    # always() is the best function here.\n    # success() || failure() will skip this function if any need is also skipped.\n    # That means conditional test suites will fail the entire requirement check.\n    if: always()\n\n    name: All frontend unit tests complete\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check test suites\n        env:\n          NEEDS: ${{ toJson(needs) }}\n        run: |\n          FAILURES=\"$(echo \"$NEEDS\" | jq 'with_entries(select(.value.result == \"failure\")) | map_values(.result)')\"\n          echo \"$FAILURES\"\n          if [ \"$(echo \"$FAILURES\" | jq '. | length')\" != \"0\" ]; then\n            exit 1\n          fi\n          echo \"All OK!\"\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "complex", "file_path": ".github/workflows/pr-frontend-unit-tests.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.88, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: \"Go Workspace Check\"\n\non:\n  workflow_dispatch:\n  pull_request:\n    branches: [main]\n    paths:\n      - .github/workflows/pr-go-workspace-check.yml\n      - go.mod\n      - go.sum\n      - go.work\n      - go.work.sum\n      - '**/go.mod'\n      - '**/go.sum'\n      - '**.go'\n\njobs:\n  check:\n    name: Go Workspace Check\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v4\n      with:\n        persist-credentials: false\n\n    - name: Set go version\n      uses: actions/setup-go@19bb51245e9c80abacb2e91cc42b33fa478b8639\n      with:\n        cache: false\n        go-version-file: go.mod\n\n    - name: Update workspace\n      run: make update-workspace\n\n    - name: Check for go mod & workspace changes \n      run: |\n        if ! git diff --exit-code --quiet; then\n          echo \"Changes detected:\"\n          git diff\n          echo \"Please run 'make update-workspace' and commit the changes.\"\n          echo \"If there is a change in enterprise dependencies, please update pkg/extensions/main.go.\"\n          exit 1\n        fi\n    - name: Ensure Dockerfile contains submodule COPY commands\n      run: ./scripts/go-workspace/validate-dockerfile.sh\n\n  check-wire:\n    name: Check Wire Changes\n    runs-on: ubuntu-latest\n\n    permissions:\n      contents: read\n      id-token: write\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v4\n      with:\n        persist-credentials: false\n\n    - name: Set go version\n      uses: actions/setup-go@19bb51245e9c80abacb2e91cc42b33fa478b8639\n      with:\n        cache: false\n        go-version-file: go.mod\n\n    - name: Setup Enterprise\n      if: github.event.pull_request.head.repo.fork == false\n      uses: ./.github/actions/setup-enterprise\n\n    - name: Calculate generated wire checksums\n      id: pre_gen_oss\n      run: |\n        OSS_WIRE_CHECKSUM=\"$(sha256sum pkg/server/wire_gen.go | cut -d' ' -f1)\"\n        echo \"wire_checksum=$OSS_WIRE_CHECKSUM\" >> \"$GITHUB_OUTPUT\"\n\n    - name: Calculate generated enterprise wire checksums\n      id: pre_gen_enterprise\n      if: github.event.pull_request.head.repo.fork == false\n      run: |\n        ENTERPRISE_WIRE_CHECKSUM=\"$(sha256sum pkg/server/enterprise_wire_gen.go | cut -d' ' -f1)\"\n        echo \"wire_checksum=$ENTERPRISE_WIRE_CHECKSUM\" >> \"$GITHUB_OUTPUT\"\n\n    - name: Generate Go files\n      run: make gen-go\n\n    - name: Check for generated file changes\n      run: |\n        OSS_WIRE_CHANGED=false\n        CURRENT_OSS_WIRE_CHECKSUM=$(sha256sum pkg/server/wire_gen.go | cut -d' ' -f1)\n        if [ \"$CURRENT_OSS_WIRE_CHECKSUM\" != \"${{ steps.pre_gen_oss.outputs.wire_checksum }}\" ]; then\n          OSS_WIRE_CHANGED=true\n          echo \"Uncomitted changes detected in pkg/server/wire_gen.go\"\n        fi\n\n        ENTERPRISE_WIRE_CHANGED=false\n        if [ -f \"pkg/server/enterprise_wire_gen.go\" ]; then\n          CURRENT_ENTERPRISE_WIRE_CHECKSUM=$(sha256sum pkg/server/enterprise_wire_gen.go | cut -d' ' -f1)\n          if [ \"$CURRENT_ENTERPRISE_WIRE_CHECKSUM\" != \"${{ steps.pre_gen_enterprise.outputs.wire_checksum }}\" ]; then\n            ENTERPRISE_WIRE_CHANGED=true\n            echo \"Uncomitted changes detected in pkg/server/enterprise_wire_gen.go\"\n          fi\n        fi\n        \n        if [ \"$OSS_WIRE_CHANGED\" = \"false\" ] && [ \"$ENTERPRISE_WIRE_CHANGED\" = \"false\" ]; then\n          echo \"No changes in generated Go files\"\n        else\n          if [[ \"${{ github.event.pull_request.head.repo.fork }}\" == \"false\" ]]; then\n            echo \"> !!! Please link Enterprise and run 'make gen-go', then commit the changes to both repositories.\"\n          else\n            echo \"> !!! Please run 'make gen-go' and commit the changes.\"\n          fi\n          exit 1\n        fi\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "complex", "file_path": ".github/workflows/pr-go-workspace-check.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.9025000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: \"K8s Codegen Check\"\n\non:\n  workflow_dispatch:\n  pull_request:\n    branches: [main]\n    paths:\n      - \"pkg/apis/**\"\n      - \"pkg/aggregator/apis/**\"\n      - \"pkg/apimachinery/apis/**\"\n      - \"hack/**\"\n      - \"apps/**\"\n      - \"*.sum\"\n\njobs:\n  check:\n    name: K8s Codegen Check\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v4\n      with:\n        persist-credentials: false\n\n    - name: Set go version\n      uses: actions/setup-go@19bb51245e9c80abacb2e91cc42b33fa478b8639\n      with:\n        go-version-file: go.mod\n\n    - name: Update k8s codegen\n      run: ./hack/update-codegen.sh\n\n    - name: Check for k8s codegen changes\n      run: |\n        if ! git diff --exit-code --quiet; then\n          echo \"Changes detected:\"\n          git diff\n          echo \"Please run './hack/update-codegen.sh' and commit the changes.\"\n          exit 1\n        fi\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/pr-k8s-codegen-check.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.7925, "syntax_valid": true, "completeness_score": 0.5, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Dispatch check for patch conflicts\non:\n  pull_request:\n    types:\n      - opened\n      - reopened\n      - synchronize\n    branches:\n      - \"main\"\n      - \"release-*\"\n\npermissions:\n  id-token: write\n  contents: read\n\n# Since this is run on a pull request, we want to apply the patches intended for the\n# target branch onto the source branch, to verify compatibility before merging.\njobs:\n  dispatch-job:\n    uses: grafana/grafana/.github/workflows/pr-patch-check.yml@main\n    with:\n      head_ref: ${{ github.head_ref }}\n      base_ref: ${{ github.base_ref }}\n      repo: ${{ github.repository }}\n      sender_login: ${{ github.event.sender.login }}\n      sha: ${{ github.sha }}\n      pr_commit_sha: ${{ github.event.pull_request.head.sha }}\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/pr-patch-check-event.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8825000000000002, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Dispatch check for patch conflicts\non:\n  workflow_call:\n    inputs:\n      head_ref:\n        type: string\n        required: true\n      base_ref:\n        type: string\n        required: true\n      repo:\n        type: string\n        required: true\n      sender_login:\n        type: string\n        required: true\n      sha:\n        type: string\n        required: true\n      pr_commit_sha:\n        type: string\n        required: true\n\npermissions:\n  id-token: write\n  contents: read\n\n# Since this is run on a pull request, we want to apply the patches intended for the\n# target branch onto the source branch, to verify compatibility before merging.\njobs:\n  dispatch-job:\n    env:\n      HEAD_REF: ${{ inputs.head_ref }}\n      BASE_REF: ${{ github.base_ref }}\n      REPO: ${{ inputs.repo }}\n      SENDER: ${{ inputs.sender_login }}\n      SHA: ${{ inputs.sha }}\n      PR_COMMIT_SHA: ${{ inputs.pr_commit_sha }}\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"Get vault secrets\"\n        id: vault-secrets\n        uses: grafana/shared-workflows/actions/get-vault-secrets@main\n        with:\n          # Secrets placed in the ci/data/repo/grafana/grafana/delivery-bot-app path in Vault\n          repo_secrets: |\n            GRAFANA_DELIVERY_BOT_APP_PEM=delivery-bot-app:PRIVATE_KEY\n      - name: \"Generate token\"\n        id: generate_token\n        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a\n        with:\n          # App needs Actions: Read/Write for the grafana/security-patch-actions repo\n          app_id: ${{ vars.DELIVERY_BOT_APP_ID }}\n          private_key: ${{ env.GRAFANA_DELIVERY_BOT_APP_PEM }}\n          permissions: \"{\\\"actions\\\": \\\"write\\\", \\\"workflows\\\": \\\"write\\\"}\"\n          repositories: \"[\\\"security-patch-actions\\\"]\"\n      - name: \"Dispatch job\"\n        uses: actions/github-script@v7\n        with:\n          github-token: ${{ steps.generate_token.outputs.token }}\n          script: |\n            const {HEAD_REF, BASE_REF, REPO, SENDER, SHA, PR_COMMIT_SHA} = process.env;\n\n            await github.rest.actions.createWorkflowDispatch({\n                owner: 'grafana',\n                repo: 'security-patch-actions',\n                workflow_id: 'test-patches-event.yml',\n                ref: 'main',\n                inputs: {\n                  src_repo: REPO,\n                  src_ref: HEAD_REF,\n                  src_merge_sha: SHA,\n                  src_pr_commit_sha: PR_COMMIT_SHA,\n                  patch_repo: REPO + '-security-patches',\n                  patch_ref: BASE_REF,\n                  triggering_github_handle: SENDER\n                }\n            })\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/pr-patch-check.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8925000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Integration Tests\n\non:\n  push:\n    branches:\n      - main\n      - release-*.*.*\n  pull_request:\n    types:\n      - opened\n      - synchronize\n      - reopened\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}\n\npermissions: {}\n\njobs:\n  sqlite:\n    strategy:\n      matrix:\n        shard: [\n          1/8, 2/8, 3/8, 4/8,\n          5/8, 6/8, 7/8, 8/8,\n        ]\n      fail-fast: false\n\n    name: Sqlite (${{ matrix.shard }})\n    runs-on: ubuntu-latest-8-cores\n    permissions:\n      contents: read\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n      - name: Setup Go\n        uses: actions/setup-go@v5\n        with:\n          go-version-file: go.mod\n          cache: true\n      - name: Run tests\n        env:\n          SHARD: ${{ matrix.shard }}\n        run: |\n          set -euo pipefail\n          readarray -t PACKAGES <<< \"$(./scripts/ci/backend-tests/pkgs-with-tests-named.sh -b TestIntegration | ./scripts/ci/backend-tests/shard.sh -N\"$SHARD\" -d-)\"\n          go test -tags=sqlite -timeout=5m -run '^TestIntegration' \"${PACKAGES[@]}\"\n  mysql:\n    strategy:\n      matrix:\n        shard: [\n          1/8, 2/8, 3/8, 4/8,\n          5/8, 6/8, 7/8, 8/8,\n        ]\n      fail-fast: false\n\n    name: MySQL (${{ matrix.shard }})\n    runs-on: ubuntu-latest-8-cores\n    permissions:\n      contents: read\n    env:\n      GRAFANA_TEST_DB: mysql\n      MYSQL_HOST: 127.0.0.1\n    services:\n      mysql:\n        image: mysql:8.0.32\n        env:\n          MYSQL_ROOT_PASSWORD: rootpass\n          MYSQL_DATABASE: grafana_tests\n          MYSQL_USER: grafana\n          MYSQL_PASSWORD: password\n        options: --health-cmd=\"mysqladmin ping --silent\" --health-interval=10s --health-timeout=5s --health-retries=3\n        ports:\n          - 3306:3306\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n      - name: Setup Go\n        uses: actions/setup-go@v5\n        with:\n          go-version-file: go.mod\n          cache: true\n      - name: Setup MySQL devenv\n        run: mysql -h 127.0.0.1 -P 3306 -u root -prootpass < devenv/docker/blocks/mysql_tests/setup.sql\n      - name: Run tests\n        env:\n          SHARD: ${{ matrix.shard }}\n        run: |\n          set -euo pipefail\n          readarray -t PACKAGES <<< \"$(./scripts/ci/backend-tests/pkgs-with-tests-named.sh -b TestIntegration | ./scripts/ci/backend-tests/shard.sh -N\"$SHARD\" -d-)\"\n          go test -p=1 -tags=mysql -timeout=5m -run '^TestIntegration' \"${PACKAGES[@]}\"\n  postgres:\n    strategy:\n      matrix:\n        shard: [\n          1/8, 2/8, 3/8, 4/8,\n          5/8, 6/8, 7/8, 8/8,\n        ]\n      fail-fast: false\n\n    name: Postgres (${{ matrix.shard }})\n    runs-on: ubuntu-latest-8-cores\n    permissions:\n      contents: read\n    env:\n      GRAFANA_TEST_DB: postgres\n      PGPASSWORD: grafanatest\n      POSTGRES_HOST: 127.0.0.1\n    services:\n      postgres:\n        image: postgres:12.3-alpine\n        env:\n          POSTGRES_USER: grafanatest\n          POSTGRES_PASSWORD: grafanatest\n          POSTGRES_DB: grafanatest\n        ports:\n          - 5432:5432\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n      - name: Setup Go\n        uses: actions/setup-go@v5\n        with:\n          go-version-file: go.mod\n          cache: true\n      - name: Setup Postgres devenv\n        run: psql -p 5432 -h 127.0.0.1 -U grafanatest -d grafanatest -f devenv/docker/blocks/postgres_tests/setup.sql\n      - name: Run tests\n        env:\n          SHARD: ${{ matrix.shard }}\n        run: |\n          set -euo pipefail\n          readarray -t PACKAGES <<< \"$(./scripts/ci/backend-tests/pkgs-with-tests-named.sh -b TestIntegration | ./scripts/ci/backend-tests/shard.sh -N\"$SHARD\" -d-)\"\n          go test -p=1 -tags=postgres -timeout=5m -run '^TestIntegration' \"${PACKAGES[@]}\"\n\n  # This is the job that is actually required by rulesets.\n  # We want to only require one job instead of all the individual tests and shards.\n  # Future work also allows us to start skipping some tests based on changed files.\n  required-backend-integration-tests:\n    needs:\n      - mysql\n      - postgres\n      - sqlite\n    # always() is the best function here.\n    # success() || failure() will skip this function if any need is also skipped.\n    # That means conditional test suites will fail the entire requirement check.\n    if: always()\n\n    name: All backend integration tests complete\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check test suites\n        env:\n          NEEDS: ${{ toJson(needs) }}\n        run: |\n          FAILURES=\"$(echo \"$NEEDS\" | jq 'with_entries(select(.value.result == \"failure\")) | map_values(.result)')\"\n          echo \"$FAILURES\"\n          if [ \"$(echo \"$FAILURES\" | jq '. | length')\" != \"0\" ]; then\n            exit 1\n          fi\n          echo \"All OK!\"\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "complex", "file_path": ".github/workflows/pr-test-integration.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.88, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Publish artifacts to bucket\non:\n  workflow_call:\n    inputs:\n      pattern:\n        description: |\n          (From actinos/download-artifact) Glob pattern of artifacts (instead of `name`)\n          Be careful when using this option; the contents of the root of each artifact are coalesced, so ensure that they do not collide.\n        type: string\n        required: false\n      name:\n        description: (From actinos/download-artifact) Name of the GitHub artifact to upload (Ignored if `pattern` is set)\n        type: string\n        required: false\n      bucket:\n        description: Name of the GCS bucket\n        type: string\n        required: true\n      bucket-path:\n        description: Path in the GCS bucket\n        type: string\n        required: false\n        default: \".\"\n      environment:\n        description: \"'prod' or 'dev'\"\n        type: string\n        required: false\n        default: dev\n      run-id:\n        type: string\n        required: true\n      service-account:\n        type: string\n        required: false\n        default: github-prerelease-writer@grafanalabs-workload-identity.iam.gserviceaccount.com\njobs:\n  publish:\n    runs-on: github-hosted-ubuntu-x64-small\n    name: Publish\n    permissions:\n      id-token: write\n    steps:\n      - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093\n        with:\n          name: ${{ inputs.name }}\n          pattern: ${{ inputs.pattern }}\n          run-id: ${{ inputs.run-id }}\n          path: ./artifact\n      - name: Log in to GCS\n        id: login-to-gcs\n        uses: grafana/shared-workflows/actions/login-to-gcs@main\n        with:\n          environment: ${{ inputs.environment }}\n          service_account: ${{ inputs.service-account }}\n      - name: Coalesce artifacts\n        run: |\n          mkdir out\n          find ./artifact -mindepth 2 -maxdepth 2 -exec cp -r {} out/ \\;\n          ls -al out\n      - name: Upload artifacts\n        uses: grafana/shared-workflows/actions/push-to-gcs@main\n        with:\n          bucket: ${{ inputs.bucket }}\n          environment: ${{ inputs.environment }}\n          parent: false\n          path: out\n          bucket_path: ${{ inputs.bucket-path }}\n          service_account: ${{ inputs.service-account }}\n          gzip: false\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/publish-artifact.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.875, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: \"publish-kinds-next\"\n\non:\n  push:\n    branches:\n      - \"main\"\n    paths:\n      - '**/*.cue'\n  workflow_dispatch:\n\npermissions: {}\n\njobs:\n  main:\n    if: github.repository == 'grafana/grafana'\n    runs-on: \"ubuntu-latest\"\n    permissions:\n      contents: read # cloning repo\n      actions: read # reading .github/workflows/ dir\n      id-token: write # reading vault secrets\n\n    steps:\n      - name: \"Checkout Grafana repo\"\n        uses: \"actions/checkout@v4\"\n        with:\n          fetch-depth: 0\n          persist-credentials: false\n\n      - name: \"Setup Go\"\n        uses: \"actions/setup-go@19bb51245e9c80abacb2e91cc42b33fa478b8639\"\n        with:\n          go-version-file: go.mod\n\n      - name: \"Verify kinds\"\n        run: go run .github/workflows/scripts/kinds/verify-kinds.go\n\n      - name: \"Get vault secrets\"\n        id: vault-secrets\n        uses: grafana/shared-workflows/actions/get-vault-secrets@main\n        with:\n          # Secrets placed in the ci/data/repo/grafana/grafana/delivery-bot-app path in Vault\n          repo_secrets: |\n            GRAFANA_DELIVERY_BOT_APP_PEM=delivery-bot-app:PRIVATE_KEY\n      - name: \"Generate token\"\n        id: generate_token\n        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a\n        with:\n          # App needs Actions: Read/Write for the grafana/security-patch-actions repo\n          app_id: ${{ vars.DELIVERY_BOT_APP_ID }}\n          private_key: ${{ env.GRAFANA_DELIVERY_BOT_APP_PEM }}\n\n      - name: \"Clone website-sync Action\"\n        run: \"git clone --single-branch --no-tags --depth 1 -b master https://grafana-delivery-bot:${{ steps.generate_token.outputs.token }}@github.com/grafana/website-sync ./.github/actions/website-sync\"\n\n      - name: \"Publish to kind registry (next)\"\n        uses: \"./.github/actions/website-sync\"\n        id: \"publish-next\"\n        with:\n          repository: \"grafana/kind-registry\"\n          branch: \"main\"\n          host: \"github.com\"\n          github_pat: \"grafana-delivery-bot:${{ steps.generate_token.outputs.token }}\"\n          source_folder: \".github/workflows/scripts/kinds/next\"\n          target_folder: \"grafana/next\"\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/publish-kinds-next.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.88, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: \"publish-kinds-release\"\n\non:\n  push:\n    branches:\n      - v[0-9]+.[0-9]+.x\n    tags:\n      - v[0-9]+.[0-9]+.[0-9]+\n    paths:\n      - '**/*.cue'\n  workflow_dispatch:\n\npermissions: {}\n\njobs:\n  main:\n    if: github.repository == 'grafana/grafana'\n    runs-on: \"ubuntu-latest\"\n    permissions:\n      contents: read # cloning repo\n      actions: read # reading .github/workflows/ dir\n      id-token: write # reading vault secrets\n\n    steps:\n      - name: \"Checkout Grafana repo\"\n        uses: \"actions/checkout@v4\"\n        with:\n          # required for the `grafana/grafana-github-actions/has-matching-release-tag` action to work\n          fetch-depth: 0\n          persist-credentials: false\n\n      - name: \"Setup Go\"\n        uses: \"actions/setup-go@19bb51245e9c80abacb2e91cc42b33fa478b8639\"\n        with:\n          go-version-file: go.mod\n\n      - name: \"Verify kinds\"\n        run: go run .github/workflows/scripts/kinds/verify-kinds.go\n\n      - name: \"Checkout Actions library\"\n        uses: \"actions/checkout@v4\"\n        with:\n          repository: \"grafana/grafana-github-actions\"\n          path: \"./actions\"\n          persist-credentials: false\n\n      - name: \"Install Actions from library\"\n        run: \"npm install --production --prefix ./actions\"\n\n      - name: \"Determine if there is a matching release tag\"\n        id: \"has-matching-release-tag\"\n        uses: \"./actions/has-matching-release-tag\"\n        with:\n          ref_name: \"${{ github.ref_name }}\"\n          release_tag_regexp: \"^v(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)$\"\n          release_branch_regexp: \"^v(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)\\\\.x$\"\n\n      - name: \"Get vault secrets\"\n        id: vault-secrets\n        uses: grafana/shared-workflows/actions/get-vault-secrets@main\n        with:\n          # Secrets placed in the ci/data/repo/grafana/grafana/delivery-bot-app path in Vault\n          repo_secrets: |\n            GRAFANA_DELIVERY_BOT_APP_PEM=delivery-bot-app:PRIVATE_KEY\n      - name: \"Generate token\"\n        id: generate_token\n        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a\n        with:\n          # App needs Actions: Read/Write for the grafana/security-patch-actions repo\n          app_id: ${{ vars.DELIVERY_BOT_APP_ID }}\n          private_key: ${{ env.GRAFANA_DELIVERY_BOT_APP_PEM }}\n\n      - name: \"Clone website-sync Action\"\n        if: \"steps.has-matching-release-tag.outputs.bool == 'true'\"\n        run: \"git clone --single-branch --no-tags --depth 1 -b master https://grafana-delivery-bot:${{ steps.generate_token.outputs.token }}@github.com/grafana/website-sync ./.github/actions/website-sync\"\n\n      - name: \"Publish to kind registry (release)\"\n        if: \"steps.has-matching-release-tag.outputs.bool == 'true'\"\n        uses: \"./.github/actions/website-sync\"\n        id: \"publish-release\"\n        with:\n          repository: \"grafana/kind-registry\"\n          branch: \"main\"\n          host: \"github.com\"\n          github_pat: \"grafana-delivery-bot:${{ steps.generate_token.outputs.token }}\"\n          source_folder: \".github/workflows/scripts/kinds/next\"\n          target_folder: \"grafana/${{ github.ref_name }}\"\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/publish-kinds-release.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.88, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: publish-technical-documentation-next\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - \"docs/sources/**\"\n  workflow_dispatch:\njobs:\n  sync:\n    if: github.repository == 'grafana/grafana'\n    permissions:\n      contents: read\n      id-token: write\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n      - uses: grafana/writers-toolkit/publish-technical-documentation@publish-technical-documentation/v1 # zizmor: ignore[unpinned-uses]\n        with:\n          website_directory: content/docs/grafana/next\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/publish-technical-documentation-next.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.875, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: publish-technical-documentation-release\n\non:\n  push:\n    branches:\n      - release-[0-9]+.[0-9]+.[0-9]+\n    tags:\n      - v[0-9]+.[0-9]+.[0-9]+\n    paths:\n      - \"docs/sources/**\"\n  workflow_dispatch:\njobs:\n  sync:\n    if: github.repository == 'grafana/grafana'\n    permissions:\n      contents: read\n      id-token: write\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n          persist-credentials: false\n      - uses: grafana/writers-toolkit/publish-technical-documentation-release@publish-technical-documentation-release/v2 # zizmor: ignore[unpinned-uses]\n        with:\n          release_tag_regexp: \"^v(0|[1-9][0-9]*)\\\\.(0|[1-9][0-9]*)\\\\.(0|[1-9][0-9]*)$\"\n          release_branch_regexp: \"^release-(0|[1-9][0-9]*)\\\\.(0|[1-9][0-9]*)\\\\.(0|[1-9][0-9]*)$\"\n          release_branch_with_patch_regexp: \"^release-(0|[1-9][0-9]*)\\\\.(0|[1-9][0-9]*)\\\\.(0|[1-9][0-9]*)$\"\n          website_directory: content/docs/grafana\n          version_suffix: \"\"\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/publish-technical-documentation-release.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8650000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Reject GitHub secrets\n\non:\n  pull_request:\n    types: [opened, synchronize, reopened]\n  push:\n    branches:\n      - main\n      - release-*\n\npermissions: {}\n\njobs:\n  reject-gh-secrets:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4\n        with:\n          persist-credentials: false\n\n      - name: Grep for secrets accesses\n        run: |\n          if grep -E '\\$\\{\\{\\s*secrets\\s*\\.\\s*[a-zA-Z0-9_\\-]+\\s*\\}\\}' .github/workflows/*.yml | grep -vF 'secrets.GITHUB_TOKEN' | grep -vF '# nolint:reject-gh-secrets'; then\n            echo \"Found secrets access in the codebase. Please remove it in favour of Vault secrets.\"\n            echo \"If you are sure this is correct, add '# nolint:reject-gh-secrets' to the end of the line. Be VERY careful with this.\"\n            exit 1\n          fi", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/reject-gh-secrets.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8700000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Build Release Packages\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - release-*.*.*\n      - main\n\npermissions:\n  contents: read\n\n# Builds the following artifacts:\n#\n# npm:grafana\n# storybook\n# targz:grafana:linux/amd64\n# targz:grafana:linux/arm64\n# targz:grafana:linux/arm/v6\n# targz:grafana:linux/arm/v7\n# deb:grafana:linux/amd64\n# deb:grafana:linux/arm64\n# deb:grafana:linux/arm/v6\n# deb:grafana:linux/arm/v7\n# rpm:grafana:linux/amd64:sign\n# rpm:grafana:linux/arm64:sign\n# docker:grafana:linux/amd64\n# docker:grafana:linux/arm64\n# docker:grafana:linux/arm/v7\n# docker:grafana:linux/amd64:ubuntu\n# docker:grafana:linux/arm64:ubuntu\n# docker:grafana:linux/arm/v7:ubuntu\n# targz:grafana:windows/amd64\n# targz:grafana:windows/arm64\n# targz:grafana:darwin/amd64\n# targz:grafana:darwin/arm64\n# zip:grafana:windows/amd64\n# msi:grafana:windows/amd64\njobs:\n  setup:\n    name: setup\n    runs-on: github-hosted-ubuntu-x64-small\n    if: github.repository == 'grafana/grafana'\n    outputs:\n      version: ${{ steps.output.outputs.version }}\n      grafana-commit: ${{ steps.output.outputs.grafana_commit }}\n    permissions:\n      contents: read\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n      - name: Set up version (Release Branches)\n        if: startsWith(github.ref_name, 'release-')\n        run: echo \"${REF_NAME#release-}\" > VERSION\n        env:\n          REF_NAME: ${{ github.ref_name }}\n      - name: Set up version (Non-release branches)\n        if: ${{ !startsWith(github.ref_name, 'release-') }}\n        run: jq -r .version package.json | sed -s \"s/pre/${BUILD_ID}/g\" > VERSION\n        env:\n          REF_NAME: ${{ github.ref_name }}\n          BUILD_ID: ${{ github.run_id }}\n      - id: output\n        run: |\n          echo \"version=$(cat VERSION)\" >> \"$GITHUB_OUTPUT\"\n          echo \"grafana_commit=$(git rev-parse HEAD)\" | tee -a \"$GITHUB_OUTPUT\"\n  # Triggers the same workflow in `grafana-enterprise` on the same ref\n  downstream:\n    runs-on: github-hosted-ubuntu-x64-small\n    needs: [setup]\n    permissions:\n      contents: read\n      id-token: write\n    name: Dispatch grafana-enterprise build\n    steps:\n      - id: vault-secrets\n        uses: grafana/shared-workflows/actions/get-vault-secrets@main\n        with:\n          repo_secrets: |\n            GRAFANA_DELIVERY_BOT_APP_PEM=delivery-bot-app:PRIVATE_KEY\n      - name: Generate token\n        id: generate_token\n        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a\n        with:\n          app_id: ${{ vars.DELIVERY_BOT_APP_ID }}\n          private_key: ${{ env.GRAFANA_DELIVERY_BOT_APP_PEM }}\n          repositories: '[\"grafana-enterprise\"]'\n          permissions: '{\"actions\": \"write\"}'\n      - uses: actions/github-script@v7\n        env:\n          REF: ${{ github.ref_name }}\n          VERSION: ${{ needs.setup.outputs.version }}\n          BUILD_ID: ${{ github.run_id }}\n          BUCKET: grafana-prerelease\n          GRAFANA_COMMIT: ${{ needs.setup.outputs.grafana-commit }}\n        with:\n          github-token: ${{ steps.generate_token.outputs.token }}\n          script: |\n            const {REF, VERSION, BUILD_ID, BUCKET, GRAFANA_COMMIT} = process.env;\n\n            await github.rest.actions.createWorkflowDispatch({\n                owner: 'grafana',\n                repo: 'grafana-enterprise',\n                workflow_id: 'release-build.yml',\n                ref:  REF,\n                inputs: {\n                  \"version\": VERSION,\n                  \"build-id\": String(BUILD_ID),\n                  \"bucket\": BUCKET,\n                  \"grafana-commit\": GRAFANA_COMMIT,\n                }\n            })\n\n  build:\n    runs-on: github-hosted-ubuntu-x64-large\n    needs: [setup]\n    permissions:\n      contents: read\n      id-token: write\n    name: ${{ needs.setup.outputs.version }} / ${{ matrix.name }}\n    strategy:\n      fail-fast: false\n      matrix:\n        # The artifacts in these lists are grouped by their os+arch because the\n        # build process can reuse the binaries for each artifact.\n        # The downside to this is that the frontend will be built for each one when it could be reused for all of them.\n        # This could be a future improvement.\n        include:\n          - name: linux-amd64\n            artifacts: targz:grafana:linux/amd64,deb:grafana:linux/amd64,rpm:grafana:linux/amd64,docker:grafana:linux/amd64,docker:grafana:linux/amd64:ubuntu,npm:grafana,storybook\n          - name: linux-arm64\n            artifacts: targz:grafana:linux/arm64,deb:grafana:linux/arm64,rpm:grafana:linux/arm64,docker:grafana:linux/arm64,docker:grafana:linux/arm64:ubuntu\n          - name: linux-s390x\n            artifacts: targz:grafana:linux/s390x,deb:grafana:linux/s390x,rpm:grafana:linux/s390x,docker:grafana:linux/s390x,docker:grafana:linux/s390x:ubuntu\n          - name: linux-armv7\n            artifacts: targz:grafana:linux/arm/v7,deb:grafana:linux/arm/v7,docker:grafana:linux/arm/v7,docker:grafana:linux/arm/v7:ubuntu\n          - name: linux-armv6\n            artifacts: targz:grafana:linux/arm/v6,deb:grafana:linux/arm/v6\n          - name: windows-amd64\n            artifacts: targz:grafana:windows/amd64,zip:grafana:windows/amd64,msi:grafana:windows/amd64\n          - name: windows-arm64\n            artifacts: targz:grafana:windows/arm64,zip:grafana:windows/arm64\n          - name: darwin-amd64\n            artifacts: targz:grafana:darwin/amd64\n          - name: darwin-arm64\n            artifacts: targz:grafana:darwin/arm64\n    steps:\n      - uses: grafana/shared-workflows/actions/dockerhub-login@main\n      - uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392\n        with:\n          image: docker.io/tonistiigi/binfmt:qemu-v7.0.0-28\n      - uses: ./.github/actions/build-package\n        id: build\n        with:\n          artifacts: ${{ matrix.artifacts }}\n          checksum: true\n          grafana-path: .\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          version: ${{ needs.setup.outputs.version }}\n          output: artifacts-${{ matrix.name }}.txt\n          verify: true\n          build-id: ${{ github.run_id }}\n      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02\n        with:\n          name: artifacts-list-${{ matrix.name }}\n          path: ${{ steps.build.outputs.file }}\n          retention-days: 1\n      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02\n        with:\n          name: artifacts-${{ matrix.name }}\n          path: ${{ steps.build.outputs.dist-dir }}\n          retention-days: 1\n  publish-artifacts:\n    name: Upload artifacts\n    uses: grafana/grafana/.github/workflows/publish-artifact.yml@main\n    permissions:\n      id-token: write\n    needs:\n      - setup\n      - build\n    with:\n      bucket: grafana-prerelease\n      pattern: artifacts-*\n      run-id: ${{ github.run_id }}\n      bucket-path: ${{ needs.setup.outputs.version }}_${{ github.run_id }}\n      environment: prod\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "complex", "file_path": ".github/workflows/release-build.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8975000000000002, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "# This workflow runs whenever the release PR is merged. It includes post-release communication processes like\n# posting to slack, the website, community forums, etc.\n# Only things that happen after a release is completed and all of the necessary code changes (like the changelog) are made.\nname: Post-release\non:\n  workflow_dispatch:\n    inputs:\n      dry_run:\n        required: false\n        default: true\n        type: boolean\n      version:\n        required: true\n      latest:\n        type: boolean\n        default: false\n  pull_request:\n    types:\n    - closed\n    branches:\n    - 'main'\n    - 'release-*.*.*'\n\npermissions:\n  contents: write\n  pull-requests: write\n  id-token: write\n\njobs:\n  setup:\n    if: ${{ github.event_name == 'workflow_dispatch' || (github.event.pull_request.merged == true && startsWith(github.head_ref, 'release/')) }}\n    name: Setup and establish latest\n    outputs:\n      version: ${{ steps.output.outputs.version }}\n      release_branch: ${{ steps.output.outputs.release_branch }}\n      dry_run: ${{ steps.output.outputs.dry_run }}\n      latest: ${{ steps.output.outputs.latest }}\n      private_key: ${{ steps.output.outputs.delivery_bot_pem }}\n      app_id: ${{ vars.DELIVERY_BOT_APP_ID }}\n    env:\n      HEAD_REF: ${{ github.head_ref }}\n      DRY_RUN: ${{ inputs.dry_run }}\n      LATEST: ${{ inputs.latest && '1' || '0' }}\n      VERSION: ${{ inputs.version }}\n    runs-on: ubuntu-latest\n    steps:\n    - if: ${{ github.event.pull_request.merged == true && startsWith(github.head_ref, 'release/') }}\n      run: |\n        {\n        echo \"VERSION=$(echo \"${HEAD_REF}\" | sed -e 's/release\\/.*\\//v/g')\"\n        echo \"DRY_RUN=${{ contains(github.event.pull_request.labels.*.name, 'release/dry-run') }}\"\n        echo \"LATEST=${{ contains(github.event.pull_request.labels.*.name, 'release/latest') && '1' || '0' }}\"\n        } >> \"$GITHUB_ENV\"\n    - id: output\n      run: |\n        echo \"dry_run: $DRY_RUN\"\n        echo \"latest: $LATEST\"\n        echo \"version: $VERSION\"\n\n        {\n          echo \"release_branch=$(echo \"$VERSION\" | sed -s 's/^v/release-/g')\"\n          echo \"dry_run=$DRY_RUN\"\n          echo \"latest=$LATEST\"\n          echo \"version=$VERSION\"\n        } >> \"$GITHUB_OUTPUT\"\n  create_next_release_branch_grafana:\n    name: Create next release branch (Grafana)\n    needs: setup\n    uses: grafana/grafana/.github/workflows/create-next-release-branch.yml@main\n    with:\n      ownerRepo: 'grafana/grafana'\n      source: ${{ needs.setup.outputs.release_branch }}\n  create_next_release_branch_enterprise:\n    name: Create next release branch (Grafana Enterprise)\n    needs: setup\n    uses: grafana/grafana/.github/workflows/create-next-release-branch.yml@main\n    with:\n      ownerRepo: 'grafana/grafana-enterprise'\n      source: ${{ needs.setup.outputs.release_branch }}\n  create_security_branch_grafana:\n    name: Create security branch (Grafana Security Mirror)\n    needs: setup\n    uses: ./.github/workflows/create-security-branch.yml\n    with:\n      release_branch: ${{ needs.setup.outputs.release_branch }}\n      security_branch_number: \"01\"\n      repository: grafana/grafana-security-mirror\n  create_security_branch_enterprise:\n    name: Create security branch (Enterprise)\n    needs: setup\n    uses: ./.github/workflows/create-security-branch.yml\n    with:\n      release_branch: ${{ needs.setup.outputs.release_branch }}\n      security_branch_number: \"01\"\n      repository: grafana/grafana-enterprise\n  migrate_prs_grafana:\n    needs:\n      - setup\n      - create_next_release_branch_grafana\n    uses: grafana/grafana/.github/workflows/migrate-prs.yml@main\n    with:\n      ownerRepo: 'grafana/grafana'\n      from: ${{ needs.setup.outputs.release_branch }}\n      to: ${{ needs.create_next_release_branch_grafana.outputs.branch }}\n  migrate_prs_enterprise:\n    needs:\n      - setup\n      - create_next_release_branch_enterprise\n    uses: grafana/grafana/.github/workflows/migrate-prs.yml@main\n    with:\n      ownerRepo: 'grafana/grafana-enterprise'\n      from: ${{ needs.setup.outputs.release_branch }}\n      to: ${{ needs.create_next_release_branch_enterprise.outputs.branch }}\n  post_changelog_on_forum:\n    needs: setup\n    uses: grafana/grafana/.github/workflows/community-release.yml@main\n    with:\n      version: ${{ needs.setup.outputs.version }}\n      dry_run: ${{ needs.setup.outputs.dry_run == 'true' }}\n  create_github_release:\n    # a github release requires a git tag\n    # The github-release action retrieves the changelog using the /repos/grafana/grafana/contents/CHANGELOG.md API\n    # endpoint.\n    needs: setup\n    uses: grafana/grafana/.github/workflows/github-release.yml@main\n    with:\n      version: ${{ needs.setup.outputs.version }}\n      dry_run: ${{ needs.setup.outputs.dry_run == 'true' }}\n      latest: ${{ needs.setup.outputs.latest }}\n  post_on_slack:\n    needs: setup\n    runs-on: ubuntu-latest\n    env:\n      DRY_RUN: ${{ needs.setup.outputs.dry_run }}\n      VERSION: ${{ needs.setup.outputs.version }}\n    steps:\n    - run: |\n        echo announce on slack that \"$VERSION\" has been released\n        echo dry run: \"$DRY_RUN\"\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "complex", "file_path": ".github/workflows/release-comms.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.88, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "# This workflow creates a new PR in Grafana which is triggered after a release is completed.\n# It should include all code changes that are needed after a release is done. This includes the changelog update and\n# version bumps, but could include more in the future.\n# Please refrain from including any processes that do not result in code changes in this workflow. Instead, they should\n# either be triggered in the release promotion process or in the release comms process (that is triggered by merging\n# this PR).\nname: Grafana Release PR\non:\n  workflow_dispatch:\n    inputs:\n      previous_version:\n        type: string\n        required: false\n        description: 'The release version (semver, git tag, branch or commit) to use for comparison'\n      version:\n        required: true\n        type: string\n        description: The version of Grafana that is being released (without the `v` prefix)`\n      target:\n        required: false\n        type: string\n        description: 'Unused: left here for backwards compatibility'\n      changelog:\n        required: false\n        type: boolean\n        default: true\n      bump:\n        required: false\n        type: boolean\n        default: true\n      dry_run:\n        required: false\n        default: false\n        type: boolean\n      latest:\n        required: false\n        default: false\n        type: boolean\n      release_date:\n        required: false\n        type: string\n        description: \"Release date in format YYYY-MM-DD\"\n\npermissions:\n  contents: read\n\njobs:\n  capture-date:\n    runs-on: ubuntu-latest\n    outputs:\n      release_date: ${{ steps.set_release_date.outputs.release_date }}\n    steps:\n      - name: compute_release_date\n        run: |\n          if [ -n \"$DATE\" ]; then\n            echo \"release_date=$DATE\" >> \"$GITHUB_ENV\"\n            exit 0\n          fi\n\n          echo \"Fetching workflow run creation date...\"\n          created_at=$(gh run view \"$GITHUB_RUN_ID\" --repo \"$GH_REPO\" --json createdAt -q .createdAt)\n          formatted_date=$(date -d \"$created_at\" +%Y-%m-%d)\n          echo \"release_date=$formatted_date\" >> \"$GITHUB_ENV\"\n        env:\n          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          GH_REPO: ${{ github.repository }}\n          DATE: ${{ inputs.release_date }}\n\n      - id: set_release_date\n        run: echo \"release_date=$release_date\" >> \"$GITHUB_OUTPUT\"\n\n  push-changelog-to-main:\n    needs: capture-date\n    permissions:\n      contents: write\n      id-token: write\n      pull-requests: write\n\n    name: Create PR to main to update the changelog\n    uses: ./.github/workflows/changelog.yml\n    concurrency:\n      group: grafana-release-pr-update-changelog-main\n      cancel-in-progress: false\n    with:\n      previous_version: ${{inputs.previous_version}}\n      version: ${{ inputs.version }}\n      latest: ${{ inputs.latest }}\n      dry_run: ${{ inputs.dry_run }}\n      target: main\n      work_branch: changelog/update-changelog-${{ needs.capture-date.outputs.release_date }}\n\n  create-prs:\n    permissions:\n      contents: write\n      id-token: write\n      pull-requests: write\n    name: Create Release PR\n    runs-on: ubuntu-latest\n    if: github.repository == 'grafana/grafana'\n    env:\n      VERSION: ${{ inputs.version }}\n      LATEST: ${{ inputs.latest }}\n      DRY_RUN: ${{ inputs.dry_run }}\n    steps:\n      - name: \"Get vault secrets\"\n        id: vault-secrets\n        uses: grafana/shared-workflows/actions/get-vault-secrets@main\n        with:\n          repo_secrets: |\n            GRAFANA_DELIVERY_BOT_APP_PEM=delivery-bot-app:PRIVATE_KEY\n      - name: Generate token\n        id: generate_changelog_token\n        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a\n        with:\n          app_id: ${{ vars.DELIVERY_BOT_APP_ID }}\n          private_key: ${{ env.GRAFANA_DELIVERY_BOT_APP_PEM }}\n          repositories: \"[\\\"grafana\\\", \\\"grafana-enterprise\\\"]\"\n          permissions: \"{\\\"contents\\\": \\\"write\\\", \\\"pull_requests\\\": \\\"write\\\", \\\"workflows\\\":\\\"write\\\"}\"\n      - run: echo \"RELEASE_BRANCH=release-${VERSION}\" >> \"$GITHUB_ENV\"\n      - name: Checkout Grafana\n        uses: actions/checkout@v4\n        with:\n          token: ${{ steps.generate_changelog_token.outputs.token }}\n          ref: ${{ env.RELEASE_BRANCH }}\n          fetch-tags: true\n          fetch-depth: 0\n      - name: Checkout Grafana (main)\n        uses: actions/checkout@v4\n        with:\n          token: ${{ steps.generate_changelog_token.outputs.token }}\n          ref: main\n          fetch-depth: '0'\n          path: .grafana-main\n\n      - name: Setup nodejs environment\n        uses: actions/setup-node@v4\n        with:\n          node-version-file: .nvmrc\n      - uses: actions/setup-go@v5\n        with:\n          go-version-file: go.mod\n      - name: Configure git user\n        run: |\n          git config --local user.name \"grafana-delivery-bot[bot]\"\n          git config --local user.email \"grafana-delivery-bot[bot]@users.noreply.github.com\"\n          git config --local --add --bool push.autoSetupRemote true\n\n      - name: Create branch\n        run: git checkout -b \"release/${{ github.run_number }}/$VERSION\"\n      - name: Generate changelog\n        id: changelog\n        if: ${{ inputs.changelog == true || inputs.changelog == 'true' }}\n        uses: ./.grafana-main/.github/actions/changelog\n        with:\n          previous: ${{inputs.previous_version}}\n          github_token: ${{ steps.generate_changelog_token.outputs.token }}\n          target: v${{ env.VERSION }}\n          output_file: changelog_items.md\n      - name: Patch CHANGELOG.md\n        if: ${{ inputs.changelog == true || inputs.changelog == 'true' }}\n        run: |\n          # Prepare CHANGELOG.md content with version delimiters\n          (\n            echo\n            echo \"# $VERSION ($(date '+%F'))\"\n            echo\n            cat changelog_items.md\n          ) > CHANGELOG.part\n\n          # Check if a version exists in the changelog\n          if grep -q \"<!-- $VERSION START\" CHANGELOG.md ; then\n            # Replace the content between START and END delimiters\n            echo \"Version $VERSION is found in the CHANGELOG.md, patching contents...\"\n            sed -i -e \"/$VERSION START/,/$VERSION END/{//!d;}\" \\\n                   -e \"/$VERSION START/r CHANGELOG.part\" CHANGELOG.md\n          else\n            # Prepend changelog part to the main changelog file\n            echo \"Version $VERSION not found in the CHANGELOG.md\"\n            (\n              echo \"<!-- $VERSION START -->\"\n              cat CHANGELOG.part\n              echo \"<!-- $VERSION END -->\"\n              cat CHANGELOG.md\n            ) > CHANGELOG.tmp\n            mv CHANGELOG.tmp CHANGELOG.md\n          fi\n\n          rm -f CHANGELOG.part changelog_items.md\n\n          git diff CHANGELOG.md\n      - name: \"Prettify CHANGELOG.md\"\n        if: ${{ inputs.changelog == true || inputs.changelog == 'true' }}\n        run: npx prettier --write CHANGELOG.md\n      - name: Commit CHANGELOG.md changes\n        if: ${{ inputs.changelog == true || inputs.changelog == 'true' }}\n        run: git add CHANGELOG.md && git commit --allow-empty -m \"Update changelog\" CHANGELOG.md\n      - name: Bump versions\n        if: ${{ inputs.bump == true || inputs.bump == 'true' }}\n        uses: dagger/dagger-for-github@e47aba410ef9bb9ed81a4d2a97df31061e5e842e\n        with:\n          verb: run\n          args: go run -C .grafana-main ./pkg/build/actions/bump-version -version=\"patch\"\n\n      - name: make gen-cue\n        shell: bash\n        run: make gen-cue\n      - name: Add package.json changes\n        if: ${{ inputs.bump == true || inputs.bump == 'true' }}\n        run: |\n          git add package.json lerna.json yarn.lock packages public\n          test -e e2e-playwright/test-plugins && git add e2e-playwright/test-plugins\n          git commit -m \"Update version to $VERSION\"\n\n      - name: Git push\n        run: git push\n      - name: Create PR\n        env:\n          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          DRY_RUN: ${{ inputs.dry_run }}\n        run: |\n          LATEST_FLAG=()\n          if [ \"$LATEST\" = \"true\" ]; then\n            LATEST_FLAG=(-l \"release/latest\")\n          fi\n          gh pr create \\\n            \"${LATEST_FLAG[@]}\" \\\n            -l \"no-changelog\" \\\n            --dry-run=\"$DRY_RUN\" \\\n            -B \"${RELEASE_BRANCH}\" \\\n            --title \"Release: $VERSION\" \\\n            --body \"These code changes must be merged after a release is complete\"\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "complex", "file_path": ".github/workflows/release-pr.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8225, "syntax_valid": true, "completeness_score": 0.6, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Relyance Compliance Inspection\non:\n  schedule:\n    - cron: '0 0 * * *' # Run daily at 00:00 UTC\n  workflow_dispatch: # Allow for manual trigger\n\njobs:\n  relyance-compliance-inspector:\n    permissions:\n      contents: read\n      id-token: write # Needed for Vault access\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n\n      - name: Get API key\n        id: vault-secrets\n        uses: grafana/shared-workflows/actions/get-vault-secrets@5d7e361bc7e0a183cde8afe9899fb7b596d2659b # get-vault-secrets-v1.2.0\n        with:\n          repo_secrets: |\n            API_KEY=relyance:API_KEY\n\n      - name: Run Relyance scan\n        env:\n          API_KEY: \"${{ fromJSON(steps.vault-secrets.outputs.secrets).API_KEY }}\"\n        run: |\n          docker pull gcr.io/relyance-ext/compliance_inspector:release && \\\n          docker run --rm -v ${{ github.workspace }}:/repo --env \"API_KEY=${{ env.API_KEY }}\" gcr.io/relyance-ext/compliance_inspector:release\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/relyance-scan.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: run-dashboard-search-e2e\n\non:\n  workflow_run:\n    workflows:\n      - trigger-dashboard-search-e2e\n    types:\n      - completed\n  workflow_dispatch:\n\nenv:\n  ARCH: linux-amd64\n\npermissions: {}\n\njobs:\n  setup:\n    runs-on: ubuntu-latest\n    if: github.event.pull_request.draft == false\n    outputs:\n      ini_files: ${{ steps.get_files.outputs.ini_files }}\n\n    permissions:\n      contents: read\n      id-token: write\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n      - name: Pin Go version to mod file\n        uses: actions/setup-go@v5\n        with:\n          go-version-file: 'go.mod'\n          cache: true\n      - run: go version\n      - uses: actions/setup-node@v4\n        with:\n          node-version-file: '.nvmrc'\n          cache: 'yarn'\n      - name: Cache Node Modules\n        id: cache-node-modules\n        uses: actions/cache@v4\n        with:\n          path: |\n            node_modules\n            /home/runner/.cache/Cypress\n          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}\n      - name: Install dependencies\n        if: steps.cache-node-modules.outputs.cache-hit != 'true'\n        run: yarn install --immutable\n      - name: Install Cypress dependencies\n        if: steps.cache-node-modules.outputs.cache-hit != 'true'\n        uses: cypress-io/github-action@108b8684ae52e735ff7891524cbffbcd4be5b19f\n        with:\n          runTests: false\n      - name: Cache Grafana Build and Dependencies\n        id: cache-grafana\n        uses: actions/cache@v4\n        with:\n          path: |\n            bin/\n            scripts/grafana-server/\n            tools/\n            public/\n            conf/\n            e2e-playwright/test-plugins/\n            devenv/\n          key: ${{ runner.os }}-grafana-${{ hashFiles('go.mod', 'package-lock.json', 'Makefile', 'pkg/storage/**/*.go', 'public/app/features/search/**/*.ts', 'public/app/features/search/**/*.tsx') }}\n      # only rebuild grafana if search files have changed ( or dependencies )\n      - name: Build Grafana (Runs Only If Not Cached)\n        if: steps.cache-grafana.outputs.cache-hit != 'true'\n        run: make build\n\n      - name: Get list of .ini files\n        id: get_files\n        env:\n          WORKSPACE: ${{ github.workspace }}\n        run: |\n          INI_FILES=\"$(find \"$WORKSPACE\"/e2e/dashboards-search-suite/ -type f -name '*.ini' | jq -R -s -c 'split(\"\\n\")[:-1]')\"\n          echo \"ini_files=$INI_FILES\" >> \"$GITHUB_OUTPUT\"\n        shell: bash\n\n  run_tests:\n      needs: setup\n      runs-on: ubuntu-latest\n      continue-on-error: true\n      if: github.event.pull_request.draft == false\n      strategy:\n        matrix:\n          ini_file: ${{ fromJson(needs.setup.outputs.ini_files) }}\n\n      permissions:\n        contents: read\n        id-token: write\n\n      steps:\n        - name: Checkout repository\n          uses: actions/checkout@v4\n          with:\n            persist-credentials: false\n        - name: Restore Cached Node Modules\n          uses: actions/cache@v4\n          with:\n            path: |\n              node_modules\n              /home/runner/.cache/Cypress\n            key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}\n\n        - name: Restore Cached Grafana Build and Dependencies\n          uses: actions/cache@v4\n          with:\n            path: |\n              bin/\n              scripts/grafana-server/\n              tools/\n              public/\n              conf/\n              e2e-playwright/test-plugins/\n              devenv/\n            key: ${{ runner.os }}-grafana-${{ hashFiles('go.mod', 'package-lock.json', 'Makefile', 'pkg/storage/**/*.go', 'public/app/features/search/**/*.ts', 'public/app/features/search/**/*.tsx') }}\n        - name: Set the step name\n          id: set_file_name\n          env:\n            INI_NAME: ${{ matrix.ini_file }}\n          run: |\n            FILE_NAME=\"$(basename \"$INI_NAME\" .ini)\"\n            echo \"FILE_NAME=$FILE_NAME\" >> \"$GITHUB_OUTPUT\"\n        - name: Run tests for ${{ steps.set_file_name.outputs.FILE_NAME }}\n          env:\n            INI_NAME: ${{ matrix.ini_file }}\n            WORKSPACE: ${{ github.workspace }}\n          run: |\n            cp -rf \"$INI_NAME\" \"$WORKSPACE\"/scripts/grafana-server/custom.ini\n            yarn e2e:dashboards-search || echo \"Test failed but marking as success since unified search is behind a feature flag and should not block PRs\"\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "complex", "file_path": ".github/workflows/run-dashboard-search-e2e.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8700000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Run dashboard schema v2 e2e\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - '**'\n\nenv:\n  ARCH: linux-amd64\n\njobs:\n  dashboard-schema-v2-e2e:\n    runs-on: ubuntu-latest\n    continue-on-error: true\n    if: github.event.pull_request.draft == false\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n      - name: Pin Go version to mod file\n        uses: actions/setup-go@v5\n        with:\n          go-version-file: 'go.mod'\n      - run: go version\n      - uses: actions/setup-node@v4\n        with:\n          node-version-file: '.nvmrc'\n          cache: 'yarn'\n      - name: Install dependencies\n        run: yarn install --immutable\n      - name: Build grafana\n        run: make build\n      - name: Install Cypress dependencies\n        uses: cypress-io/github-action@108b8684ae52e735ff7891524cbffbcd4be5b19f\n        with:\n          runTests: false\n      - name: Run dashboard scenes e2e\n        run: yarn e2e:schema-v2 || echo \"Test failed but marking as success since schema V2 is behind a feature flag and should not block PRs\"\n\n      - name: Always succeed # This is a workaround to make the job pass even if the previous step fails\n        if: failure()\n        run: exit 0\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/run-schema-v2-e2e.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8700000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Shellcheck\n\non:\n  push:\n    branches:\n      - main\n      - release-*\n  pull_request:\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\npermissions: {}\n\njobs:\n  shellcheck:\n    name: Shellcheck scripts\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read # clone the repository\n\n    steps:\n      - name: Clone repository\n        uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n      - name: Run Shellcheck\n        run: find scripts/ -name '*.sh' -type f -exec shellcheck -e SC1071 -e SC2162 '{}' +\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/shellcheck.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Add issues to Skye project board\non:\n  workflow_dispatch:\n    inputs:\n      manual_issue_number:\n        description: 'Issue to add to project'\n        required: false\n        type: number\n  # Ideally we could trigger this for PRs as well, but getting the secrets on that is tricky\n  # so we just won't bother for now\n  issues:\n    types: [opened]\n\npermissions:\n  contents: read\n  id-token: write\n\nenv:\n  ORGANIZATION: grafana\n  REPO: grafana\n  PROJECT_ID: \"PVT_kwDOAG3Mbc4AxfcI\" # Retrieved manually from GitHub GraphQL Explorer\n\nconcurrency:\n  group: skye-add-to-project-${{ github.event.number }}\n\njobs:\n  main:\n    if: github.repository == 'grafana/grafana'\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"Get vault secrets\"\n        id: vault-secrets\n        uses: grafana/shared-workflows/actions/get-vault-secrets@main # zizmor: ignore[unpinned-uses]\n        with:\n          # Vault secret paths:\n          # - ci/repo/grafana/grafana/grafana_pr_automation_app\n          # - ci/repo/grafana/grafana/frontend_platform_skye_usernames (comma separated list of usernames)\n          repo_secrets: |\n            GH_APP_ID=grafana_pr_automation_app:app_id\n            GH_APP_PEM=grafana_pr_automation_app:app_pem\n            ALLOWED_USERS=frontend_platform_skye_usernames:allowed_users\n\n      - name: Generate token\n        id: generate_token\n        uses: tibdex/github-app-token@b62528385c34dbc9f38e5f4225ac829252d1ea92\n        with:\n          app_id: ${{ env.GH_APP_ID }}\n          private_key: ${{ env.GH_APP_PEM }}\n\n      # We do the check in the Github Actions expression and then export it to the output\n      # to reuse it\n      - name: Check if user is allowed\n        id: check_user\n        env:\n          USER_IS_ALLOWED: ${{ contains(fromJSON(env.ALLOWED_USERS), github.event.sender.login) }}\n        run: |\n          echo \"user_allowed=${USER_IS_ALLOWED}\" >> \"$GITHUB_OUTPUT\"\n\n      # Convert the issue to a node ID for the GraphQL API\n      - name: Get node ID for item\n        if: steps.check_user.outputs.user_allowed == 'true'\n        id: get_node_id\n        uses: octokit/graphql-action@51bf543c240dcd14761320e2efc625dc32ec0d32\n        with:\n          query: |\n            query getNodeId($owner: String!, $repo: String!, $number: Int!) {\n              repository(owner: $owner, name: $repo) {\n                issueOrPullRequest(number: $number) {\n                  ... on Issue { id }\n                  ... on PullRequest { id }\n                }\n              }\n            }\n          variables: |\n            owner: ${{ env.ORGANIZATION }}\n            repo: ${{ env.REPO }}\n            number: ${{ github.event.number || github.event.inputs.manual_issue_number }}\n        env:\n          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}\n\n      # Finally, add the issue to the project board\n      - name: Add to project board\n        if: steps.check_user.outputs.user_allowed == 'true'\n        uses: octokit/graphql-action@51bf543c240dcd14761320e2efc625dc32ec0d32\n        with:\n          query: |\n            mutation addItem($projectid: ID!, $itemid: ID!) {\n              addProjectV2ItemById(input: {projectId: $projectid, contentId: $itemid}) {\n                item { id }\n              }\n            }\n          variables: |\n            projectid: ${{ env.PROJECT_ID }}\n            itemid: ${{ fromJSON(steps.get_node_id.outputs.data).repository.issueOrPullRequest.id }}\n        env:\n          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/skye-add-to-project.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8225, "syntax_valid": true, "completeness_score": 0.6, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: 'Close stale issues and PRs'\non:\n  schedule:\n    - cron: '30 1 * * *'\n\npermissions:\n  issues: write\n  pull-requests: write\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/stale@v9\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          operations-per-run: 750\n          # start from the oldest issues/PRs when performing stale operations\n          ascending: true\n          days-before-issue-stale: 365\n          days-before-issue-close: 30\n          stale-issue-label: stale\n          exempt-issue-labels: no stalebot,type/epic\n          stale-issue-message: >\n            This issue has been automatically marked as stale because it has not had\n            activity in the last year. It will be closed in 30 days if no further activity occurs. Please\n            feel free to leave a comment if you believe the issue is still relevant.\n            Thank you for your contributions!\n          close-issue-message: >\n            This issue has been automatically closed because it has not had any further\n            activity in the last 30 days. Thank you for your contributions!\n          days-before-pr-stale: 30\n          days-before-pr-close: 14\n          stale-pr-label: stale\n          exempt-pr-labels: no stalebot\n          stale-pr-message: >\n            This pull request has been automatically marked as stale because it has not had\n            activity in the last 30 days. It will be closed in 2 weeks if no further activity occurs. Please\n            feel free to give a status update or ping for review. Thank you for your contributions!\n          close-pr-message: >\n            This pull request has been automatically closed because it has not had any further\n            activity in the last 2 weeks. Thank you for your contributions!\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/stale.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8925000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Run Storybook a11y tests\non:\n  pull_request:\n  push:\n    branches:\n      - main\n      - release-*.*.*\n\npermissions: {}\n\njobs:\n  detect-changes:\n    name: Detect whether code changed\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    outputs:\n      changed: ${{ steps.detect-changes.outputs.frontend }}\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          persist-credentials: true # required to get more history in the changed-files action\n          fetch-depth: 2\n      - name: Detect changes\n        id: detect-changes\n        uses: ./.github/actions/change-detection\n        with:\n          self: .github/workflows/storybook-a11y.yml\n\n  test-storybook-a11y:\n    runs-on: ubuntu-latest-8-cores\n    permissions:\n      contents: read\n      id-token: write\n    needs: detect-changes\n    if: needs.detect-changes.outputs.changed == 'true'\n    name: \"Run Storybook a11y tests\"\n    steps:\n    - uses: actions/checkout@v4\n      with:\n        persist-credentials: false\n    - uses: actions/setup-node@v4\n      with:\n        node-version-file: '.nvmrc'\n    - run: yarn install --immutable --check-cache\n    - name: Install Playwright browsers\n      run: npx playwright install --with-deps\n    - name: Start Storybook\n      run: yarn storybook &\n    - name: Run tests\n      # the chromium browser used by Playwright sets its locale to \"en_US@posix\" by default\n      # this is not a valid language code, and causes some stories to fail to load!\n      # instead, we set the LANG environment variable to en_US to override this\n      # see https://github.com/microsoft/playwright/issues/34046\n      env:\n        LANG: en_US\n      run: npx wait-on --timeout 120000 http://localhost:9001 && yarn test:storybook\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/storybook-a11y.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8700000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Verify Storybook (Playwright)\n\non:\n  pull_request:\n    paths:\n      - 'packages/grafana-ui/**'\n      - 'e2e-playwright/storybook/**'\n      - '!docs/**'\n      - '!*.md'\n  push:\n    branches:\n      - main\n    paths:\n      - 'packages/grafana-ui/**'\n      - 'e2e-playwright/storybook/**'\n      - '!docs/**'\n      - '!*.md'\n\npermissions: {}\n\njobs:\n  verify-storybook:\n    name: Verify Storybook (Playwright)\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version-file: '.nvmrc'\n          cache: 'yarn'\n\n      - name: Install dependencies\n        run: yarn install --immutable\n\n      - name: Install Playwright browsers\n        run: npx playwright install --with-deps\n\n      - name: Run Storybook and E2E tests\n        run: yarn e2e:playwright:storybook\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/storybook-verification-playwright.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Verify Storybook\n\non:\n  pull_request:\n    paths:\n      - 'packages/grafana-ui/**'\n      - '!docs/**'\n      - '!*.md'\n  push:\n    branches:\n      - main\n    paths:\n      - 'packages/grafana-ui/**'\n      - '!docs/**'\n      - '!*.md'\n\npermissions: {}\n\njobs:\n  verify-storybook:\n    name: Verify Storybook\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version-file: '.nvmrc'\n          cache: 'yarn'\n\n      - name: Install dependencies\n        run: yarn install --immutable\n\n      - name: Run Storybook and E2E tests\n        uses: cypress-io/github-action@108b8684ae52e735ff7891524cbffbcd4be5b19f\n        with:\n          browser: chrome\n          start: yarn storybook --quiet\n          wait-on: 'http://localhost:9001'\n          wait-on-timeout: 60\n          command: yarn e2e:storybook\n          install: false\n        env:\n          HOST: localhost\n          PORT: 9001\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/storybook-verification.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Swagger generated code\n\non:\n  push:\n    branches:\n      - main\n      - release-*\n  pull_request:\n\npermissions: {}\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  verify:\n    name: Verify committed API specs match\n    runs-on: ubuntu-latest\n    if: ${{ github.repository == 'grafana/grafana' }}\n    permissions:\n      contents: read # clone the repository\n      id-token: write # required for Vault access\n    steps:\n      # Set up repository clone\n      - name: Checkout code\n        uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n      - name: Setup Go\n        uses: actions/setup-go@v5\n        with:\n          go-version-file: go.mod\n      - name: Setup Enterprise\n        if: ${{ github.event.pull_request.head.repo.fork == false }}\n        uses: ./.github/actions/setup-enterprise\n        with:\n          github-app-name: 'grafana-ci-bot'\n\n      - name: Generate Swagger specs\n        run: make swagger-clean && make openapi3-gen\n      - name: Check for changes\n        run: |\n          git add -f public/api-merged.json public/openapi3.json\n          if [ -z \"$(git diff --name-only --cached)\" ]; then\n            echo \"No changes detected in API specs.\"\n          else\n            echo \"Changes detected in API specs. Please review the changes.\"\n            echo \"You can regenerate them locally with: make swagger-clean && make openapi3-gen\"\n            exit 1\n          fi\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/swagger-gen.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.925, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "# Owned by grafana-delivery-squad\n# Intended to be dropped into the base repo, Ex: grafana/grafana\nname: Dispatch sync to mirror\nrun-name: dispatch-sync-to-mirror-${{ github.ref_name }}\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - \"main\"\n      - \"v*.*.*\"\n      - \"release-*\"\n\npermissions: {}\n\n# This is run after the pull request has been merged, so we'll run against the target branch\njobs:\n  dispatch-job:\n    runs-on: ubuntu-latest\n    permissions:\n      id-token: write\n      contents: read\n      actions: write\n    env:\n      REF_NAME: ${{ github.ref_name }}\n      REPO: ${{ github.repository }}\n      SHA: ${{ github.sha }}\n    steps:\n      - name: \"Get vault secrets\"\n        id: vault-secrets\n        uses: grafana/shared-workflows/actions/get-vault-secrets@main\n        with:\n          # Secrets placed in the ci/data/repo/grafana/grafana/delivery-bot-app path in Vault\n          repo_secrets: |\n            GRAFANA_DELIVERY_BOT_APP_PEM=delivery-bot-app:PRIVATE_KEY\n\n      - name: \"Generate token\"\n        id: generate_token\n        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a\n        with:\n          # App needs Actions: Read/Write for the grafana/security-patch-actions repo\n          app_id: ${{ vars.DELIVERY_BOT_APP_ID }}\n          private_key: ${{ env.GRAFANA_DELIVERY_BOT_APP_PEM }}\n\n      - uses: actions/github-script@v7\n        if: github.repository == 'grafana/grafana'\n        with:\n          github-token: ${{ steps.generate_token.outputs.token }}\n          script: |\n            const {REF_NAME, REPO, SHA} = process.env;\n\n            await github.rest.actions.createWorkflowDispatch({\n                owner: 'grafana',\n                repo: 'security-patch-actions',\n                workflow_id: 'mirror-branch-and-apply-patches-event.yml',\n                ref: 'main',\n                inputs: {\n                  src_ref: REF_NAME,\n                  src_repo: REPO,\n                  src_sha: SHA,\n                  dest_repo: REPO + \"-security-mirror\",\n                  patch_repo: REPO + \"-security-patches\"\n                }\n            })\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/sync-mirror-event.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8700000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: trigger-dashboard-search-e2e\n# triggers the dashboard search e2e tests which runs async \n# doesn't block prs, allows setting up notifications from grafana\non:\n  push:\n    branches:\n      - main\n    paths:\n      - public/app/features/search/**/*.ts\n      - public/app/features/search/**/*.tsx\n      - pkg/storage/**/*.go\n  pull_request:\n    branches:\n      - main\n    paths:\n      - public/app/features/search/**/*.ts\n      - public/app/features/search/**/*.tsx\n      - pkg/storage/**/*.go\nenv:\n  ARCH: linux-amd64\n\njobs:\n  trigger-search-e2e:\n    runs-on: ubuntu-latest\n    if: github.event.pull_request.draft == false\n    steps:\n      - name: Trigger Dashboard Search E2E\n        run: echo \"Triggered Dashboard Search e2e...\"", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/trigger-dashboard-search-e2e.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8200000000000001, "syntax_valid": true, "completeness_score": 0.8, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Trivy Scan\non:\n  pull_request:\n    # only run on PRs where go.mod/go.sum/etc have been updated\n    paths:\n      - go.*\n      - .github/workflows/trivy-scan.yml\n  push:\n    branches:\n      - main\n    paths:\n      - go.*\n      - .github/workflows/trivy-scan.yml\n\njobs:\n  trivy-scan:\n    runs-on: ubuntu-22.04\n    steps:\n    - uses: actions/checkout@v4\n      with:\n        persist-credentials: false\n    - name: Install Trivy\n      uses: aquasecurity/setup-trivy@9ea583eb67910444b1f64abf338bd2e105a0a93d\n      with:\n        version: v0.56.2\n        cache: true\n    - name: Download Trivy DB\n      run: |\n        trivy fs --no-progress --download-db-only --db-repository public.ecr.aws/aquasecurity/trivy-db\n    - name: Run Trivy vulnerability scanner (table output)\n      # Use the trivy binary rather than the aquasecurity/trivy-action action\n      # to avoid a few bugs.\n      #\n      # We scan the file system rather than building the Docker image to only scan\n      # our direct dependencies. The Docker images are still scanned by\n      # Vulnerability Observability:\n      #   - OSS: https://ops.grafana-ops.net/a/grafana-vulnerabilityobs-app/projects/sources/1\n      #   - Enterprise: https://ops.grafana-ops.net/a/grafana-vulnerabilityobs-app/projects/sources/12\n      #   (If these links are outdated, just go to the list and find the images manually.)\n      run: |\n        trivy fs \\\n          --scanners vuln \\\n          --format table \\\n          --exit-code 1 \\\n          --ignore-unfixed \\\n          --pkg-types os,library \\\n          --severity CRITICAL,HIGH \\\n          --ignorefile .trivyignore \\\n          --skip-files yarn.lock,package.json \\\n          --skip-db-update \\\n          .\n    - name: Run Trivy vulnerability scanner (SARIF)\n      # Use the trivy binary rather than the aquasecurity/trivy-action action\n      # to avoid a few bugs\n      run: |\n        trivy fs \\\n          --scanners vuln \\\n          --format sarif \\\n          --output trivy-results.sarif \\\n          --ignore-unfixed \\\n          --pkg-types os,library \\\n          --ignorefile .trivyignore \\\n          --skip-db-update \\\n          .\n      if: always() && github.repository == 'grafana/grafana'\n    - name: Upload Trivy scan results to GitHub Security tab\n      uses: github/codeql-action/upload-sarif@v3\n      with:\n        sarif_file: 'trivy-results.sarif'\n      if: always() && github.repository == 'grafana/grafana'\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/trivy-scan.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.79, "syntax_valid": true, "completeness_score": 0.6, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Trufflehog\n\non:\n  pull_request:\n    types:\n      - opened\n      - synchronize\n      - reopened\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\npermissions: {}\n\njobs:\n  trufflehog:\n    name: Run Trufflehog\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read # clone the repo\n\n    steps:\n      - name: Calculate fetch depth\n        id: fetch_depth\n        shell: bash\n        run: echo \"fetch_depth=$(( ${{ github.event.pull_request.commits }} + 2 ))\" >> \"$GITHUB_OUTPUT\"\n      - name: Checkout code\n        uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n          fetch-depth: ${{ steps.fetch_depth.outputs.fetch_depth }}\n          ref: ${{ github.event.pull_request.head.ref }}\n      - name: Trufflehog\n        uses: trufflesecurity/trufflehog@eafb8c5f6a06175141c27f17bcc17941853d0047 # v3.90.0\n        with:\n          extra_args: --results=verified\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/trufflehog.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8825000000000002, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Update `make docs` procedure\non:\n  schedule:\n    - cron: '0 7 * * 1-5'\n  workflow_dispatch:\njobs:\n  main:\n    if: github.repository == 'grafana/grafana'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n      - uses: grafana/writers-toolkit/update-make-docs@update-make-docs/v1 # zizmor: ignore[unpinned-uses]\n        with:\n          pr_options: >\n            --label 'backport v10.1.x'\n            --label 'backport v10.2.x'\n            --label 'backport v10.3.x'\n            --label no-changelog\n            --label type/docs\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/update-make-docs.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: \"verify-kinds\"\n\non:\n  pull_request:\n    branches: [ main ]\n    paths:\n      - '**/*.cue'\n\njobs:\n  main:\n    runs-on: \"ubuntu-latest\"\n    steps:\n      - name: \"Checkout Grafana repo\"\n        uses: \"actions/checkout@v4\"\n        with:\n          fetch-depth: 0\n          persist-credentials: false\n\n      - name: \"Setup Go\"\n        uses: \"actions/setup-go@19bb51245e9c80abacb2e91cc42b33fa478b8639\"\n        with:\n          go-version-file: go.mod\n\n      - name: \"Verify kinds\"\n        run: go run .github/workflows/scripts/kinds/verify-kinds.go\n        env:\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/verify-kinds.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "# This workflow depends on the ./actionlint-format.txt file. It is MIT licensed (thanks, rhysd!): https://github.com/rhysd/actionlint/blob/2ab3a12c7848f6c15faca9a92612ef4261d0e370/testdata/format/sarif_template.txt\nname: Actionlint\n\non:\n  push:\n    branches:\n      - main\n      - release-*\n  pull_request:\n    types:\n      - opened\n      - synchronize\n      - reopened\n\npermissions: {}\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}\n\njobs:\n  run-actionlint:\n    name: Lint GitHub Actions files\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read # to check out the code\n      actions: read # to read the workflow files\n      security-events: write # for uploading the SARIF report\n\n    env:\n      ACTIONLINT_VERSION: 1.7.7\n      # curl -LXGET https://github.com/rhysd/actionlint/releases/download/v${ACTIONLINT_VERSION}/actionlint_${ACTIONLINT_VERSION}_checksums.txt | grep linux_amd64\n      CHECKSUM: 023070a287cd8cccd71515fedc843f1985bf96c436b7effaecce67290e7e0757\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4\n        with:\n          persist-credentials: false\n\n      # GitHub Actions only runs x86_64. This will break if that assumption changes.\n      - name: Download Actionlint\n        run: |\n          set -euo pipefail\n          curl -OLXGET https://github.com/rhysd/actionlint/releases/download/v\"${ACTIONLINT_VERSION}\"/actionlint_\"${ACTIONLINT_VERSION}\"_linux_amd64.tar.gz\n          echo \"${CHECKSUM}  actionlint_${ACTIONLINT_VERSION}_linux_amd64.tar.gz\" | sha256sum -c -\n          tar xzf actionlint_\"${ACTIONLINT_VERSION}\"_linux_amd64.tar.gz\n          test -f actionlint\n          chmod +x actionlint\n\n      - name: Run Actionlint\n        run: ./actionlint -format \"$(cat .github/workflows/actionlint-format.txt)\" | tee results.sarif\n\n      - name: Upload to GitHub security events\n        if: success() || failure()\n        # If there are security problems, GitHub will automatically comment on the PR for us.\n        uses: github/codeql-action/upload-sarif@28deaeda66b76a05916b6923827895f2b14ab387 # v3.28.16\n        with:\n          sarif_file: results.sarif\n          category: actionlint\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/actionlint.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8700000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Add comment about adding a What's new note\non:\n  pull_request:\n    types: [labeled]\n\njobs:\n  add-comment:\n    if: ${{ ! github.event.pull_request.head.repo.fork && contains(github.event.pull_request.labels.*.name, 'add to what''s new') }}\n    runs-on: ubuntu-latest\n    permissions:\n      pull-requests: write\n    steps:\n      - uses: marocchino/sticky-pull-request-comment@773744901bac0e8cbb5a0dc842800d45e9b2b405 # v2.9.4\n        with:\n          message: |\n            Since you've added the `Add to what's new` label, consider drafting a [What's new note](https://admin.grafana.com/content-admin/#/collections/whats-new/new) for this feature.\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/add-to-whats-new.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "on:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 0 * * 1'\n\njobs:\n  gen-swagger:\n    name: Alerting Swagger spec generation cron job\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 2\n          persist-credentials: false\n      - name: Set go version\n        uses: actions/setup-go@19bb51245e9c80abacb2e91cc42b33fa478b8639\n        with:\n          go-version-file: go.mod\n      - name: Build swagger\n        run: |\n          make -C pkg/services/ngalert/api/tooling post.json api.json\n      - name: Open Pull Request\n        uses: peter-evans/create-pull-request@4e1beaa7521e8b457b572c090b25bd3db56bf1c5\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          commit-message: \"chore: update alerting swagger spec\"\n          title: \"Alerting: Update Swagger spec\"\n          body: |\n            This is an automated pull request to update the alerting swagger spec.\n            Please review and merge.\n          branch: update-alerting-swagger-spec\n          delete-branch: true\n          labels: 'area/alerting,type/docs,no-changelog'\n          team-reviewers: 'grafana/alerting-backend'\n          draft: false\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/alerting-swagger-gen.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.915, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Update Alerting Module\n\non:\n  workflow_dispatch:\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  update-grafana:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n      pull-requests: write\n      id-token: write\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4 # 4.2.2\n        with:\n          persist-credentials: false\n      - name: Check if update branch exists\n        run: |\n          if git ls-remote --heads origin update-alerting-module | grep -q 'update-alerting-module'; then\n            echo \"Branch 'update-alerting-module' already exists. There might be an open PR with Grafana updates.\"\n            echo \"Please review and merge/close the existing PR before running this workflow again.\"\n            exit 1\n          fi\n\n      - name: Setup Go\n        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # 5.3.0\n        with:\n          \"go-version-file\": \"go.mod\"\n\n      - name: Extract current commit hash of alerting module\n        id: current-commit\n        run: |\n          FROM_COMMIT=$(go list -m -json github.com/grafana/alerting | jq -r '.Version' | grep -oP '(?<=-)[a-f0-9]+$')\n          echo \"from_commit=$FROM_COMMIT\" >> \"$GITHUB_OUTPUT\"\n\n      - name: Get current branch name\n        id: current-branch-name\n        run: echo \"name=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}\" >> \"$GITHUB_OUTPUT\"\n\n      - name: Get latest commit\n        id: latest-commit\n        env:\n          GH_TOKEN: ${{ github.token }}\n          BRANCH: ${{ steps.current-branch-name.outputs.name }}\n        run: |\n          TO_COMMIT=\"$(gh api repos/grafana/alerting/commits/\"$BRANCH\" --jq '.sha')\"\n           if [ -z \"$TO_COMMIT\" ]; then\n            echo \"Branch $BRANCH not found in alerting repo, falling back to main branch\"\n            exit 1\n          fi\n          echo \"to_commit=$TO_COMMIT\" >> \"$GITHUB_OUTPUT\"\n\n      - name: Compare commit hashes\n        run: |\n          FROM_COMMIT=\"${{ steps.current-commit.outputs.from_commit }}\"\n          TO_COMMIT=\"${{ steps.latest-commit.outputs.to_commit }}\"\n          \n          # Compare just the length of the shorter hash\n          SHORT_TO_COMMIT=\"${TO_COMMIT:0:${#FROM_COMMIT}}\"\n          \n          if [ \"$FROM_COMMIT\" = \"$SHORT_TO_COMMIT\" ]; then\n            echo \"Current version ($FROM_COMMIT) is already at latest ($SHORT_TO_COMMIT). No update needed.\"\n            exit 0\n          fi\n          echo \"Updates available: $FROM_COMMIT -> $TO_COMMIT\"\n\n      - name: Check for commit history\n        id: check-commits\n        env:\n          GH_TOKEN: ${{ github.token }}\n          FROM_COMMIT: ${{ steps.current-commit.outputs.from_commit }}\n          TO_COMMIT: ${{ steps.latest-commit.outputs.to_commit }}\n        run: |\n          # get all commits that contains 'Alerting:' in the message\n          ALERTING_COMMITS=\"$(gh api repos/grafana/alerting/compare/\"$FROM_COMMIT\"...\"$TO_COMMIT\" \\\n            --jq '.commits[].commit.message | split(\"\\n\")[0]')\" || true\n\n          # Use printf instead of echo -e for better multiline handling\n          printf \"%s\\n\" \"$ALERTING_COMMITS\"\n\n          # make the list for markdown and replace PR numbers with links\n          ALERTING_COMMITS_FORMATTED=\"$(echo \"$ALERTING_COMMITS\" | while read -r line; do echo \"- $line\" | sed -E 's/\\(#([0-9]+)\\)/[#\\1](https:\\/\\/github.com\\/grafana\\/grafana\\/pull\\/\\1)/g'; done)\"\n\n          {\n            echo \"alerting_commits<<EOF\"\n            echo \"$ALERTING_COMMITS_FORMATTED\"\n            echo \"EOF\"\n          } >> \"$GITHUB_OUTPUT\"\n\n      - name: Update alerting module\n        env:\n          GOSUMDB: off\n          PINNED_COMMIT: ${{ steps.latest-commit.outputs.to_commit }}\n        run: |\n          go get github.com/grafana/alerting@\"$PINNED_COMMIT\"\n          make update-workspace\n\n      - id: get-secrets\n        uses: grafana/shared-workflows/actions/get-vault-secrets@main # zizmor: ignore[unpinned-uses]\n        with:\n          repo_secrets: |\n            GITHUB_APP_ID=alerting-team:app-id\n            GITHUB_APP_PRIVATE_KEY=alerting-team:private-key\n\n      - name: \"Generate token\"\n        id: generate_token\n        uses: actions/create-github-app-token@0d564482f06ca65fa9e77e2510873638c82206f2 # 1.11.5\n        with:\n          app-id: ${{ env.GITHUB_APP_ID }}\n          private-key: ${{ env.GITHUB_APP_PRIVATE_KEY }}\n\n      - name: Create Pull Request\n        uses: peter-evans/create-pull-request@67ccf781d68cd99b580ae25a5c18a1cc84ffff1f # 7.0.6\n        id: create-pr\n        with:\n          token: '${{ steps.generate_token.outputs.token }}'\n          title:  'Alerting: Update alerting module to ${{ steps.latest-commit.outputs.to_commit }}'\n          branch: alerting/update-alerting-module\n          delete-branch: true\n          body: |\n            Updates Grafana Alerting module to latest version.\n\n            Compare changes: https://github.com/grafana/alerting/compare/${{ steps.current-commit.outputs.from_commit }}...${{ steps.latest-commit.outputs.to_commit }}\n            <details>\n            <summary>Commits</summary>\n\n            ${{ steps.check-commits.outputs.alerting_commits }}\n\n            </details>\n\n            Created by: [GitHub Action Job](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n      - name: Add PR URL to Summary\n        if: steps.create-pr.outputs.pull-request-url != ''\n        env:\n          PR_URL: ${{ steps.create-pr.outputs.pull-request-url }}\n        run: |\n          {\n            echo \"## Pull Request Created\"\n            echo \"🔗 [View Pull Request]($PR_URL)\"\n          } >> \"$GITHUB_STEP_SUMMARY\"\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "complex", "file_path": ".github/workflows/alerting-update-module.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.845, "syntax_valid": true, "completeness_score": 0.6, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Analytics Events Report\n\non:\n  workflow_dispatch:\n\npermissions: {}\n\njobs:\n  generate-report:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version-file: '.nvmrc'\n          cache: 'yarn'\n\n      - name: Install dependencies\n        run: yarn install --frozen-lockfile\n\n      - name: Generate analytics report\n        run: yarn analytics-report\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/analytics-events-report.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Auto-milestone\non:\n  pull_request_target:\n    types:\n      - opened\n      - reopened\n      - closed\n      - ready_for_review\n\npermissions:\n  pull-requests: write\n  contents: write\n\n# Note: this action runs with write permissions on GITHUB_TOKEN even from forks\n# so it must not run untrusted code (such as checking out the pull request)\njobs:\n  main:\n    runs-on: ubuntu-latest\n    if: github.event.pull_request.draft == false\n    steps:\n      # Note: Github will not trigger other actions from this because it uses\n      # the GITHUB_TOKEN token\n      - name: Run auto-milestone\n        uses: grafana/grafana-github-actions-go/auto-milestone@d4c452f92ed826d515dccf1f62923e537953acd8 # main\n        with:\n          pr: ${{ github.event.pull_request.number }}\n          token: ${{ secrets.GITHUB_TOKEN }}\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/auto-milestone.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8825000000000002, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Backend Code Checks\n\non:\n  pull_request:\n    paths-ignore:\n      - '*.md'\n      - 'docs/**'\n      - 'latest.json'\n  push:\n    branches:\n      - main\n    paths-ignore:\n      - '*.md'\n      - 'docs/**'\n      - 'latest.json'\n\npermissions:\n  contents: read\n  id-token: write\n\njobs:\n  validate-configs:\n    name: Validate Backend Configs\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n      - name: Setup Go\n        uses: actions/setup-go@v5\n        with:\n          # Explicitly set Go version to 1.24.1 to ensure consistent OpenAPI spec generation\n          # The crypto/x509 package has additional fields in Go 1.24.1 that affect the generated specs\n          # This ensures the GHAs environment matches what we use in the Drone pipeline\n          go-version: 1.24.1\n          cache: true\n\n      - name: Verify code generation\n        run: |\n          CODEGEN_VERIFY=1 make gen-cue\n          CODEGEN_VERIFY=1 make gen-jsonnet\n      \n      - name: Validate go.mod\n        run: go run scripts/modowners/modowners.go check go.mod\n\n      # Enterprise setup is needed for complete OpenAPI spec generation\n      # We only do this for internal PRs\n      - name: Setup Grafana Enterprise\n        if: github.event.pull_request.head.repo.fork == false\n        uses: ./.github/actions/setup-enterprise\n        \n      - name: Generate and Validate OpenAPI Specs\n        run: |\n          # For PRs from forks, we'll just run the basic swagger-gen without validation\n          if [[ \"${{ github.event_name }}\" == \"pull_request\" && \"${{ github.event.pull_request.head.repo.fork }}\" == \"true\" ]]; then\n            echo \"PR is from a fork, skipping enterprise-based validation\"\n            make swagger-gen\n            exit 0\n          fi\n          \n          # Clean and regenerate OpenAPI specs\n          make swagger-clean && make openapi3-gen\n          \n          # Check if the generated specs differ from what's in the repository\n          for f in public/api-merged.json public/openapi3.json; do git add $f; done\n          if [ -z \"$(git diff --name-only --cached)\" ]; then\n            echo \"OpenAPI specs are up to date!\"\n          else\n            echo \"OpenAPI specs are OUT OF DATE!\"\n            git diff --cached\n            echo \"Please ensure the branch is up-to-date, then regenerate the specification by running make swagger-clean && make openapi3-gen\"\n            exit 1\n          fi\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/backend-code-checks.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.9025000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Backend Unit Tests\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n      - release-*.*.*\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}\n\npermissions: {}\n\njobs:\n  detect-changes:\n    name: Detect whether code changed\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    outputs:\n      changed: ${{ steps.detect-changes.outputs.backend }}\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          persist-credentials: true # required to get more history in the changed-files action\n          fetch-depth: 2\n      - name: Detect changes\n        id: detect-changes\n        uses: ./.github/actions/change-detection\n        with:\n          self: .github/workflows/backend-unit-tests.yml\n\n  grafana:\n    # Run this workflow only for PRs from forks\n    # the `pr-backend-unit-tests-enterprise` workflow will run instead\n    needs: detect-changes\n    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == true && needs.detect-changes.outputs.changed == 'true'\n    strategy:\n      matrix:\n        shard: [\n          1/8, 2/8, 3/8, 4/8,\n          5/8, 6/8, 7/8, 8/8,\n        ]\n      fail-fast: false\n\n    name: Grafana (${{ matrix.shard }})\n    runs-on: ubuntu-latest-8-cores\n    continue-on-error: true\n    permissions:\n      contents: read\n      id-token: write\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n      - name: Setup Go\n        uses: actions/setup-go@v5\n        with:\n          go-version-file: go.mod\n      - name: Run unit tests\n        env:\n          SHARD: ${{ matrix.shard }}\n        run: |\n          set -euo pipefail\n          readarray -t PACKAGES <<< \"$(./scripts/ci/backend-tests/shard.sh -N\"$SHARD\")\"\n          go test -short -timeout=30m \"${PACKAGES[@]}\"\n\n  grafana-enterprise:\n    # Run this workflow for non-PR events (like pushes to `main` or `release-*`) OR for internal PRs (PRs not from forks)\n    needs: detect-changes\n    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false && needs.detect-changes.outputs.changed == 'true'\n    strategy:\n      matrix:\n        shard: [\n          1/8, 2/8, 3/8, 4/8,\n          5/8, 6/8, 7/8, 8/8,\n        ]\n      fail-fast: false\n\n    name: Grafana Enterprise (${{ matrix.shard }})\n    runs-on: ubuntu-latest-8-cores\n    permissions:\n      contents: read\n      id-token: write\n    steps:\n      # Set up repository clone\n      - name: Checkout code\n        uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n      - name: Setup Go\n        uses: actions/setup-go@v5\n        with:\n          go-version-file: go.mod\n      - name: Setup Enterprise\n        uses: ./.github/actions/setup-enterprise\n        with:\n          github-app-name: 'grafana-ci-bot'\n\n      # Prepare what we need to upload test results\n      - run: echo \"RESULTS_FILE=$(date --rfc-3339=seconds --utc | sed -s 's/ /-/g')_${SHARD/\\//_}.xml\" >> \"$GITHUB_ENV\"\n        env:\n          SHARD: ${{ matrix.shard }}\n      - run: go install github.com/jstemmer/go-junit-report/v2@85bf4716ac1f025f2925510a9f5e9f5bb347c009\n\n      # Run code\n      - name: Run unit tests\n        env:\n          SHARD: ${{ matrix.shard }}\n        run: |\n          set -euo pipefail\n\n          readarray -t PACKAGES <<< \"$(./scripts/ci/backend-tests/shard.sh -N\"$SHARD\")\"\n          # This tee requires pipefail to be set, otherwise `go test`'s exit code is thrown away.\n          # That means having no `-o pipefail` => failing tests => exit code 0, which is wrong.\n          go test -short -timeout=30m \"${PACKAGES[@]}\"\n\n  # This is the job that is actually required by rulesets.\n  # We need to require EITHER the OSS or the Enterprise job to pass.\n  # However, if one is skipped, GitHub won't flat-map the shards,\n  #   so they won't be accepted by a ruleset.\n  required-backend-unit-tests:\n    needs:\n      - grafana\n      - grafana-enterprise\n    # always() is the best function here.\n    # success() || failure() will skip this function if any need is also skipped.\n    # That means conditional test suites will fail the entire requirement check.\n    if: always()\n\n    name: All backend unit tests complete\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check test suites\n        env:\n          NEEDS: ${{ toJson(needs) }}\n        run: |\n          FAILURES=\"$(echo \"$NEEDS\" | jq 'with_entries(select(.value.result == \"failure\")) | map_values(.result)')\"\n          echo \"$FAILURES\"\n          if [ \"$(echo \"$FAILURES\" | jq '. | length')\" != \"0\" ]; then\n            exit 1\n          fi\n          echo \"All OK!\"\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "complex", "file_path": ".github/workflows/backend-unit-tests.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.88, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "# We need secrets to backport, but they're not available for actions ran by forks.\n# So this workflow is used as a 'trigger', which the backport-workflow.yml will with\n# via workflow_run\n\nname: Backport (trigger)\non:\n  pull_request:\n    types:\n      - closed\n      - labeled\n\npermissions: {}\n\njobs:\n  trigger:\n    # Only run this job if the PR has been merged and has a label containing \"backport v\"\n    if: |\n      github.repository == 'grafana/grafana' &&\n      github.event.pull_request.merged == true &&\n      contains(join(github.event.pull_request.labels.*.name, ','), 'backport v')\n    runs-on: ubuntu-latest\n    steps:\n      # TODO: save this as job summary instead?\n      - name: Trigger\n        run: |\n          echo \"Triggering workflow\"\n          echo \"See https://github.com/${{ github.repository }}/actions/workflows/workflow_run.yml for progress\"\n\n      # Create a JSON artifact with details of this PR to pass to the backport workflow.\n      # The { action: 'labelled', label: 'backport-1.23.x' } can only be determined from this event payload,\n      # and is needed to do a backport after a PR has been merged\n      #\n      # Important that we don't run *anything* from the PR which could modify the backport_data.json file\n      - name: Create action data\n        run: |\n          jq '{\n            action: .action,\n            label: .label.name,\n            pr_number: .number,\n          }' \"$GITHUB_EVENT_PATH\" > /tmp/pr_info.json\n\n      - name: Upload artifact\n        uses: actions/upload-artifact@v4\n        with:\n          name: pr_info\n          path: /tmp/pr_info.json\n          retention-days: 1\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/backport-trigger.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.81, "syntax_valid": true, "completeness_score": 0.7, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "# Runs the actual backport, after being triggered by the backport-trigger.yml workflow.\n\nname: Backport (workflow)\nrun-name: \"Backport for ${{ github.event.workflow_run.head_branch }} #${{ github.event.workflow_run.run_number }}\"\non:\n  workflow_run: # zizmor: ignore[dangerous-triggers] backport-trigger.yml does not run any user code\n    workflows: [\"Backport (trigger)\"]\n    types:\n      - completed\n\npermissions: {}\n\njobs:\n  backport:\n    # Only run this job if the triggering workflow was not skipped (and on grafana repo)\n    if: github.repository == 'grafana/grafana' && github.event.workflow_run.conclusion == 'success'\n    runs-on: ubuntu-latest\n    permissions:\n      id-token: write\n      actions: read\n    steps:\n      - name: Get vault secrets\n        id: secrets\n        uses: grafana/shared-workflows/actions/get-vault-secrets@main\n        with:\n          export_env: false\n          # Secrets placed in the ci/data/repo/grafana/grafana/delivery-bot-app path in Vault\n          repo_secrets: |\n            APP_PEM=delivery-bot-app:PRIVATE_KEY\n\n      - name: Generate token\n        id: generate_token\n        uses: tibdex/github-app-token@b62528385c34dbc9f38e5f4225ac829252d1ea92\n        with:\n          app_id: ${{ vars.DELIVERY_BOT_APP_ID }}\n          private_key: ${{ fromJSON(steps.secrets.outputs.secrets).APP_PEM }}\n\n      - name: Download PR info artifact\n        uses: actions/download-artifact@v4\n        id: download-pr-info\n        with:\n          github-token: ${{ github.token }}\n          run-id: ${{ github.event.workflow_run.id }}\n          name: pr_info\n\n      - name: Get PR info\n        id: pr-info\n        env:\n          PR_INFO_FILE: ${{ steps.download-pr-info.outputs.download-path }}/pr_info.json\n        # jq-magic to convert the JSON object into a list of key=value pairs for $GITHUB_OUTPUT\n        run:\n          jq -r 'to_entries[] | select(.value | type != \"object\") | \"\\(.key)=\\(.value)\"' \"$PR_INFO_FILE\" >> \"$GITHUB_OUTPUT\"\n\n      - name: Print PR info\n        env:\n          PR_ACTION: ${{ steps.pr-info.outputs.action }}\n          PR_LABEL: ${{ steps.pr-info.outputs.label }}\n          PR_NUMBER: ${{ steps.pr-info.outputs.pr_number }}\n        run: |\n          echo \"PR action: $PR_ACTION\"\n          echo \"PR label: $PR_LABEL\"\n          echo \"PR number: $PR_NUMBER\"\n\n      - name: Checkout Grafana\n        uses: actions/checkout@v4\n        with:\n          ref: ${{ github.event.repository.default_branch }}\n          fetch-depth: 2\n          fetch-tags: false\n          token: ${{ steps.generate_token.outputs.token }}\n          persist-credentials: true\n\n      - name: Configure git user\n        run: |\n          git config --local user.name \"github-actions[bot]\"\n          git config --local user.email \"github-actions[bot]@users.noreply.github.com\"\n          git config --local --add --bool push.autoSetupRemote true\n\n      - name: Run backport\n        uses: grafana/grafana-github-actions-go/backport@dev\n        with:\n          token: ${{ steps.generate_token.outputs.token }}\n          # If triggered by being labelled, only backport that label.\n          # Otherwise, the action will backport all labels.\n          pr_label: ${{ steps.pr-info.outputs.action == 'labeled' && steps.pr-info.outputs.label || '' }}\n          pr_number: ${{ steps.pr-info.outputs.pr_number }}\n          repo_owner: ${{ github.repository_owner }}\n          repo_name: ${{ github.event.repository.name }}\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/backport-workflow.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8700000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Bump version\non:\n  workflow_dispatch:\n    inputs:\n      version:\n        description: 'Needs to match, exactly, the name of a milestone. The version to be released please respect: major.minor.patch, major.minor.patch-preview or major.minor.patch-preview<number> format. example: 7.4.3, 7.4.3-preview or 7.4.3-preview1'\n        required: true\n      push:\n        default: true\n        required: false\n      dry_run:\n        default: false\n        required: false\n\npermissions:\n  contents: write\n  pull-requests: write\n\njobs:\n  bump-version:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Grafana\n        uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n      - name: Update package.json versions\n        uses: ./pkg/build/actions/bump-version\n        with:\n          version: ${{ inputs.version }}\n      - if: ${{ inputs.push }}\n        name: Push & Create PR\n        env:\n          VERSION: ${{ inputs.version }}\n          DRY_RUN: ${{ inputs.dry_run }}\n          REF_NAME: ${{ github.ref_name }}\n          RUN_ID: ${{ github.run_id }}\n          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          git config --local user.name \"github-actions[bot]\"\n          git config --local user.email \"github-actions[bot]@users.noreply.github.com\"\n          git config --local --add --bool push.autoSetupRemote true\n          git checkout -b \"bump-version/${RUN_ID}/${VERSION}\"\n          git add .\n          git commit -m \"bump version ${VERSION}\"\n          git push\n          gh pr create --dry-run=\"$DRY_RUN\" -l \"type/ci\" -l \"no-changelog\" -B \"$REF_NAME\" --title \"Release: Bump version to ${VERSION}\" --body \"Updated version to ${VERSION}\"\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/bump-version.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.9200000000000002, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Generate changelog\non:\n  workflow_call:\n    inputs:\n      previous_version:\n        type: string\n        required: false\n        description: 'The release version (semver, git tag, branch or commit) to use for comparison'\n      version:\n        type: string\n        required: true\n        description: 'Target release version (semver, git tag, branch or commit)'\n      target:\n        required: true\n        type: string\n        description: 'The base branch that these changes are being merged into'\n      dry_run:\n        required: false\n        default: false\n        type: boolean\n      latest:\n        required: false\n        default: false\n        type: boolean\n      work_branch:\n        required: false\n        type: string\n        description: \"Use specific branch for changelog\"\n\n  workflow_dispatch:\n    inputs:\n      previous_version:\n        type: string\n        required: false\n        description: 'The release version (semver, git tag, branch or commit) to use for comparison'\n      version:\n        type: string\n        required: true\n        description: 'Target release version (semver, git tag, branch or commit)'\n      target:\n        required: true\n        type: string\n        description: 'The base branch that these changes are being merged into'\n      dry_run:\n        required: false\n        default: false\n        type: boolean\n      latest:\n        required: false\n        default: false\n        type: boolean\n      work_branch:\n        required: false\n        type: string\n        description: \"Use specific branch for changelog\"\n\npermissions: {}\n\njobs:\n  main:\n    env:\n      RUN_ID: ${{ github.run_id }}\n      VERSION: ${{ inputs.version }}\n      PREVIOUS_VERISON: ${{ inputs.previous_version }}\n      TARGET: ${{ inputs.target }}\n      DRY_RUN: ${{ inputs.dry_run }}\n    runs-on: ubuntu-latest\n    permissions:\n      id-token: write\n      contents: write\n      pull-requests: write\n    steps:\n      - name: \"Get vault secrets\"\n        id: vault-secrets\n        uses: grafana/shared-workflows/actions/get-vault-secrets@main\n        with:\n          # Secrets placed in the ci/data/repo/grafana/grafana/delivery-bot-app path in Vault\n          repo_secrets: |\n            GRAFANA_DELIVERY_BOT_APP_PEM=delivery-bot-app:PRIVATE_KEY\n      - name: \"Generate token\"\n        id: generate_token\n        uses: tibdex/github-app-token@b62528385c34dbc9f38e5f4225ac829252d1ea92\n        with:\n          app_id: ${{ vars.DELIVERY_BOT_APP_ID }}\n          private_key: ${{ env.GRAFANA_DELIVERY_BOT_APP_PEM }}\n      - name: \"Checkout Grafana repo\"\n        uses: \"actions/checkout@v4\"\n        with:\n          ref: main\n          sparse-checkout: |\n            .github/workflows\n            .github/actions\n            CHANGELOG.md\n            .nvmrc\n            .prettierignore\n            .prettierrc.js\n          fetch-depth: 0\n          fetch-tags: true\n      - name: Setup nodejs environment\n        uses: actions/setup-node@v4\n        with:\n          node-version-file: .nvmrc\n      - name: \"Configure git user\"\n        run: |\n          git config --local user.name \"github-actions[bot]\"\n          git config --local user.email \"github-actions[bot]@users.noreply.github.com\"\n          git config --local --add --bool push.autoSetupRemote true\n      - name: \"Create branch\"\n        run: |\n          if [[ \"$WORK_BRANCH\" == '' ]]; then\n            git switch -c \"changelog/${RUN_ID}/${VERSION}\"\n            exit 0\n          fi\n\n          # Checkout the changelog branch if exists, otherwise create a new one\n          if git show-ref --verify --quiet \"refs/remotes/origin/$WORK_BRANCH\"; then\n            git switch --track \"origin/$WORK_BRANCH\"\n          else\n            git switch -c \"$WORK_BRANCH\"\n          fi\n        env:\n          WORK_BRANCH: ${{ inputs.work_branch }}\n      - name: \"Generate changelog\"\n        id: changelog\n        uses: ./.github/actions/changelog\n        with:\n          previous: ${{ inputs.previous_version }}\n          github_token: ${{ steps.generate_token.outputs.token }}\n          target: v${{ inputs.version }}\n          output_file: changelog_items.md\n      - name: \"Patch CHANGELOG.md\"\n        run: |\n          # Prepare CHANGELOG.md content with version delimiters\n          (\n            echo\n            echo \"# ${VERSION} ($(date '+%F'))\"\n            echo\n            cat changelog_items.md\n          ) > CHANGELOG.part\n\n          # Check if a version exists in the changelog\n          if grep -q \"<!-- ${VERSION} START\" CHANGELOG.md ; then\n            # Replace the content between START and END delimiters\n            echo \"Version ${VERSION} is found in the CHANGELOG.md, patching contents...\"\n            sed -i -e \"/${VERSION} START/,/${VERSION} END/{//!d;}\" \\\n                   -e \"/${VERSION} START/r CHANGELOG.part\" CHANGELOG.md\n          else\n            # Prepend changelog part to the main changelog file\n            echo \"Version $VERSION not found in the CHANGELOG.md\"\n            (\n              echo \"<!-- ${VERSION} START -->\"\n              cat CHANGELOG.part\n              echo \"<!-- ${VERSION} END -->\"\n              cat CHANGELOG.md\n            ) > CHANGELOG.tmp\n            mv CHANGELOG.tmp CHANGELOG.md\n          fi\n\n          git diff CHANGELOG.md\n\n      - name: \"Prettify CHANGELOG.md\"\n        run: npx prettier --write CHANGELOG.md\n      - name: \"Commit changelog changes\"\n        run: git add CHANGELOG.md && git commit --allow-empty -m \"Update changelog\" CHANGELOG.md\n      - name: \"git push\"\n        if: inputs.dry_run != true\n        run: git push\n      - name: \"Create changelog PR\"\n        run: |\n          if gh pr view &>/dev/null; then\n            echo \"Changelog pr has already been created\"\n          else\n\n            gh pr create \\\n              --dry-run=\"${DRY_RUN}\" \\\n              --label \"no-backport\" \\\n              --label \"no-changelog\" \\\n              -B \"${TARGET}\" \\\n              --title \"Release: update changelog for ${TARGET}\" \\\n              --body \"Changelog changes for release versions:\"\n          fi\n        env:\n          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      - name: \"Add release version to PR description\"\n        if: inputs.dry_run != true\n        run: |\n          gh pr view --json body --jq .body > pr_body.md\n          echo \" -  ${VERSION}\" >> pr_body.md\n          gh pr edit --body-file pr_body.md\n        env:\n          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "complex", "file_path": ".github/workflows/changelog.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8625, "syntax_valid": true, "completeness_score": 0.8, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: \"Codeowners Validator\"\n\non:\n  pull_request:\n    branches: [ main ]\n\npermissions: {}\n\njobs:\n  codeowners-validator:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    steps:\n      # Checks-out your repository, which is validated in the next step\n      - uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n      - name: GitHub CODEOWNERS Validator\n        uses: mszostok/codeowners-validator@7f3f5e28c6d7b8dfae5731e54ce2272ca384592f\n        # input parameters\n        with:\n          # ==== GitHub Auth ====\n\n          # \"The list of checks that will be executed. By default, all checks are executed. Possible values: files,owners,duppatterns,syntax\"\n          checks: \"files,duppatterns,syntax\"\n\n          # \"The comma-separated list of experimental checks that should be executed. By default, all experimental checks are turned off. Possible values: notowned,avoid-shadowing\"\n          experimental_checks: \"notowned,avoid-shadowing\"\n\n          # The repository path in which CODEOWNERS file should be validated.\"\n          repository_path: \".\"\n\n          # Defines the level on which the application should treat check issues as failures. Defaults to warning, which treats both errors and warnings as failures, and exits with error code 3. Possible values are error and warning. Default: warning\"\n          check_failure_level: \"error\"\n\n          # The comma-separated list of patterns that should be ignored by not-owned-checker. For example, you can specify * and as a result, the * pattern from the CODEOWNERS file will be ignored and files owned by this pattern will be reported as unowned unless a later specific pattern will match that path. It's useful because often we have default owners entry at the begging of the CODOEWNERS file, e.g. * @global-owner1 @global-owner2\"\n          not_owned_checker_skip_patterns: \"\"\n\n          # Specifies whether CODEOWNERS may have unowned files. For example, `/infra/oncall-rotator/oncall-config.yml` doesn't have owner and this is not reported.\n          owner_checker_allow_unowned_patterns: \"false\"\n\n          # Specifies whether only teams are allowed as owners of files.\n          owner_checker_owners_must_be_teams: \"false\"\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/codeowners-validator.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8975, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "# For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\nname: \"CodeQL checks\"\n\non:\n  workflow_dispatch:\n  push:\n    branches: ['**'] # run on all branches\n    paths-ignore:\n      - '**/*.cue'\n      - '**/*.json'\n      - '**/*.md'\n      - '**/*.txt'\n      - '**/*.yml'\n      - pkg/storage/unified/sql/db/dbimpl/db.go # Ignoring warnings on the whole file for now while inline comments is not supported in Go (https://github.com/github/codeql/issues/11427)\n  schedule:\n    - cron: '0 4 * * 6'\n\npermissions:\n  security-events: write\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    continue-on-error: true # doesn't block PRs from being merged if this fails\n    if: github.repository == 'grafana/grafana'\n\n    strategy:\n      fail-fast: false\n      matrix:\n        # Override automatic language detection by changing the below list\n        # Supported options are listed here\n        # https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning#changing-the-languages-that-are-analyzed\n        language: ['actions', 'javascript', 'go']\n        # Learn more...\n        # https://docs.github.com/en/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#overriding-automatic-language-detection\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v4\n      with:\n        # We must fetch at least the immediate parents so that if this is\n        # a pull request then we can checkout the head.\n        fetch-depth: 2\n        persist-credentials: false\n\n    - if: matrix.language == 'go'\n      name: Set go version\n      uses: actions/setup-go@19bb51245e9c80abacb2e91cc42b33fa478b8639\n      with:\n        go-version-file: go.mod\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v3\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n    - if: matrix.language == 'go'\n      name: Build go files\n      run: |\n        go mod verify\n        make build-go\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v3\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/codeql-analysis.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8625, "syntax_valid": true, "completeness_score": 0.8, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Run commands when issues are labeled or comments added\n\n# important: this workflow uses a github app that is strictly limited\n# to issues. If you want to change the triggers for this workflow,\n# please review if the permissions are still sufficient.\non:\n  issues:\n    types: [labeled, unlabeled]\n  issue_comment:\n    types: [created]\n\nconcurrency:\n  group: issue-commands-${{ github.event.issue.number }}\n\npermissions: {}\n\njobs:\n  config:\n    runs-on: \"ubuntu-latest\"\n    outputs:\n      has-secrets: ${{ steps.check.outputs.has-secrets }}\n    steps:\n      - name: \"Check for secrets\"\n        id: check\n        shell: bash\n        run: |\n          if [ \"${{ github.repository }}\" == \"grafana/grafana\" ]; then\n            echo \"has-secrets=1\" >> \"$GITHUB_OUTPUT\"\n          fi\n\n  main:\n    needs: config\n    if: needs.config.outputs.has-secrets\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      id-token: write\n    steps:\n      - name: \"Get vault secrets\"\n        id: vault-secrets\n        uses: grafana/shared-workflows/actions/get-vault-secrets@main # zizmor: ignore[unpinned-uses]\n        with:\n          # Secrets placed in the ci/repo/grafana/grafana/plugins_platform_issue_commands_github_bot path in Vault\n          repo_secrets: |\n            GITHUB_APP_ID=grafana_pr_automation_app:app_id\n            GITHUB_APP_PRIVATE_KEY=grafana_pr_automation_app:app_pem\n\n      - name: Generate token\n        id: generate_token\n        uses: actions/create-github-app-token@3ff1caaa28b64c9cc276ce0a02e2ff584f3900c5 # v2.0.2\n        with:\n          app-id: ${{ env.GITHUB_APP_ID }}\n          private-key: ${{ env.GITHUB_APP_PRIVATE_KEY }}\n\n      - name: Checkout Actions\n        uses: actions/checkout@v4 # v4.2.2\n        with:\n          repository: \"grafana/grafana-github-actions\"\n          path: ./actions\n          ref: main\n          persist-credentials: false\n\n      - name: Install Actions\n        run: npm install --production --prefix ./actions\n      - name: Run Commands\n        uses: ./actions/commands\n        with:\n          metricsWriteAPIKey: \"\"\n          token: ${{ steps.generate_token.outputs.token }}\n          configPath: commands\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/commands.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.9099999999999999, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8500000000000001}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Create community release post\non:\n  workflow_call:\n    inputs:\n      version:\n        type: string\n        required: true\n        description: 'Needs to match, exactly, the name of a milestone. The version to be released please respect: major.minor.patch, major.minor.patch-preview or major.minor.patch-preview<number> format. example: 7.4.3, 7.4.3-preview or 7.4.3-preview1'\n      dry_run:\n        type: boolean\n        required: false\n        default: false\n        description: When enabled, this workflow will print a preview instead of creating an actual post.\n  workflow_dispatch:\n    inputs:\n      version:\n        type: string\n        required: true\n        description: 'Needs to match, exactly, the name of a milestone. The version to be released please respect: major.minor.patch, major.minor.patch-preview or major.minor.patch-preview<number> format. example: 7.4.3, 7.4.3-preview or 7.4.3-preview1'\n      dry_run:\n        type: boolean\n        required: false\n        default: false\n        description: When enabled, this workflow will print a preview instead of creating an actual post.\n\npermissions:\n  contents: read\n  id-token: write\n\njobs:\n  main:\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"Get vault secrets\"\n        id: vault-secrets\n        uses: grafana/shared-workflows/actions/get-vault-secrets@main\n        with:\n          # Secrets placed in the ci/repo/grafana/grafana/community_release path in Vault\n          repo_secrets: |\n            GRAFANABOT_FORUM_KEY=community_release:GRAFANABOT_FORUM_KEY\n\n      - name: Run community-release (manually invoked)\n        uses: grafana/grafana-github-actions-go/community-release@main\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          version: ${{ inputs.version }}\n          community_api_key: ${{ env.GRAFANABOT_FORUM_KEY }}\n          community_api_username: grafanabot\n          dry_run: ${{ inputs.dry_run }}\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/community-release.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8975000000000002, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Build and release core plugins\n\non:\n  workflow_dispatch:\n    inputs:\n      plugin_id:\n        description: \"ID of the plugin you want to publish\"\n        required: true\n        type: choice\n        options:\n          - grafana-azure-monitor-datasource\n          - grafana-pyroscope-datasource\n          - grafana-testdata-datasource\n          - jaeger\n          - parca\n          - stackdriver\n          - tempo\n          - zipkin\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}-${{ inputs.plugin_id }}\n  cancel-in-progress: true\n\nenv:\n  GRABPL_VERSION: 3.0.44\n  GCP_BUCKET: integration-artifacts # Dev: plugins-community-staging\n  GCOM_API: https://grafana.com # Dev: https://grafana-dev.com\n\n# These permissions are needed to assume roles from Github's OIDC.\npermissions:\n  contents: read\n  id-token: write\n\njobs:\n  build-and-publish:\n    env:\n      PLUGIN_ID: ${{ inputs.plugin_id }}\n    name: Build and publish ${{ inputs.plugin_id }}\n    runs-on: ubuntu-latest\n    outputs:\n      type: ${{ steps.get_dir.outputs.dir }}\n      has_backend: ${{ steps.check_backend.outputs.has_backend }}\n      version: ${{ steps.build_frontend.outputs.version }}\n    steps:\n      - name: checkout\n        uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n      - name: Verify inputs\n        run: |\n          if [ -z \"$PLUGIN_ID\" ]; then echo \"Missing plugin ID\"; exit 1; fi\n      - id: get-secrets\n        uses: grafana/shared-workflows/actions/get-vault-secrets@main # zizmor: ignore[unpinned-uses]\n        with:\n          # Secrets placed in the ci/repo/grafana/<repo>/<path> path in Vault\n          repo_secrets: |\n            PLUGINS_GOOGLE_CREDENTIALS=core-plugins-build-and-release:PLUGINS_GOOGLE_CREDENTIALS\n            PLUGINS_GRAFANA_API_KEY=core-plugins-build-and-release:PLUGINS_GRAFANA_API_KEY\n            PLUGINS_GCOM_TOKEN=core-plugins-build-and-release:PLUGINS_GCOM_TOKEN\n      - name: 'Authenticate to Google Cloud'\n        uses: 'google-github-actions/auth@6fc4af4b145ae7821d527454aa9bd537d1f2dc5f'\n        with:\n          credentials_json: '${{ env.PLUGINS_GOOGLE_CREDENTIALS }}'\n      - name: 'Set up Cloud SDK'\n        uses: 'google-github-actions/setup-gcloud@77e7a554d41e2ee56fc945c52dfd3f33d12def9a'\n      - name: Setup nodejs environment\n        uses: actions/setup-node@v4\n        with:\n          node-version-file: .nvmrc\n          cache: yarn\n      - name: Find plugin directory\n        shell: bash\n        id: get_dir\n        run: |\n          dir=\"$(dirname \\\n            \"$(grep -Elir --include=plugin.json --exclude-dir=dist \\\n              '\"id\": \"'\"${PLUGIN_ID}\"'\"' \\\n              public/app/plugins \\\n            )\" \\\n          )\"\n          echo \"dir=${dir}\" >> \"$GITHUB_OUTPUT\"\n      - name: Install frontend dependencies\n        shell: bash\n        working-directory: ${{ steps.get_dir.outputs.dir }}\n        run: |\n          yarn install --immutable\n      - name: Download grabpl executable\n        shell: sh\n        working-directory: ${{ steps.get_dir.outputs.dir }}\n        run: |\n          mkdir -pv ./bin\n          curl -fL -o ./bin/grabpl https://grafana-downloads.storage.googleapis.com/grafana-build-pipeline/v\"$GRABPL_VERSION\"/grabpl\n          chmod 0755 ./bin/grabpl\n      - name: Check backend\n        id: check_backend\n        shell: bash\n        run: |\n          if grep -Eqr --include=main.go 'datasource.Manage\\('\"$PLUGIN_ID\" pkg/tsdb; then\n            echo \"has_backend=true\" >> \"$GITHUB_OUTPUT\"\n          else\n            echo \"has_backend=false\" >> \"$GITHUB_OUTPUT\"\n          fi\n      - name: Setup golang environment\n        uses: actions/setup-go@19bb51245e9c80abacb2e91cc42b33fa478b8639\n        if: steps.check_backend.outputs.has_backend == 'true'\n        with:\n          go-version-file: go.mod\n      - name: Install Mage\n        shell: bash\n        if: steps.check_backend.outputs.has_backend == 'true'\n        run: |\n          go install github.com/magefile/mage\n      - name: Check tools\n        shell: bash\n        working-directory: ${{ steps.get_dir.outputs.dir }}\n        run: |\n          echo \"=======================================\"\n          echo \"  Frontend tools\"\n          echo \"=======================================\"\n          echo \"-------- node version -----\"\n          node --version\n          echo \"-------- npm version -----\"\n          npm --version\n          echo \"-------- yarn version -----\"\n          yarn --version\n          echo \"=======================================\"\n          echo \"  Misc tools\"\n          echo \"=======================================\"\n          echo \"-------- docker version -----\"\n          docker --version\n          echo \"-------- jq version -----\"\n          jq --version\n          echo \"-------- grabpl version -----\"\n          ./bin/grabpl --version\n          echo \"=======================================\"\n      - name: Check backend tools\n        shell: bash\n        if: steps.check_backend.outputs.has_backend == 'true'\n        working-directory: ${{ steps.get_dir.outputs.dir }}\n        run: |\n          echo \"=======================================\"\n          echo \"  Backend tools\"\n          echo \"=======================================\"\n          echo \"-------- go version -----\"\n          go version\n          echo \"-------- mage version -----\"\n          mage --version\n          echo \"=======================================\"\n      - name: build:frontend\n        shell: bash\n        id: build_frontend\n        env:\n          OUTPUT_DIR: ${{ steps.get_dir.outputs.dir }}\n        run: |\n          command=\"plugin:build:commit\"\n          if [ \"$GITHUB_REF\" != \"refs/heads/main\" ]; then\n            # Release branch, do not add commit hash to version\n            command=\"plugin:build\"\n          fi\n          yarn $command --scope=\"@grafana-plugins/$PLUGIN_ID\"\n          version=\"$(jq -r .info.version \"$OUTPUT_DIR\"/dist/plugin.json)\"\n          echo \"version=${version}\" >> \"$GITHUB_OUTPUT\"\n      - name: build:backend\n        if: steps.check_backend.outputs.has_backend == 'true'\n        shell: bash\n        env:\n          VERSION: ${{ steps.build_frontend.outputs.version }}  \n        run: |\n          make build-plugin-go PLUGIN_ID=\"$PLUGIN_ID\"\n      - name: package\n        working-directory: ${{ steps.get_dir.outputs.dir }}\n        run: |\n          mkdir -p ci/jobs/package\n          bin/grabpl plugin package\n        env:\n          GRAFANA_API_KEY: ${{ env.PLUGINS_GRAFANA_API_KEY }}\n          PLUGIN_SIGNATURE_TYPE: grafana\n      - name: Check existing release\n        env:\n          GCOM_TOKEN: ${{ env.PLUGINS_GCOM_TOKEN }}\n          VERSION: ${{ steps.build_frontend.outputs.version }}  \n          GCOM_API: ${{ env.GCOM_API }}\n        run: |\n          api_res=\"$(curl -X 'GET' -H \"Authorization: Bearer $GCOM_TOKEN\" \\\n            \"$GCOM_API/api/plugins/$PLUGIN_ID?version=$VERSION\" \\\n            -H 'accept: application/json')\"\n          api_res_code=\"$(echo \"$api_res\" | jq -r .code)\"\n          if [ \"$api_res_code\" = \"NotFound\" ]; then\n            echo \"No existing release found\"\n          else\n            echo \"Expecting a missing release, got:\"\n            echo \"$api_res\"\n            exit 1\n          fi\n      - name: store build artifacts\n        uses: actions/upload-artifact@v4\n        with:\n          name: build-artifacts\n          path: ${{ steps.get_dir.outputs.dir }}/ci/packages/*.zip\n      - name: Publish release to Google Cloud Storage\n        working-directory: ${{ steps.get_dir.outputs.dir }}\n        env:\n          VERSION: ${{ steps.build_frontend.outputs.version }}\n          GCP_BUCKET: ${{ env.GCP_BUCKET }}\n        run: |\n          echo \"Publish release to Google Cloud Storage:\"\n          set -x\n          touch ci/packages/windows ci/packages/darwin ci/packages/linux ci/packages/any\n          gsutil -m cp -r ci/packages/*windows* \"gs://$GCP_BUCKET/$PLUGIN_ID/release/${VERSION}/windows\"\n          gsutil -m cp -r ci/packages/*linux* \"gs://$GCP_BUCKET/$PLUGIN_ID/release/${VERSION}/linux\"\n          gsutil -m cp -r ci/packages/*darwin* \"gs://$GCP_BUCKET/$PLUGIN_ID/release/${VERSION}/darwin\"\n          gsutil -m cp -r ci/packages/*any* \"gs://$GCP_BUCKET/$PLUGIN_ID/release/${VERSION}/any\"\n      - name: Publish new plugin version on grafana.com\n        if: steps.check_backend.outputs.has_backend == 'true'\n        working-directory: ${{ steps.get_dir.outputs.dir }}\n        env:\n          GCOM_TOKEN: ${{ env.PLUGINS_GCOM_TOKEN }}\n          VERSION: ${{ steps.build_frontend.outputs.version }}  \n          GCP_BUCKET: ${{ env.GCP_BUCKET }}\n          OUTPUT_DIR: ${{ steps.get_dir.outputs.dir }}\n          GCOM_API: ${{ env.GCOM_API }}\n        run: |\n          echo \"Publish new plugin version on grafana.com:\"\n          echo \"Plugin version: ${VERSION}\"\n\n          OUTPUT_URL=\"https://github.com/grafana/grafana/tree/$OUTPUT_DIR\" \\\n          jq -n '{\"url\": env.OUTPUT_URL}' > body.json\n          osarchs=(linux_amd64 linux_arm64 linux_arm windows_amd64 darwin_amd64 darwin_arm64)\n          for osarch in \"${osarchs[@]}\"; do\n            echo \"Processing $osarch\"\n            KEY=\"${osarch//_/-}\" \\\n            OSARCH=\"$osarch\" \\\n            jq -s '. as $i | .[0] | .download[env.KEY] = {\n              \"url\": \"https://storage.googleapis.com/\\(env.GCP_BUCKET)/\\(env.PLUGIN_ID)/release/\\(env.VERSION)/linux/\\(env.PLUGIN_ID)-\\(env.VERSION).\\(env.OSARCH).zip\",\n              \"md5\": $i[1].plugin.md5\n            }' body.json ci/packages/info-\"$osarch\".json > tmp.json && mv tmp.json body.json\n          done\n\n          result=\"$(curl -H \"Authorization: Bearer $GCOM_TOKEN\" -H \"Content-Type: application/json\" \"$GCOM_API\"/api/plugins --data-binary '@body.json')\"\n          if [[ \"$(echo \"$result\" | jq -r .version)\" == \"null\" ]]; then\n            echo \"Failed to publish plugin version. Got:\"\n            echo \"$result\"\n            exit 1\n          fi\n      - name: Publish new plugin version on grafana.com (frontend only)\n        if: steps.check_backend.outputs.has_backend == 'false'\n        working-directory: ${{ steps.get_dir.outputs.dir }}\n        env:\n          GCOM_TOKEN: ${{ env.PLUGINS_GCOM_TOKEN }}\n          VERSION: ${{ steps.build_frontend.outputs.version }}\n          GCOM_API: ${{ env.GCOM_API }}\n          OUTPUT_DIR: ${{ steps.get_dir.outputs.dir }}\n          GCP_BUCKET: ${{ env.GCP_BUCKET }}\n        run: |\n          echo \"Publish new plugin version on grafana.com:\"\n          echo \"Plugin version: ${VERSION}\"\n\n          OUTPUT_URL=\"https://github.com/grafana/grafana/tree/$OUTPUT_DIR\" \\\n          DOWNLOAD_URL=\"https://storage.googleapis.com/$GCP_BUCKET/$PLUGIN_ID/release/${VERSION}/any/$PLUGIN_ID-${VERSION}.any.zip\" \\\n          MD5_CHECKSUM=\"$(jq -r '.plugin.md5' ci/packages/info-any.json)\" \\\n          jq -rn '{\n            \"url\": env.OUTPUT_URL,\n            \"download\": {\n              \"any\": {\n                \"url\": env.DOWNLOAD_URL,\n                \"md5\": env.MD5_CHECKSUM\n              }\n            }\n          }' > body.json\n\n          result=\"$(curl -H \"Authorization: Bearer $GCOM_TOKEN\" -H \"Content-Type: application/json\" \"$GCOM_API\"/api/plugins --data-binary '@body.json')\"\n          if [[ \"$(echo \"$result\" | jq -r .version)\" == \"null\" ]]; then\n            echo \"Failed to publish plugin version. Got:\"\n            echo \"$result\"\n            exit 1\n          fi\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "complex", "file_path": ".github/workflows/core-plugins-build-and-release.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.9025000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Create next release branch\non:\n  workflow_call:\n    inputs:\n      ownerRepo:\n        type: string\n        description: Owner/repo of the repository where the branch is created (e.g. 'grafana/grafana')\n        required: true\n      source:\n        description: The release branch to increment (eg providing `release-11.2.3` will result in `release-11.2.4` being created)\n        type: string\n        required: true\n    outputs:\n      branch:\n        description: The new branch that was created\n        value: ${{ jobs.main.outputs.branch }}\n  workflow_dispatch:\n    inputs:\n      ownerRepo:\n        description: Owner/repo of the repository where the branch is created (e.g. 'grafana/grafana')\n      source:\n        description: The release branch to increment (eg providing `release-11.2.3` will result in `release-11.2.4` being created)\n        type: string\n        required: true\n\npermissions:\n  contents: read\n  id-token: write\n\njobs:\n  main:\n    runs-on: ubuntu-latest\n    outputs:\n      branch: ${{ steps.branch.outputs.branch }}\n    steps:\n      - name: \"Get vault secrets\"\n        id: vault-secrets\n        uses: grafana/shared-workflows/actions/get-vault-secrets@main\n        with:\n          # Secrets placed in the ci/data/repo/grafana/grafana/delivery-bot-app path in Vault\n          repo_secrets: |\n            GRAFANA_DELIVERY_BOT_APP_PEM=delivery-bot-app:PRIVATE_KEY\n      - name: \"Generate token\"\n        id: generate_token\n        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a\n        with:\n          app_id: ${{ vars.DELIVERY_BOT_APP_ID }}\n          private_key: ${{ env.GRAFANA_DELIVERY_BOT_APP_PEM }}\n          repositories: \"[\\\"grafana\\\", \\\"grafana-enterprise\\\"]\"\n          permissions: \"{\\\"contents\\\": \\\"write\\\", \\\"pull_requests\\\": \\\"write\\\", \\\"workflows\\\":\\\"write\\\"}\"\n      - name: Create release branch\n        id: branch\n        uses: grafana/grafana-github-actions-go/bump-release@main # zizmor: ignore[unpinned-uses]\n        with:\n          ownerRepo: ${{ inputs.ownerRepo }}\n          source: ${{ inputs.source }}\n          token: ${{ steps.generate_token.outputs.token }}\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/create-next-release-branch.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.88, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Create security branch\non:\n  workflow_call:\n    inputs:\n      release_branch:\n        type: string\n        description: The release branch to increment (eg providing `release-11.2.3` will result in `release-11.2.3+security-01` being created)\n        required: true\n      security_branch_number:\n        type: string\n        description: 'The security branch number (e.g., 01)'\n        required: false\n        default: '01'\n      repository:\n        type: string\n        description: 'The repository to create the security branch in (e.g., grafana/grafana-security-mirror)'\n        required: true\n    outputs:\n      branch:\n        description: The new security branch that was created\n        value: ${{ jobs.main.outputs.branch }}\n  workflow_dispatch:\n    inputs:\n      release_branch:\n        type: string\n        description: The release branch to increment (eg providing `release-11.2.3` will result in `release-11.2.3+security-01` being created)\n        required: true\n      security_branch_number:\n        type: string\n        description: 'The security branch number (e.g., 01)'\n        required: false\n        default: '01'\n      repository:\n        type: string\n        description: 'The repository to create the security branch in (e.g., grafana/grafana-security-mirror)'\n        required: true\n\npermissions:\n  contents: write\n  id-token: write\n\njobs:\n  main:\n    runs-on: ubuntu-latest\n    outputs:\n      branch: ${{ steps.branch.outputs.branch }}\n    steps:\n      - name: \"Get vault secrets\"\n        id: vault-secrets\n        uses: grafana/shared-workflows/actions/get-vault-secrets@main\n        with:\n          # Secrets placed in the ci/data/repo/grafana/grafana/delivery-bot-app path in Vault\n          repo_secrets: |\n            GRAFANA_DELIVERY_BOT_APP_PEM=delivery-bot-app:PRIVATE_KEY\n\n      - name: \"Generate token\"\n        id: generate_token\n        uses: tibdex/github-app-token@b62528385c34dbc9f38e5f4225ac829252d1ea92\n        with:\n          app_id: ${{ vars.DELIVERY_BOT_APP_ID }}\n          private_key: ${{ env.GRAFANA_DELIVERY_BOT_APP_PEM }}\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          token: ${{ steps.generate_token.outputs.token }}\n          repository: ${{ inputs.repository }}\n          ref: ${{ inputs.release_branch }}\n\n      - name: Create security branch\n        id: branch\n        env:\n          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}\n          INPUT_RELEASE_BRANCH: ${{ inputs.release_branch }}\n          INPUT_SECURITY_BRANCH_NUMBER: ${{ inputs.security_branch_number }}\n          INPUT_REPOSITORY: ${{ inputs.repository }}\n        run: |\n          chmod +x .github/workflows/scripts/create-security-branch/create-security-branch.sh\n          .github/workflows/scripts/create-security-branch/create-security-branch.sh\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/create-security-branch.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8700000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "# Owned by grafana-release-guild\n# Intended to be dropped into the base repo (Ex: grafana/grafana) for use in the security mirror.\nname: Create security patch\nrun-name: create-security-patch\non:\n  pull_request:\n    types:\n      - opened\n      - reopened\n      - synchronize\n    branches:\n      - \"main\"\n      - \"v*.*.*\"\n      - \"release-*.*.*\"\n\n# This is run before the pull request has been merged, so we'll run against the src branch\njobs:\n  trigger_downstream_create_security_patch:\n    concurrency: create-patch-${{ github.ref_name }}\n    uses: grafana/security-patch-actions/.github/workflows/create-patch.yml@main # zizmor: ignore[unpinned-uses]\n    if: github.repository == 'grafana/grafana-security-mirror'\n    with:\n      repo: \"${{ github.repository }}\"\n      src_ref: \"${{ github.head_ref }}\" # this is the source branch name, Ex: \"feature/newthing\"\n      patch_ref: \"${{ github.base_ref }}\" # this is the target branch name, Ex: \"main\"\n      patch_repo: \"grafana/grafana-security-patches\"\n      patch_prefix: \"${{ github.event.pull_request.number }}\"\n    secrets: inherit # zizmor: ignore[secrets-inherit]\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/create-security-patch-from-security-mirror.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8700000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: When an issue changes and it's part of the dashboards project, add the dashboards squad label\non:\n  issues:\n    types: [opened, closed, edited, reopened, assigned, unassigned, labeled, unlabeled]\n\npermissions:\n  contents: read\n  id-token: write\n\nenv:\n  ORGANIZATION: ${{ github.repository_owner }}\n  REPO: ${{ github.event.repository.name }}\n  TARGET_PROJECT: 202\n  LABEL_IDS: \"LA_kwDOAOaWjc8AAAABT38U-A\"\n\nconcurrency:\n  group: issue-label-when-in-project-${{ github.event.number }}\njobs:\n  main:\n    if: github.repository == 'grafana/grafana'\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"Get vault secrets\"\n        id: vault-secrets\n        uses: grafana/shared-workflows/actions/get-vault-secrets@main # zizmor: ignore[unpinned-uses]\n        with:\n          # Secrets placed in the ci/repo/grafana/grafana/plugins_platform_issue_commands_github_bot path in Vault\n          repo_secrets: |\n            GITHUB_APP_ID=grafana_pr_automation_app:app_id\n            GITHUB_APP_PRIVATE_KEY=grafana_pr_automation_app:app_pem\n\n      - name: Generate token\n        id: generate_token\n        uses: actions/create-github-app-token@3ff1caaa28b64c9cc276ce0a02e2ff584f3900c5 # v2.0.2\n        with:\n          app-id: ${{ env.GITHUB_APP_ID }}\n          private-key: ${{ env.GITHUB_APP_PRIVATE_KEY }}\n      - name: Check if issue is in target project\n        env:\n          GH_TOKEN: ${{ steps.generate_token.outputs.token }}\n          ISSUE_NUMBER: ${{ github.event.issue.number }}\n          TARGET_PROJECT: ${{ env.TARGET_PROJECT }}\n        run: |\n          # shellcheck disable=SC2016 # we don't want the $s to be expanded\n          gh api graphql -f query='\n            query($org: String!, $repo: String!, $issueNumber: Int!) {\n              repository(name: $repo, owner: $org) {\n                issue (number: $issueNumber) {\n                  id\n                  projectItems(first:20) {\n                    nodes {\n                      project {\n                        number,\n                      },\n                    }\n                  }\n                }\n              }\n            }' -f org=\"$ORGANIZATION\" -f repo=\"$REPO\" -F issueNumber=\"$ISSUE_NUMBER\" > projects_data.json\n\n            {\n              echo \"IN_TARGET_PROJ=$(jq '.data.repository.issue.projectItems.nodes[] | select(.project.number=='\"$TARGET_PROJECT\"') | .project != null' projects_data.json)\"\n              echo \"ITEM_ID=$(jq '.data.repository.issue.id' projects_data.json)\"\n            } >> \"$GITHUB_ENV\"\n      - name: Set up label array\n        if: env.IN_TARGET_PROJ\n        env:\n          LABEL_IDS: ${{ env.LABEL_IDS }}\n        run: |\n          # shellcheck disable=SC2153 # we define the variable on the line above in 'read'\n          IFS=',' read -ra LABEL_IDs <<< \"$LABEL_IDS\"\n          for item in \"${LABEL_IDs[@]}\"; do\n            echo \"Item: $item\"\n          done\n      - name: Add label to issue\n        if: env.IN_TARGET_PROJ\n        env:\n          GH_TOKEN: ${{ steps.generate_token.outputs.token }}\n          LABEL_IDS: ${{ env.LABEL_IDS }}\n        run: |\n          # shellcheck disable=SC2016 # we don't want the $s to be expanded\n          gh api graphql -f query='\n            mutation ($labelableId: ID!, $labelIds: [ID!]!) {\n              addLabelsToLabelable(\n                input: {labelableId: $labelableId, labelIds: $labelIds}\n              ) {\n                  clientMutationId\n              }\n            }' -f labelableId=\"$ITEM_ID\" -f labelIds=\"$LABEL_IDS\"\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/dashboards-issue-add-label.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.88, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Deploy pr preview\n\non:\n  pull_request:\n    types:\n      - opened\n      - synchronize\n      - closed\n    paths:\n      - \"docs/sources/**\"\n\npermissions: {}\n\njobs:\n  deploy-pr-preview:\n    permissions:\n      contents: read # Clone repositories.\n      id-token: write # Fetch Vault secrets.\n      pull-requests: write # Create or update PR comments.\n      statuses: write # Update GitHub status check with deploy preview link.\n    if: \"!github.event.pull_request.head.repo.fork\"\n    uses: grafana/writers-toolkit/.github/workflows/deploy-preview.yml@main # zizmor: ignore[unpinned-uses]\n    with:\n      branch: ${{ github.head_ref }}\n      event_number: ${{ github.event.number }}\n      repo: grafana\n      sha: ${{ github.event.pull_request.head.sha }}\n      sources: |\n        [\n          {\n            \"index_file\": \"content/docs/grafana/_index.md\",\n            \"relative_prefix\": \"/docs/grafana/latest/\",\n            \"repo\": \"grafana\",\n            \"source_directory\": \"docs/sources\",\n            \"website_directory\": \"content/docs/grafana/latest\"\n          }\n        ]\n      title: ${{ github.event.pull_request.title }}\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/deploy-pr-preview.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8825000000000002, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Deploy Storybook preview\n\non:\n  pull_request:\n    paths:\n      - 'packages/grafana-ui/**'\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\npermissions: {}\n\njobs:\n  deploy-storybook-preview:\n    name: Deploy Storybook preview\n    runs-on: ubuntu-latest\n    # Don't run from forks for the moment. If we find this useful we can do the workflow_run dance\n    # to make it work for forks.\n    if: github.event.pull_request.head.repo.fork == false\n    permissions:\n      contents: read\n      id-token: write\n\n    env:\n      BUCKET_NAME: grafana-storybook-previews\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version-file: '.nvmrc'\n          cache: 'yarn'\n\n      - name: Cache node_modules\n        uses: actions/cache@v4\n        with:\n          path: |\n            node_modules\n          key: node_modules-${{ hashFiles('yarn.lock') }}\n          restore-keys: |\n            node_modules-\n\n      - name: Install dependencies\n        env:\n          # If the PR isn't from a fork then don't use the slower yarn checks\n          YARN_ENABLE_HARDENED_MODE: ${{ github.event.pull_request.head.repo.fork == false && '1' || '0' }}\n        run: yarn install --immutable\n\n      - name: Build storybook\n        run: yarn storybook:build\n\n      # Create the GCS folder name for the preview. Creates a consistent name for all deploys for the PR.\n      # Matches format of `pr_<PR_NUMBER>_<SANITIZED_BRANCH>`.\n      # Where `SANITIZED_BRANCH` is the branch name with only alphanumeric and hyphens, limited to 30 characters.\n      - name: Create deploy name\n        id: create-deploy-name\n        env:\n          BRANCH_NAME: ${{ github.event.pull_request.head.ref }}\n          PR_NUMBER: ${{ github.event.pull_request.number }}\n        run: |\n          # Convert branch name to only contain alphanumeric and hyphens\n          SANITIZED_BRANCH=$(echo \"$BRANCH_NAME\" | tr -cs \"[:alnum:]-\" \"-\" | sed \"s/^-//;s/-$//\")\n\n          # Check if SANITIZED_BRANCH is empty and fail if it is\n          if [ -z \"$SANITIZED_BRANCH\" ]; then\n            echo \"Error: Branch name resulted in empty string after sanitization\"\n            exit 1\n          fi\n\n          echo \"deploy-name=pr_${PR_NUMBER}_${SANITIZED_BRANCH:0:30}\" >> \"$GITHUB_OUTPUT\"\n\n      - name: Upload Storybook\n        uses: grafana/shared-workflows/actions/push-to-gcs@main\n        with:\n          environment: prod\n          bucket: ${{ env.BUCKET_NAME }}\n          bucket_path: ${{ steps.create-deploy-name.outputs.deploy-name }}\n          path: packages/grafana-ui/dist/storybook\n          service_account: github-gf-storybook-preview@grafanalabs-workload-identity.iam.gserviceaccount.com\n          parent: false\n\n      - name: Write summary\n        env:\n          DEPLOY_NAME: ${{ steps.create-deploy-name.outputs.deploy-name }}\n        run: |\n          echo \"## Storybook preview deployed! 🚀\" >> $GITHUB_STEP_SUMMARY\n          echo \"Check it out at https://storage.googleapis.com/${BUCKET_NAME}/${DEPLOY_NAME}/index.html\" >> $GITHUB_STEP_SUMMARY\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/deploy-storybook-preview.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.9025000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "# Only runs if anything under the packages/ directory changes.\n---\nname: Levitate / Detect breaking changes in PR\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\npermissions: {}\n\non:\n  pull_request:\n    paths:\n      - 'packages/**'\n      - '.nvmrc'\n      - '.github/workflows/detect-breaking-changes-levitate.yml'\n    branches:\n      - 'main'\n\njobs:\n  buildPR:\n    name: Build PR packages artifacts\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        working-directory: './pr'\n    permissions:\n      contents: read\n      id-token: write\n\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          path: './pr'\n          persist-credentials: false\n\n      - uses: actions/setup-node@v4\n        with:\n          node-version-file: './pr/.nvmrc'\n\n      - name: Get yarn cache directory path\n        id: yarn-cache-dir-path\n        run: echo \"dir=$(yarn config get cacheFolder)\" >> \"$GITHUB_OUTPUT\"\n\n      - name: Restore yarn cache\n        uses: actions/cache@v4\n        id: yarn-cache\n        with:\n          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}\n          key: yarn-cache-folder-${{ hashFiles('**/yarn.lock', '.yarnrc.yml') }}\n          restore-keys: |\n            yarn-cache-folder-\n\n      - name: Install dependencies\n        run: yarn install --immutable\n\n      - name: Build packages\n        run: yarn packages:build\n\n      - name: Pack packages\n        run: yarn packages:pack --out ./%s.tgz\n\n      - name: Zip built tarballed packages\n        run: zip -r ./pr_built_packages.zip ./packages/**/*.tgz\n\n      - name: Upload build output as artifact\n        uses: actions/upload-artifact@v4\n        with:\n          name: buildPr\n          path: './pr/pr_built_packages.zip'\n\n  buildBase:\n    name: Build Base packages artifacts\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      id-token: write\n    defaults:\n      run:\n        working-directory: './base'\n\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          path: './base'\n          ref: ${{ github.event.pull_request.base.ref }}\n          persist-credentials: false\n\n      - uses: actions/setup-node@v4\n        with:\n          node-version-file: './base/.nvmrc'\n\n      - name: Get yarn cache directory path\n        id: yarn-cache-dir-path\n        run: echo \"dir=$(yarn config get cacheFolder)\" >> \"$GITHUB_OUTPUT\"\n\n      - name: Restore yarn cache\n        uses: actions/cache@v4\n        id: yarn-cache\n        with:\n          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}\n          key: yarn-cache-folder-${{ hashFiles('**/yarn.lock', '.yarnrc.yml') }}\n          restore-keys: |\n            yarn-cache-folder-\n\n      - name: Install dependencies\n        run: yarn install --immutable\n\n      - name: Build packages\n        run: yarn packages:build\n\n      - name: Pack packages\n        run: yarn packages:pack --out ./%s.tgz\n\n      - name: Zip built tarballed packages\n        run: zip -r ./base_built_packages.zip ./packages/**/*.tgz\n\n      - name: Upload build output as artifact\n        uses: actions/upload-artifact@v4\n        with:\n          name: buildBase\n          path: './base/base_built_packages.zip'\n\n  Detect:\n    name: Detect breaking changes between PR and base\n    runs-on: ubuntu-latest\n    needs: ['buildPR', 'buildBase']\n    env:\n      GITHUB_STEP_NUMBER: 8\n    permissions:\n      contents: 'read'\n      id-token: 'write'\n\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n\n      - uses: actions/setup-node@v4\n        with:\n          node-version-file: '.nvmrc'\n\n      - name: Get built packages from pr\n        uses: actions/download-artifact@v4\n        with:\n          name: buildPr\n\n      - name: Get built packages from base\n        uses: actions/download-artifact@v4\n        with:\n          name: buildBase\n\n      - name: Unzip artifact from pr\n        run: unzip -j pr_built_packages.zip -d ./pr && rm pr_built_packages.zip\n\n      - name: Unzip artifact from base\n        run: unzip -j base_built_packages.zip -d ./base && rm base_built_packages.zip\n\n      - id: 'auth'\n        uses: 'google-github-actions/auth@6fc4af4b145ae7821d527454aa9bd537d1f2dc5f'\n        if: github.event.pull_request.head.repo.full_name == github.repository\n        with:\n          workload_identity_provider: projects/304398677251/locations/global/workloadIdentityPools/github/providers/github-provider\n          service_account: github-plugins-data-levitate@grafanalabs-workload-identity.iam.gserviceaccount.com\n          project_id: 'grafanalabs-global'\n\n      - name: 'Set up Cloud SDK'\n        uses: 'google-github-actions/setup-gcloud@77e7a554d41e2ee56fc945c52dfd3f33d12def9a'\n        if: github.event.pull_request.head.repo.full_name == github.repository\n        with:\n          version: '>= 363.0.0'\n          project_id: 'grafanalabs-global'\n          install_components: 'bq'\n\n      - name: Detect breaking changes\n        id: breaking-changes\n        run: ./scripts/check-breaking-changes.sh\n        env:\n          FORCE_COLOR: 3\n          IS_FORK: ${{ github.event.pull_request.head.repo.full_name != github.repository }} # used in check-breaking-changes.sh and levitate-parse-json-report.js\n\n      - name: Persisting the check output\n        run: |\n            mkdir -p ./levitate\n            echo \"{ \\\"exit_code\\\": ${IS_BREAKING}, \\\"message\\\": \\\"${MESSAGE}\\\", \\\"pr_number\\\": \\\"${PR_NUMBER}\\\" }\" > ./levitate/result.json\n        env:\n          IS_BREAKING: ${{ steps.breaking-changes.outputs.is_breaking }}\n          MESSAGE: ${{ steps.breaking-changes.outputs.message }}\n          PR_NUMBER: ${{ github.event.pull_request.number }}\n\n      - name: Upload check output as artifact\n        uses: actions/upload-artifact@v4\n        with:\n          name: levitate\n          path: levitate/\n\n\n  Report:\n    name: Report breaking changes in PR comment\n    runs-on: ubuntu-latest\n    needs: ['Detect']\n    permissions:\n      contents: read\n      id-token: write\n    if: github.event.pull_request.head.repo.full_name == github.repository\n\n    steps:\n      - id: get-secrets\n        uses: grafana/shared-workflows/actions/get-vault-secrets@28361cdb22223e5f1e34358c86c20908e7248760 # get-vault-secrets-v1.1.0\n        with:\n          # Secrets placed in the ci/repo/grafana/grafana in vault\n          repo_secrets: |\n            GITHUB_APP_ID=grafana_pr_automation_app:app_id\n            GITHUB_APP_PRIVATE_KEY=grafana_pr_automation_app:app_pem\n\n      - name: Generate token\n        id: generate_token\n        uses: actions/create-github-app-token@3ff1caaa28b64c9cc276ce0a02e2ff584f3900c5 # v2.0.2\n        with:\n          app-id: ${{ env.GITHUB_APP_ID }}\n          private-key: ${{ env.GITHUB_APP_PRIVATE_KEY }}\n\n      - uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n\n      - name: 'Download artifact'\n        uses: actions/download-artifact@v4\n        with:\n          name: levitate\n\n      - name: Parsing levitate result\n        uses: actions/github-script@v7\n        id: levitate-run\n        with:\n          script: |\n            const filePath = 'result.json';\n            const script = require('./.github/workflows/scripts/json-file-to-job-output.js');\n            await script({ core, filePath });\n\n      # Check if label exists\n      - name: Check if \"levitate breaking change\" label exists\n        id: does-label-exist\n        uses: actions/github-script@v7\n        env:\n          PR_NUMBER: ${{ github.event.pull_request.number }}\n        with:\n          script: |\n            const { data: labels } = await github.rest.issues.listLabelsOnIssue({\n              issue_number: context.issue.number,\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n            });\n            return labels.some(label => label.name === 'levitate breaking change') ? 1 : 0\n\n      # put the markdown into a variable\n      - name: Levitate Markdown\n        id: levitate-markdown\n        run: |\n            if [ -f \"levitate.md\" ]; then\n            {\n              echo 'levitate_markdown<<EOF'\n              cat levitate.md\n              echo EOF\n            } >> \"$GITHUB_OUTPUT\"\n            else\n              echo \"levitate_markdown=No breaking changes detected\" >> \"$GITHUB_OUTPUT\"\n            fi\n\n\n      # Comment on the PR\n      - name: Comment on PR\n        if: steps.levitate-run.outputs.exit_code == 1\n        uses: marocchino/sticky-pull-request-comment@773744901bac0e8cbb5a0dc842800d45e9b2b405\n        with:\n          header: levitate-breaking-change-comment\n          number: ${{ github.event.pull_request.number }}\n          message: |\n            ⚠️ &nbsp;&nbsp;**Possible breaking changes (md version)**&nbsp;&nbsp; ⚠️\n\n            ${{ steps.levitate-markdown.outputs.levitate_markdown }}\n\n            [Read our guideline](https://github.com/grafana/grafana/blob/main/contribute/breaking-changes-guide/breaking-changes-guide.md)\n\n            * Your pull request merge won't be blocked.\n          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}\n\n      # Remove comment from the PR (no more breaking changes)\n      - name: Remove comment from PR\n        if: steps.levitate-run.outputs.exit_code == 0\n        uses: marocchino/sticky-pull-request-comment@773744901bac0e8cbb5a0dc842800d45e9b2b405\n        with:\n          header: levitate-breaking-change-comment\n          number: ${{ github.event.pull_request.number }}\n          delete: true\n          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}\n\n      - name: Send Slack Message via Payload\n        id: slack\n        if: steps.levitate-run.outputs.exit_code == 1 && steps.does-label-exist.outputs.result == 0 && github.repository == 'grafana/grafana'\n        uses: grafana/shared-workflows/actions/send-slack-message@7b628e7352c2dea057c565cc4fcd5564d5f396c0 #v1.0.0\n        with:\n          channel-id: \"C031SLFH6G0\"\n          payload:  |\n            {\n              \"channel\": \"C031SLFH6G0\",\n              \"text\": \":warning: Possible breaking changes detected in *PR:* <${{ github.event.pull_request.html_url }}|#${{ github.event.pull_request.number }} :warning:\",\n              \"icon_emoji\": \":grot:\",\n              \"username\": \"Levitate Bot\",\n              \"blocks\": [\n                {\n                  \"type\": \"section\",\n                  \"text\": {\n                    \"type\": \"mrkdwn\",\n                    \"text\": \"*grafana/grafana* repository has possible breaking changes\"\n                  }\n                },\n                {\n                  \"type\": \"section\",\n                  \"fields\": [\n                    {\n                      \"type\": \"mrkdwn\",\n                      \"text\": \"*PR:* <${{ github.event.pull_request.html_url }}|#${{ github.event.pull_request.number }}>\\n\\nAuthor: ${{ github.event.pull_request.user.login }}\"\n                    },\n                    {\n                      \"type\": \"mrkdwn\",\n                      \"text\": \"*Job:* <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Job>\"\n                    }\n                  ]\n                }\n              ]\n            }\n\n      # Add the label\n      - name: Add \"levitate breaking change\" label\n        if: steps.levitate-run.outputs.exit_code == 1 && steps.does-label-exist.outputs.result == 0\n        uses: actions/github-script@v7\n        env:\n          PR_NUMBER: ${{ steps.levitate-run.outputs.pr_number }}\n        with:\n          github-token: ${{ steps.generate_token.outputs.token }}\n          script: |\n            await github.rest.issues.addLabels({\n              issue_number: process.env.PR_NUMBER,\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              labels: ['levitate breaking change']\n            })\n\n      # Remove label (no more breaking changes)\n      - name: Remove \"levitate breaking change\" label\n        if: steps.levitate-run.outputs.exit_code == 0 && steps.does-label-exist.outputs.result == 1\n        uses: actions/github-script@v7\n        env:\n          PR_NUMBER: ${{ steps.levitate-run.outputs.pr_number }}\n        with:\n          github-token: ${{ steps.generate_token.outputs.token }}\n          script: |\n            await github.rest.issues.removeLabel({\n              issue_number: process.env.PR_NUMBER,\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              name: 'levitate breaking change'\n            })\n\n      # Add reviewers\n      # This is very weird, the actual request goes through (comes back with a 201), but does not assign the team.\n      # Related issue: https://github.com/renovatebot/renovate/issues/1908\n      - name: Add \"grafana/plugins-platform-frontend\" as a reviewer\n        if: steps.levitate-run.outputs.exit_code == 1\n        uses: actions/github-script@v7\n        env:\n          PR_NUMBER: ${{ steps.levitate-run.outputs.pr_number }}\n        with:\n          github-token: ${{ steps.generate_token.outputs.token }}\n          script: |\n            await github.rest.pulls.requestReviewers({\n              pull_number: process.env.PR_NUMBER,\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              reviewers: [],\n              team_reviewers: ['plugins-platform-frontend']\n            });\n\n      # Remove reviewers (no more breaking changes)\n      - name: Remove \"grafana/plugins-platform-frontend\" from the list of reviewers\n        if: steps.levitate-run.outputs.exit_code == 0\n        uses: actions/github-script@v7\n        env:\n          PR_NUMBER: ${{ steps.levitate-run.outputs.pr_number }}\n        with:\n          github-token: ${{ steps.generate_token.outputs.token }}\n          script: |\n            await github.rest.pulls.removeRequestedReviewers({\n              pull_number: process.env.PR_NUMBER,\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              reviewers: [],\n              team_reviewers: ['plugins-platform-frontend']\n            });\n\n      - name: Exit\n        run: |\n          if [ \"${LV_EXIT_CODE}\" -ne 0 ]; then\n            echo \"Breaking changes detected. Please check the levitate report in your pull request. This workflow won't block merging.\"\n          fi\n\n          exit \"${LV_EXIT_CODE}\"\n        shell: bash\n        env:\n          LV_EXIT_CODE: ${{ steps.levitate-run.outputs.exit_code }}\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "complex", "file_path": ".github/workflows/detect-breaking-changes-levitate.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.9075000000000002, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "---\nname: Detect Plugin Extension Changes\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\npermissions: {}\n\non:\n  pull_request:\n    branches:\n      - 'main'\n    paths:\n      - 'packages/**'\n      - 'public/**'\n\nenv:\n  # Space-separated list of keywords referring to plugin extensions\n  PLUGIN_EXTENSION_KEYWORDS: \"usePluginLinks, usePluginComponent, usePluginComponents, usePluginFunctions, PluginExtensionPoints\"\n\njobs:\n  detect-plugin-extension-changes:\n    name: Detect Plugin Extension Changes\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      id-token: write\n    if: github.event.pull_request.head.repo.full_name == github.repository\n\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n          persist-credentials: false\n\n      - name: Check for plugin extension changes\n        id: check-changes\n        uses: actions/github-script@v7\n        with:\n          script: |\n            const { execSync } = require('child_process');\n            const fs = require('fs');\n            \n            // Plugin extension keywords from environment\n            const keywords = process.env.PLUGIN_EXTENSION_KEYWORDS.split(',');\n            const baseSha = '${{ github.event.pull_request.base.sha }}';\n            const headSha = '${{ github.event.pull_request.head.sha }}';\n            \n            console.log('Checking for plugin extension changes...');\n            console.log('Keywords:', keywords);\n            \n            // Get changed files in packages/ and public/ directories\n            let changedFiles = [];\n            const diffOutput = execSync(\n              `git diff --name-only ${baseSha}...${headSha} -- packages/ public/`,\n              { encoding: 'utf8' }\n            ).trim();\n            \n            if (diffOutput) {\n              changedFiles = diffOutput.split('\\n').filter(file => {\n                // Validate file path and ensure it's in target directories\n                return file.match(/^(packages\\/|public\\/)/) && \n                        file.match(/^[a-zA-Z0-9._/-]+$/) && \n                        fs.existsSync(file);\n              });\n            }\n            \n            console.log('Changed files to check:', changedFiles);\n            \n            // Check each file for plugin extension keywords\n            const filesWithChanges = new Set();\n            let hasPluginExtensionChanges = false;\n            \n            for (const file of changedFiles) {\n              try {\n                // Get the diff for this specific file\n                const fileDiff = execSync(\n                  `git diff ${baseSha}...${headSha} -- \"${file}\"`,\n                  { encoding: 'utf8' }\n                );\n                \n                // Check if any keywords are in the diff\n                for (const keyword of keywords) {\n                  if (fileDiff.includes(keyword)) {\n                    console.log(`Found ${keyword} in ${file}`);\n                    filesWithChanges.add(file);\n                    hasPluginExtensionChanges = true;\n                    break; // Found at least one keyword, move to next file\n                  }\n                }\n              } catch (error) {\n                console.log(`Error checking file ${file}:`, error.message);\n              }\n            }\n            \n            // Set outputs\n            const filesArray = Array.from(filesWithChanges);\n            const formattedFiles = filesArray.length > 0 \n              ? '`' + filesArray.join('`\\\\n- `') + '`'\n              : '';\n            \n            core.setOutput('plugin_extension_changes', hasPluginExtensionChanges.toString());\n            core.setOutput('formatted_changed_files', formattedFiles);\n\n            if (hasPluginExtensionChanges) {\n              console.log('The following files have changes that may affect plugin extensions:');\n              console.log(filesArray);\n            } else {\n              console.log('No changes detected in core Grafana extensions or extension points.');\n            }\n\n      - name: Send Slack Message via Payload\n        id: slack\n        if: steps.check-changes.outputs.plugin_extension_changes == 'true'\n        uses: grafana/shared-workflows/actions/send-slack-message@0941e3408fa4789fec9062c44a2a9e1832146ba6 #v2.0.1\n        with:\n          method: chat.postMessage\n          payload-templated: true\n          payload: |\n            {\n              \"channel\": \"C031SLFH6G0\",\n              \"text\": \"Plugin Extension changes in core Grafana *PR:* <${{ github.event.pull_request.html_url }}|#${{ github.event.pull_request.number }} :information_source:\",\n              \"icon_emoji\": \":grot:\",\n              \"username\": \"Plugin Extension Bot\",\n              \"blocks\": [\n                {\n                  \"type\": \"section\",\n                  \"text\": {\n                    \"type\": \"mrkdwn\",\n                    \"text\": \"*Plugin Extensions:* possible changes to extension points in core Grafana.\"\n                  }\n                },\n                {\n                  \"type\": \"section\",\n                  \"text\": {\n                    \"type\": \"mrkdwn\",\n                    \"text\": \"*PR:* <${{ github.event.pull_request.html_url }}|#${{ github.event.pull_request.number }}>\\n*Job:* <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Job>\"\n                  }\n                },\n                {\n                  \"type\": \"section\",\n                  \"text\": {\n                    \"type\": \"mrkdwn\",\n                    \"text\": \"*File(s) with changes:*\\n- ${{ steps.check-changes.outputs.formatted_changed_files }}\"\n                  }\n                },\n                {\n                  \"type\": \"section\",\n                  \"text\": {\n                    \"type\": \"mrkdwn\",\n                    \"text\": \"*What to do?*\\nMake sure that:\\n- All extension point ids start with `grafana/`\\n- All extension point ids are exposed via <https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/types/pluginExtensions.ts#L183|the `PluginExtensionPoints` enum in grafana-data>\\n- Core Grafana is not registering extensions to extension points offered by plugins\"\n                  }\n                }\n              ]\n            } ", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "complex", "file_path": ".github/workflows/detect-plugin-extension-changes.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.7999999999999999, "syntax_valid": true, "completeness_score": 0.6, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Documentation CI\non:\n  pull_request:\n    branches: [\"main\"]\n    paths: [\"docs/sources/**\"]\n  workflow_dispatch:\n\npermissions: {}\n\njobs:\n  vale:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      pull-requests: write\n      security-events: write\n    container:\n      image: grafana/vale:latest # zizmor: ignore[unpinned-images]\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n      - uses: grafana/writers-toolkit/vale-action@vale-action/v1 # zizmor: ignore[unpinned-uses]\n        with:\n          filter: '.Name in [\"Grafana.GrafanaCom\", \"Grafana.WordList\", \"Grafana.Spelling\", \"Grafana.ProductPossessives\"]'\n          token: ${{ secrets.GITHUB_TOKEN }}\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/documentation-ci.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8650000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Run e2e for dashboardNewLayouts\n\non:\n  pull_request:\n    branches:\n      - '**'\n    paths:\n      - 'e2e/dashboard-new-layouts/**'\n      - 'public/app/features/dashboard-scene/**'\n\nenv:\n  ARCH: linux-amd64\n\njobs:\n  dashboard-new-layouts-e2e:\n    runs-on: ubuntu-latest\n    continue-on-error: true\n    if: github.event.pull_request.draft == false\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n      - name: Pin Go version to mod file\n        uses: actions/setup-go@v5\n        with:\n          go-version-file: 'go.mod'\n      - run: go version\n      - uses: actions/setup-node@v4\n        with:\n          node-version-file: '.nvmrc'\n          cache: 'yarn'\n      - name: Install dependencies\n        run: yarn install --immutable\n      - name: Build grafana\n        run: make build\n      - name: Install Cypress dependencies\n        uses: cypress-io/github-action@108b8684ae52e735ff7891524cbffbcd4be5b19f\n        with:\n          runTests: false\n      - name: Run dashboardNewLayouts e2e\n        run: yarn e2e:dashboard-new-layouts\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/e2e-dashboard-new-layouts.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: \"Ephemeral instances\"\n\non:\n  issue_comment:\n    types: [created]\n  pull_request:\n    types: [closed]\n\npermissions: {}\n\njobs:\n  handle-ephemeral-instances:\n    if: ${{ github.event.issue.pull_request && (startsWith(github.event.comment.body, '/deploy-to-hg') || github.event.action == 'closed') && github.repository_owner == 'grafana' }}\n    runs-on:\n      labels: ubuntu-latest-16-cores\n    continue-on-error: true\n    permissions:\n      # For commenting.\n      pull-requests: write\n      # No contents permission is needed because we will impersonate an app to create the PR instead.\n      id-token: write # required for vault access\n\n    steps:\n      - name: Get vault secrets\n        id: vault-secrets\n        uses: grafana/shared-workflows/actions/get-vault-secrets@main\n        with:\n          # Secrets placed in ci/repo/grafana/grafana/\n          repo_secrets: |\n            APP_ID=ephemeral-instances-bot:app-id\n            APP_PEM=ephemeral-instances-bot:app-private-key\n            GCOM_HOST=ephemeral-instances-bot:gcom-host\n            GCOM_TOKEN=ephemeral-instances-bot:gcom-token\n            REGISTRY=ephemeral-instances-bot:registry\n            GCP_SA_ACCOUNT_KEY_BASE64=ephemeral-instances-bot:sa-key\n\n      - name: Generate a GitHub app installation token\n        id: generate_token\n        uses: tibdex/github-app-token@b62528385c34dbc9f38e5f4225ac829252d1ea92 # v1.8.0\n        with:\n          app_id: ${{ env.APP_ID }}\n          private_key: ${{ env.APP_PEM }}\n\n      - name: Checkout ephemeral instances repository\n        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4\n        with:\n          repository: grafana/ephemeral-grafana-instances-github-action\n          token: ${{ steps.generate_token.outputs.token }}\n          ref: main\n          path: ephemeral\n          persist-credentials: false\n\n      - name: build and deploy ephemeral instance\n        uses: ./ephemeral\n        with:\n          github-token: ${{ steps.generate_token.outputs.token }}\n          gcom-host: ${{ env.GCOM_HOST }}\n          gcom-token: ${{ env.GCOM_TOKEN }}\n          registry: \"${{ env.REGISTRY }}\"\n          gcp-service-account-key: ${{ env.GCP_SA_ACCOUNT_KEY_BASE64 }}\n          ephemeral-org-id: ephemeral\n          oss-or-enterprise: oss\n          verbose: true\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/ephemeral-instances-pr-comment.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8700000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Feature toggles CI\n\non:\n  pull_request:\n    paths:\n      - 'pkg/services/featuremgmt/toggles_gen_test.go'\n      - 'pkg/services/featuremgmt/registry.go'\n      - 'docs/sources/setup-grafana/configure-grafana/feature-toggles/index.md'\n\npermissions: {}\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    permissions:\n      contents: read\n\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n\n      - name: Set up Go\n        uses: actions/setup-go@v5\n        with:\n          go-version-file: 'go.mod'\n          cache: true\n\n      - name: Run feature toggle tests\n        run: go test -v -run TestFeatureToggleFiles ./pkg/services/featuremgmt/\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/feature-toggles-ci.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Lint Frontend\non:\n  pull_request:\n  push:\n    branches:\n      - main\n      - release-*.*.*\n\npermissions: {}\n\njobs:\n  detect-changes:\n    name: Detect whether code changed\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    outputs:\n      changed: ${{ steps.detect-changes.outputs.frontend }}\n      prettier: ${{ steps.detect-changes.outputs.frontend == 'true' || steps.detect-changes.outputs.docs == 'true' }}\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          persist-credentials: true # required to get more history in the changed-files action\n          fetch-depth: 2\n      - name: Detect changes\n        id: detect-changes\n        uses: ./.github/actions/change-detection\n        with:\n          self: .github/workflows/frontend-lint.yml\n\n  lint-frontend-prettier:\n    needs: detect-changes\n    permissions:\n      contents: read\n      id-token: write\n    # Run this workflow only for PRs from forks; if it gets merged into `main` or `release-*`,\n    # the `lint-frontend-prettier-enterprise` workflow will run instead\n    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == true && needs.detect-changes.outputs.prettier == 'true'\n    name: Lint\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n      with:\n        persist-credentials: false\n    - uses: actions/setup-node@v4\n      with:\n        node-version-file: '.nvmrc'\n        cache: 'yarn'\n        cache-dependency-path: 'yarn.lock'\n    - run: yarn install --immutable --check-cache\n    - run: yarn run prettier:check\n    - run: yarn run lint\n  lint-frontend-prettier-enterprise:\n    needs: detect-changes\n    permissions:\n      contents: read\n      id-token: write\n    # Run this workflow for non-PR events (like pushes to `main` or `release-*`) OR for internal PRs (PRs not from forks)\n    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false && needs.detect-changes.outputs.prettier == 'true'\n    name: Lint\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n      with:\n        persist-credentials: false\n    - uses: actions/setup-node@v4\n      with:\n        node-version-file: '.nvmrc'\n        cache: 'yarn'\n        cache-dependency-path: 'yarn.lock'\n    - name: Setup Enterprise\n      uses: ./.github/actions/setup-enterprise\n      with:\n        github-app-name: 'grafana-ci-bot'\n    - run: yarn install --immutable --check-cache\n    - run: yarn run prettier:check\n    - run: yarn run lint\n  lint-frontend-typecheck:\n    needs: detect-changes\n    permissions:\n      contents: read\n      id-token: write\n    # Run this workflow only for PRs from forks; if it gets merged into `main` or `release-*`,\n    # the `lint-frontend-typecheck-enterprise` workflow will run instead\n    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == true && needs.detect-changes.outputs.changed == 'true'\n    name: Typecheck\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n      with:\n        persist-credentials: false\n    - uses: actions/setup-node@v4\n      with:\n        node-version-file: '.nvmrc'\n        cache: 'yarn'\n        cache-dependency-path: 'yarn.lock'\n    - run: yarn install --immutable --check-cache\n    - run: yarn run typecheck\n  lint-frontend-typecheck-enterprise:\n    needs: detect-changes\n    permissions:\n      contents: read\n      id-token: write\n    # Run this workflow for non-PR events (like pushes to `main` or `release-*`) OR for internal PRs (PRs not from forks)\n    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false && needs.detect-changes.outputs.changed == 'true'\n    name: Typecheck\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n      with:\n        persist-credentials: false\n    - uses: actions/setup-node@v4\n      with:\n        node-version-file: '.nvmrc'\n        cache: 'yarn'\n        cache-dependency-path: 'yarn.lock'\n    - name: Setup Enterprise\n      uses: ./.github/actions/setup-enterprise\n      with:\n        github-app-name: 'grafana-ci-bot'\n    - run: yarn install --immutable --check-cache\n    - run: yarn run typecheck\n  lint-frontend-betterer:\n    needs: detect-changes\n    permissions:\n      contents: read\n      id-token: write\n    if: needs.detect-changes.outputs.changed == 'true'\n    name: Betterer\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n      with:\n        persist-credentials: false\n    - uses: actions/setup-node@v4\n      with:\n        node-version-file: '.nvmrc'\n        cache: 'yarn'\n        cache-dependency-path: 'yarn.lock'\n    - run: yarn install --immutable --check-cache\n    - run: yarn run betterer:ci\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "complex", "file_path": ".github/workflows/frontend-lint.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8700000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Create or update GitHub release\non:\n  workflow_call:\n    inputs:\n      version:\n        required: true\n        description: Needs to match, exactly, the name of a milestone (NO v prefix)\n        type: string\n      latest:\n        required: false\n        default: \"0\"\n        description: Mark this release as latest (`1`) or not (`0`, default)\n        type: string\n      dry_run:\n        required: false\n        default: false\n        type: boolean\n  workflow_dispatch:\n    inputs:\n      version:\n        required: true\n        description: Needs to match, exactly, the name of a milestone (NO v prefix)\n        type: string\n      latest:\n        required: false\n        default: \"0\"\n        description: Mark this release as latest (`1`) or not (`0`, default)\n        type: string\n      dry_run:\n        required: false\n        default: false\n        type: boolean\n\npermissions:\n  # contents: write allows the action(s) to create github releases\n  contents: write\n  id-token: write\n\njobs:\n  main:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Create GitHub release (manually invoked)\n        uses: grafana/grafana-github-actions-go/github-release@main # zizmor: ignore[unpinned-uses]\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          version: ${{ inputs.version }}\n          latest: ${{ inputs.latest }}\n          dry_run: ${{ inputs.dry_run }}\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/github-release.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8700000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: golangci-lint\non:\n  push:\n    paths:\n      - pkg/**\n      - .github/workflows/go-lint.yml\n      - go.*\n    branches:\n      - main\n  pull_request:\n\npermissions:\n  contents: read\n\njobs:\n  lint-go:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n      - uses: actions/setup-go@v5\n        with:\n          go-version-file: ./go.mod\n      - name: golangci-lint\n        uses: golangci/golangci-lint-action@1481404843c368bc19ca9406f87d6e0fc97bdcfd\n        with:\n          version: v2.0.2\n          args: |\n            --verbose $(go list -m -f '{{.Dir}}' | xargs -I{} sh -c 'test ! -f {}/.nolint && echo {}/...')\n          install-mode: binary\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/go-lint.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8200000000000001, "syntax_valid": true, "completeness_score": 0.8, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Crowdin automatic task management\n\non:\n  workflow_dispatch:\n  # once a month on the first day of the month at midnight\n  schedule:\n    - cron: \"0 0 1 * *\"\n\njobs:\n  create-tasks-in-crowdin:\n    uses: grafana/grafana-github-actions/.github/workflows/crowdin-create-tasks.yml@main\n    with:\n      crowdin_project_id: 5\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/i18n-crowdin-create-tasks.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8700000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Crowdin Download Action\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: \"0 0 * * *\"\n\njobs:\n  download-sources-from-crowdin:\n    if: github.repository == 'grafana/grafana'\n    uses: grafana/grafana-github-actions/.github/workflows/crowdin-download.yml@main\n    with:\n      crowdin_project_id: 5\n      pr_labels: 'area/frontend, area/internationalization, no-changelog, no-backport'\n      github_board_id: 78 # Frontend Platform project\n      en_paths: public/locales/en-US/grafana.json, public/app/plugins/datasource/azuremonitor/locales/en-US/grafana-azure-monitor-datasource.json, public/app/plugins/datasource/mssql/locales/en-US/mssql.json, packages/grafana-prometheus/src/locales/en-US/grafana-prometheus.json, packages/grafana-sql/src/locales/en-US/grafana-sql.json\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/i18n-crowdin-download.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Crowdin Upload Action\n\non:\n  workflow_dispatch:\n  push:\n    paths:\n      - 'public/locales/en-US/grafana.json'\n      - 'public/app/plugins/datasource/azuremonitor/locales/en-US/grafana-azure-monitor-datasource.json'\n      - 'public/app/plugins/datasource/mssql/locales/en-US/mssql.json'\n      - 'packages/grafana-sql/src/locales/en-US/grafana-sql.json'\n      - 'packages/grafana-prometheus/src/locales/en-US/grafana-prometheus.json'\n    branches:\n      - main\n\njobs:\n  upload-sources-to-crowdin:\n    if: github.repository == 'grafana/grafana'\n    uses: grafana/grafana-github-actions/.github/workflows/crowdin-upload.yml@main\n    with:\n      crowdin_project_id: 5\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/i18n-crowdin-upload.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Verify i18n\n\npermissions:\n  contents: read\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n      - release-*.*.*\n\njobs:\n  verify-i18n:\n    uses: grafana/grafana-github-actions/.github/workflows/verify-i18n.yml@main\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/i18n-verify.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Run commands when issues are opened\n\n# important: this workflow uses a github app that is strictly limited\n# to issues. If you want to change the triggers for this workflow,\n# please review if the permissions are still sufficient.\non:\n  issues:\n    types: [opened]\n\nconcurrency:\n  group: issue-opened-${{ github.event.issue.number }}\n\npermissions: {}\n\njobs:\n  main:\n    runs-on: ubuntu-latest\n    if: github.repository == 'grafana/grafana'\n    permissions:\n      contents: read\n      id-token: write\n    steps:\n\n      - name: Checkout Actions\n        uses: actions/checkout@v4 # v4.2.2\n        with:\n          repository: \"grafana/grafana-github-actions\"\n          path: ./actions\n          ref: main\n          persist-credentials: false\n\n      - name: Install Actions\n        run: npm install --production --prefix ./actions\n\n      # give issue-openers a chance to add labels after submit\n      - name: Sleep for 2 minutes\n        run: sleep 2m\n        shell: bash\n\n      - name: \"Get vault secrets\"\n        id: vault-secrets\n        uses: grafana/shared-workflows/actions/get-vault-secrets@main # zizmor: ignore[unpinned-uses]\n        with:\n          # Secrets placed in the ci/repo/grafana/grafana/plugins_platform_issue_commands_github_bot path in Vault\n          repo_secrets: |\n            GITHUB_APP_ID=grafana_pr_automation_app:app_id\n            GITHUB_APP_PRIVATE_KEY=grafana_pr_automation_app:app_pem\n\n      - name: Generate token\n        id: generate_token\n        uses: actions/create-github-app-token@3ff1caaa28b64c9cc276ce0a02e2ff584f3900c5 # v2.0.2\n        with:\n          app-id: ${{ env.GITHUB_APP_ID }}\n          private-key: ${{ env.GITHUB_APP_PRIVATE_KEY }}\n\n      - name: Run Commands\n        uses: ./actions/commands\n        with:\n          token: ${{ steps.generate_token.outputs.token }}\n          configPath: \"issue-opened\"\n\n  auto-triage:\n    needs: [main]\n    permissions:\n      contents: read\n      id-token: write\n    if: github.repository == 'grafana/grafana' && github.event.issue.author_association != 'MEMBER' && github.event.issue.author_association != 'OWNER'\n    runs-on: ubuntu-latest\n    steps:\n\n      - name: \"Get vault secrets\"\n        id: vault-secrets\n        uses: grafana/shared-workflows/actions/get-vault-secrets@main # zizmor: ignore[unpinned-uses]\n        with:\n          # Secrets placed in the ci/repo/grafana/grafana/plugins_platform_issue_triager path in Vault\n          repo_secrets: |\n            AUTOTRIAGER_OPENAI_API_KEY=plugins_platform_issue_triager:AUTOTRIAGER_OPENAI_API_KEY\n            AUTOTRIAGER_SLACK_WEBHOOK_URL=plugins_platform_issue_triager:AUTOTRIAGER_SLACK_WEBHOOK_URL\n            GITHUB_APP_ID=plugins_platform_issue_triager_github_bot:app_id\n            GITHUB_APP_PRIVATE_KEY=plugins_platform_issue_triager_github_bot:app_pem\n\n      - name: Generate token\n        id: generate_token\n        uses: actions/create-github-app-token@3ff1caaa28b64c9cc276ce0a02e2ff584f3900c5 # v2.0.2\n        with:\n          app-id: ${{ env.GITHUB_APP_ID }}\n          private-key: ${{ env.GITHUB_APP_PRIVATE_KEY }}\n\n      - name: Checkout\n        uses: actions/checkout@v4 # v4.2.2\n        with:\n          persist-credentials: false\n\n      - name: Send issue to the auto triager action\n        id: auto_triage\n        uses: grafana/auto-triager@main # zizmor: ignore[unpinned-uses]\n        with:\n          token: ${{ steps.generate_token.outputs.token }}\n          issue_number: ${{ github.event.issue.number }}\n          openai_api_key: ${{ env.AUTOTRIAGER_OPENAI_API_KEY }}\n          add_labels: true\n          labels_file: ${{ github.workspace }}/.github/workflows/auto-triager/labels.txt\n          types_file: ${{ github.workspace }}/.github/workflows/auto-triager/types.txt\n          prompt_file: ${{ github.workspace }}/.github/workflows/auto-triager/prompt.txt\n\n      - name: \"Send Slack notification\"\n        if: ${{ steps.auto_triage.outputs.triage_labels != '' }}\n        uses: slackapi/slack-github-action@37ebaef184d7626c5f204ab8d3baff4262dd30f0 # v1.27.0\n        with:\n          payload: >\n            {\n              \"icon_emoji\": \":robocto:\",\n              \"username\": \"Auto Triager\",\n              \"type\": \"mrkdwn\",\n              \"text\": \"Auto triager found the following labels: ${{ steps.auto_triage.outputs.triage_labels }} for issue ${{ github.event.issue.html_url }}\",\n              \"channel\": \"#triage-automation-ci\"\n            }\n        env:\n          SLACK_WEBHOOK_URL:  ${{ env.AUTOTRIAGER_SLACK_WEBHOOK_URL }}\n  auto-label-internal-issues:\n    needs: [main]\n    if: github.repository == 'grafana/grafana'\n    runs-on: ubuntu-latest\n    permissions:\n      issues: write\n      id-token: write\n    steps:\n        - name: \"Get vault secrets\"\n          id: vault-secrets\n          uses: grafana/shared-workflows/actions/get-vault-secrets@main # zizmor: ignore[unpinned-uses]\n          with:\n            # Secrets placed in the ci/repo/grafana/grafana/plugins_platform_issue_triager path in Vault\n            repo_secrets: |\n              GITHUB_APP_ID=plugins_platform_issue_triager_github_bot:app_id\n              GITHUB_APP_PRIVATE_KEY=plugins_platform_issue_triager_github_bot:app_pem  \n        - name: Generate token\n          id: generate_token\n          uses: actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e # v2.0.6\n          with:\n            app-id: ${{ env.GITHUB_APP_ID }}\n            private-key: ${{ env.GITHUB_APP_PRIVATE_KEY }}\n            permission-members: read\n        - name: Check if member of grafana org\n          id: check-if-grafana-org-member\n          continue-on-error: true\n          run: gh api https://api.github.com/orgs/grafana/members/${{ env.ACTOR }} >/dev/null 2>&1 && echo \"is_grafana_org_member=true\" >> \"$GITHUB_OUTPUT\"\n          env:\n              GH_TOKEN: ${{ steps.generate_token.outputs.token }}\n              ACTOR: ${{ github.actor }}\n        - name: \"Auto label internal issues\"\n          if:  steps.check-if-grafana-org-member.outputs.is_grafana_org_member == 'true' || github.event.issue.author_association == 'MEMBER' || github.event.issue.author_association == 'OWNER'\n          run: gh issue edit \"$NUMBER\" --add-label \"$LABELS\"\n          env:\n            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n            GH_REPO: ${{ github.repository }}\n            NUMBER: ${{ github.event.issue.number }}\n            LABELS: internal", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "complex", "file_path": ".github/workflows/issue-opened.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8925000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Documentation\n\non:\n  pull_request:\n    paths:\n      - '*.md'\n      - 'docs/**'\n      - 'packages/**/*.md'\n      - 'latest.json'\n  push:\n    branches:\n      - main\n    paths:\n      - '*.md'\n      - 'docs/**'\n      - 'packages/**/*.md'\n      - 'latest.json'\n\npermissions: {}\n\njobs:\n  docs:\n    name: Build & Verify Docs\n    runs-on: ubuntu-latest\n\n    permissions:\n      contents: read\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version-file: '.nvmrc'\n          cache: 'yarn'\n\n      - name: Install dependencies\n        run: yarn install --immutable\n\n      - name: Lint docs\n        run: yarn run prettier:checkDocs\n        env:\n          # Increase memory for prettier due to large number of files\n          NODE_OPTIONS: --max_old_space_size=8192\n\n      - name: Build docs website\n        run: |\n          # Create and start a container from the docs-base image in detached mode\n          docker run -d --name docs-builder grafana/docs-base:latest tail -f /dev/null\n\n          # Create the directory structure inside the container\n          docker exec docs-builder mkdir -p /hugo/content/docs/grafana/latest\n\n          # Create the _index.md file\n          docker exec docs-builder /bin/sh -c \"echo -e '---\\nredirectURL: /docs/grafana/latest/\\ntype: redirect\\nversioned: true\\n---\\n' > /hugo/content/docs/grafana/_index.md\"\n\n          # Copy the docs sources from the host to the container\n          docker cp docs/sources/. docs-builder:/hugo/content/docs/grafana/latest/\n\n          # Run the make prod command inside the container\n          docker exec -w /hugo docs-builder make prod || echo \"Build completed with warnings\"\n\n          # Clean up the container\n          docker rm -f docs-builder\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/lint-build-docs.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.875, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Migrate open PRs\n# Migrate open PRs from a superseded release branch to the current release branch and notify authors\non: \n  workflow_call:\n    inputs:\n      from:\n        description: 'The base branch to check for open PRs'\n        required: true\n        type: string\n      to:\n        description: 'The base branch to migrate open PRs to'\n        required: true\n        type: string\n      ownerRepo:\n        description: Owner/repo of the repository where the branch is created (e.g. 'grafana/grafana')\n        required: true\n        type: string\n  workflow_dispatch:\n    inputs:\n      from:\n        description: 'The base branch to check for open PRs'\n        required: true\n        type: string\n      to:\n        description: 'The base branch to migrate open PRs to'\n        required: true\n        type: string\n      ownerRepo:\n        description: Owner/repo of the repository where the branch is created (e.g. 'grafana/grafana')\n        required: true\n        type: string\n\npermissions:\n  contents: read\n  id-token: write\n\njobs:\n  main:\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"Get vault secrets\"\n        id: vault-secrets\n        uses: grafana/shared-workflows/actions/get-vault-secrets@main\n        with:\n          # Secrets placed in the ci/data/repo/grafana/grafana/delivery-bot-app path in Vault\n          repo_secrets: |\n            GRAFANA_DELIVERY_BOT_APP_PEM=delivery-bot-app:PRIVATE_KEY\n      - name: \"Generate token\"\n        id: generate_token\n        uses: tibdex/github-app-token@b62528385c34dbc9f38e5f4225ac829252d1ea92\n        with:\n          app_id: ${{ vars.DELIVERY_BOT_APP_ID }}\n          private_key: ${{ env.GRAFANA_DELIVERY_BOT_APP_PEM }}\n      - name: Migrate PRs\n        uses: grafana/grafana-github-actions-go/migrate-open-prs@main\n        with:\n          token: ${{ steps.generate_token.outputs.token }}\n          ownerRepo: ${{ inputs.ownerRepo }}\n          from: ${{ inputs.from }}\n          to: ${{ inputs.to }}\n          binary_release_tag: 'dev'\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/migrate-prs.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8700000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: PR Checks\non:\n  pull_request_target:\n    types:\n      - opened\n      - reopened\n      - synchronize\n      - ready_for_review\n      - labeled\n      - unlabeled\n      - edited\n      - auto_merge_enabled\n  issues:\n    types:\n      - milestoned\n      - demilestoned\n\nconcurrency:\n  group: pr-checks-${{ github.event.number }}\n\npermissions:\n  statuses: write\n  checks: write\n  actions: write\n  contents: read\n  pull-requests: read\n\njobs:\n  main:\n    runs-on: ubuntu-latest\n    if: github.event.pull_request.draft == false\n    steps:\n      - name: Checkout Actions\n        uses: actions/checkout@v4 # v4.2.2\n        with:\n          repository: \"grafana/grafana-github-actions\"\n          path: ./actions\n          ref: main\n          persist-credentials: false\n      - name: Install Actions\n        run: npm install --production --prefix ./actions\n      - name: Run PR Checks\n        uses: ./actions/pr-checks\n        with:\n          token: ${{secrets.GITHUB_TOKEN}}\n          configPath: pr-checks\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/pr-checks.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8825000000000002, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: \"CodeQL for PR / javascript\"\n\non:\n  workflow_dispatch:\n  pull_request:\n    branches: [main]\n    paths:\n      - '**/*.js'\n      - '**/*.ts'\n      - '**/*.tsx'\n\npermissions:\n  security-events: write\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    if: github.repository == 'grafana/grafana'\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v4\n      with:\n        # We must fetch at least the immediate parents so that if this is\n        # a pull request then we can checkout the head.\n        fetch-depth: 2\n        persist-credentials: false\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v3\n      with:\n        languages: \"javascript\"\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v3\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/pr-codeql-analysis-javascript.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8700000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: \"CodeQL for PR / python\"\n\non:\n  workflow_dispatch:\n  pull_request:\n    branches: [main]\n    paths:\n      - '**/*.py'\n\npermissions:\n  security-events: write\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    if: github.repository == 'grafana/grafana'\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v4\n      with:\n        # We must fetch at least the immediate parents so that if this is\n        # a pull request then we can checkout the head.\n        fetch-depth: 2\n        persist-credentials: false\n\n    - name: Check for Python files\n      id: check-python\n      run: |\n        if [ -z \"$(find . -name '*.py' -type f)\" ]; then\n          echo \"No Python files found, skipping analysis\"\n          echo \"skip=true\" >> \"$GITHUB_OUTPUT\"\n        else\n          echo \"Python files found, proceeding with analysis\"\n          echo \"skip=false\" >> \"$GITHUB_OUTPUT\"\n        fi\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      if: steps.check-python.outputs.skip != 'true'\n      uses: github/codeql-action/init@v3\n      with:\n        languages: \"python\"\n\n    - name: Perform CodeQL Analysis\n      if: steps.check-python.outputs.skip != 'true'\n      uses: github/codeql-action/analyze@v3\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/pr-codeql-analysis-python.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.88, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: PR automation\non:\n  pull_request_target:\n    types:\n      - labeled\n      - opened\n      - synchronize\npermissions: {}\nconcurrency:\n  group: pr-commands-${{ github.event.number }}\njobs:\n  main:\n    permissions:\n      contents: read\n      pull-requests: write\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Actions\n        uses: actions/checkout@v4 # v4.2.2\n        with:\n          repository: \"grafana/grafana-github-actions\"\n          path: ./actions\n          ref: main\n          persist-credentials: false\n      - name: Install Actions\n        run: npm install --production --prefix ./actions\n      - name: Run Commands\n        uses: ./actions/commands\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          configPath: pr-commands\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/pr-commands.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: \"Update Go Workspace for Dependabot PRs\"\non:\n  pull_request:\n    branches: [main]\n    paths:\n      - .github/workflows/pr-dependabot-update-go-workspace.yml\n      - go.mod\n      - go.sum\n      - go.work\n      - go.work.sum\n      - '**/go.mod'\n      - '**/go.sum'\n      - '**.go'\npermissions:\n  contents: write\n  id-token: write\njobs:\n  update:\n    runs-on: \"ubuntu-latest\"\n    if: ${{ github.actor == 'dependabot[bot]' && github.event.pull_request.head.repo.full_name == github.repository }}\n    continue-on-error: true\n    steps:\n    - name: Retrieve GitHub App secrets\n      id: get-secrets\n      uses: grafana/shared-workflows/actions/get-vault-secrets@get-vault-secrets-v1.0.1 # zizmor: ignore[unpinned-uses]\n      with:\n        repo_secrets: |\n          APP_ID=grafana-go-workspace-bot:app-id\n          APP_INSTALLATION_ID=grafana-go-workspace-bot:app-installation-id\n          PRIVATE_KEY=grafana-go-workspace-bot:private-key\n\n    - name: Generate GitHub App token\n      id: generate_token\n      uses: actions/create-github-app-token@v1\n      with:\n        app-id: ${{ env.APP_ID }}\n        private-key: ${{ env.PRIVATE_KEY }}\n\n    - name: Checkout repository\n      uses: actions/checkout@v4\n      with:\n        repository: ${{ github.event.pull_request.head.repo.full_name }}\n        ref: ${{ github.event.pull_request.head.ref }}\n        token: ${{ steps.generate_token.outputs.token }}\n        persist-credentials: false\n\n    - name: Set go version\n      uses: actions/setup-go@19bb51245e9c80abacb2e91cc42b33fa478b8639\n      with:\n        go-version-file: go.mod\n\n    - name: Configure Git\n      run: |\n          git config --local user.email \"41898282+github-actions[bot]@users.noreply.github.com\"\n          git config --local user.name \"github-actions[bot]\"\n          git config --local --add --bool push.autoSetupRemote true\n\n    - name: Update workspace\n      run: make update-workspace\n\n    - name: Commit and push workspace changes\n      env:\n        BRANCH_NAME: ${{ github.head_ref || github.ref_name }} \n      run: |\n        if ! git diff --exit-code --quiet; then\n          echo \"Committing and pushing workspace changes\"\n          git commit -a -m \"update workspace\"\n          git push origin \"$BRANCH_NAME\"\n        fi\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/pr-dependabot-update-go-workspace.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.9025000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: External PR labelling\n\non:\n  # We need \"write\" permissions on the PR to be able to add a label.\n  pull_request_target: # zizmor: ignore[dangerous-triggers] We need this to have labelling permissions. There are no user inputs here, so we should be fine.\n    types:\n      - opened\n\npermissions: {}\n\njobs:\n  label-if-external:\n    name: Add 'pr/external' label if the PR is external\n    if: github.event.pull_request.author_association != 'MEMBER' && github.event.pull_request.author_association != 'OWNER'\n    runs-on: ubuntu-latest\n    permissions:\n      pull-requests: write # to write the label\n\n    steps:\n      - name: Add the 'pr/external' label\n        env:\n          PR_NUMBER: ${{ github.event.pull_request.number }}\n        run: |\n          echo \"Adding 'pr/external' label to the PR\"\n          gh pr edit \"$PR_NUMBER\" --add-label pr/external\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/pr-external-labelling.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8700000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Frontend tests\non:\n  pull_request:\n  push:\n    branches:\n      - main\n      - release-*.*.*\n\npermissions: {}\n\njobs:\n  detect-changes:\n    name: Detect whether code changed\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    outputs:\n      changed: ${{ steps.detect-changes.outputs.frontend }}\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          persist-credentials: true # required to get more history in the changed-files action\n          fetch-depth: 2\n      - name: Detect changes\n        id: detect-changes\n        uses: ./.github/actions/change-detection\n        with:\n          self: .github/workflows/pr-frontend-unit-tests.yml\n\n  frontend-unit-tests:\n    permissions:\n      contents: read\n      id-token: write\n    # Run this workflow only for PRs from forks; if it gets merged into `main` or `release-*`,\n    # the `frontend-unit-tests-enterprise` workflow will run instead\n    needs: detect-changes\n    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == true && needs.detect-changes.outputs.changed == 'true'\n    runs-on: ubuntu-latest-8-cores\n    name: \"Unit tests (${{ matrix.chunk }} / 8)\"\n    strategy:\n      fail-fast: false\n      matrix:\n        chunk: [1, 2, 3, 4, 5, 6, 7, 8]\n    steps:\n    - uses: actions/checkout@v4\n      with:\n        persist-credentials: false\n    - uses: actions/setup-node@v4\n      with:\n        node-version-file: '.nvmrc'\n        cache: 'yarn'\n        cache-dependency-path: 'yarn.lock'\n    - run: yarn install --immutable --check-cache\n    - run: yarn run test:ci\n      env:\n        TEST_MAX_WORKERS: 2\n        TEST_SHARD: ${{ matrix.chunk }}\n        TEST_SHARD_TOTAL: 8\n\n  frontend-unit-tests-enterprise:\n    permissions:\n      contents: read\n      id-token: write\n    # Run this workflow for non-PR events (like pushes to `main` or `release-*`) OR for internal PRs (PRs not from forks)\n    needs: detect-changes\n    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false && needs.detect-changes.outputs.changed == 'true'\n    runs-on: ubuntu-latest-8-cores\n    name: \"Unit tests (${{ matrix.chunk }} / 8)\"\n    strategy:\n      fail-fast: false\n      matrix:\n        chunk: [1, 2, 3, 4, 5, 6, 7, 8]\n    steps:\n    - uses: actions/checkout@v4\n      with:\n        persist-credentials: false\n    - uses: actions/setup-node@v4\n      with:\n        node-version-file: '.nvmrc'\n        cache: 'yarn'\n        cache-dependency-path: 'yarn.lock'\n    - name: Setup Enterprise\n      uses: ./.github/actions/setup-enterprise\n      with:\n        github-app-name: 'grafana-ci-bot'\n    - run: yarn install --immutable --check-cache\n    - run: yarn run test:ci\n      env:\n        TEST_MAX_WORKERS: 2\n        TEST_SHARD: ${{ matrix.chunk }}\n        TEST_SHARD_TOTAL: 8\n\n  frontend-decoupled-plugin-tests:\n    needs: detect-changes\n    if: needs.detect-changes.outputs.changed == 'true'\n    runs-on: ubuntu-latest-8-cores\n    name: \"Decoupled plugin tests\"\n    steps:\n    - uses: actions/checkout@v4\n      with:\n        persist-credentials: false\n    - uses: actions/setup-node@v4\n      with:\n        node-version-file: '.nvmrc'\n        cache: 'yarn'\n        cache-dependency-path: 'yarn.lock'\n    - run: yarn install --immutable --check-cache\n    - run: yarn run plugin:test:ci\n\n  # This is the job that is actually required by rulesets.\n  # We need to require EITHER the OSS or the Enterprise job to pass.\n  # However, if one is skipped, GitHub won't flat-map the shards,\n  #   so they won't be accepted by a ruleset.\n  required-frontend-unit-tests:\n    needs:\n      - frontend-unit-tests\n      - frontend-unit-tests-enterprise\n      - frontend-decoupled-plugin-tests\n    # always() is the best function here.\n    # success() || failure() will skip this function if any need is also skipped.\n    # That means conditional test suites will fail the entire requirement check.\n    if: always()\n\n    name: All frontend unit tests complete\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check test suites\n        env:\n          NEEDS: ${{ toJson(needs) }}\n        run: |\n          FAILURES=\"$(echo \"$NEEDS\" | jq 'with_entries(select(.value.result == \"failure\")) | map_values(.result)')\"\n          echo \"$FAILURES\"\n          if [ \"$(echo \"$FAILURES\" | jq '. | length')\" != \"0\" ]; then\n            exit 1\n          fi\n          echo \"All OK!\"\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "complex", "file_path": ".github/workflows/pr-frontend-unit-tests.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.88, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: \"Go Workspace Check\"\n\non:\n  workflow_dispatch:\n  pull_request:\n    branches: [main]\n    paths:\n      - .github/workflows/pr-go-workspace-check.yml\n      - go.mod\n      - go.sum\n      - go.work\n      - go.work.sum\n      - '**/go.mod'\n      - '**/go.sum'\n      - '**.go'\n\njobs:\n  check:\n    name: Go Workspace Check\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v4\n      with:\n        persist-credentials: false\n\n    - name: Set go version\n      uses: actions/setup-go@19bb51245e9c80abacb2e91cc42b33fa478b8639\n      with:\n        cache: false\n        go-version-file: go.mod\n\n    - name: Update workspace\n      run: make update-workspace\n\n    - name: Check for go mod & workspace changes \n      run: |\n        if ! git diff --exit-code --quiet; then\n          echo \"Changes detected:\"\n          git diff\n          echo \"Please run 'make update-workspace' and commit the changes.\"\n          echo \"If there is a change in enterprise dependencies, please update pkg/extensions/main.go.\"\n          exit 1\n        fi\n    - name: Ensure Dockerfile contains submodule COPY commands\n      run: ./scripts/go-workspace/validate-dockerfile.sh\n\n  check-wire:\n    name: Check Wire Changes\n    runs-on: ubuntu-latest\n\n    permissions:\n      contents: read\n      id-token: write\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v4\n      with:\n        persist-credentials: false\n\n    - name: Set go version\n      uses: actions/setup-go@19bb51245e9c80abacb2e91cc42b33fa478b8639\n      with:\n        cache: false\n        go-version-file: go.mod\n\n    - name: Setup Enterprise\n      if: github.event.pull_request.head.repo.fork == false\n      uses: ./.github/actions/setup-enterprise\n\n    - name: Calculate generated wire checksums\n      id: pre_gen_oss\n      run: |\n        OSS_WIRE_CHECKSUM=\"$(sha256sum pkg/server/wire_gen.go | cut -d' ' -f1)\"\n        echo \"wire_checksum=$OSS_WIRE_CHECKSUM\" >> \"$GITHUB_OUTPUT\"\n\n    - name: Calculate generated enterprise wire checksums\n      id: pre_gen_enterprise\n      if: github.event.pull_request.head.repo.fork == false\n      run: |\n        ENTERPRISE_WIRE_CHECKSUM=\"$(sha256sum pkg/server/enterprise_wire_gen.go | cut -d' ' -f1)\"\n        echo \"wire_checksum=$ENTERPRISE_WIRE_CHECKSUM\" >> \"$GITHUB_OUTPUT\"\n\n    - name: Generate Go files\n      run: make gen-go\n\n    - name: Check for generated file changes\n      run: |\n        OSS_WIRE_CHANGED=false\n        CURRENT_OSS_WIRE_CHECKSUM=$(sha256sum pkg/server/wire_gen.go | cut -d' ' -f1)\n        if [ \"$CURRENT_OSS_WIRE_CHECKSUM\" != \"${{ steps.pre_gen_oss.outputs.wire_checksum }}\" ]; then\n          OSS_WIRE_CHANGED=true\n          echo \"Uncomitted changes detected in pkg/server/wire_gen.go\"\n        fi\n\n        ENTERPRISE_WIRE_CHANGED=false\n        if [ -f \"pkg/server/enterprise_wire_gen.go\" ]; then\n          CURRENT_ENTERPRISE_WIRE_CHECKSUM=$(sha256sum pkg/server/enterprise_wire_gen.go | cut -d' ' -f1)\n          if [ \"$CURRENT_ENTERPRISE_WIRE_CHECKSUM\" != \"${{ steps.pre_gen_enterprise.outputs.wire_checksum }}\" ]; then\n            ENTERPRISE_WIRE_CHANGED=true\n            echo \"Uncomitted changes detected in pkg/server/enterprise_wire_gen.go\"\n          fi\n        fi\n        \n        if [ \"$OSS_WIRE_CHANGED\" = \"false\" ] && [ \"$ENTERPRISE_WIRE_CHANGED\" = \"false\" ]; then\n          echo \"No changes in generated Go files\"\n        else\n          if [[ \"${{ github.event.pull_request.head.repo.fork }}\" == \"false\" ]]; then\n            echo \"> !!! Please link Enterprise and run 'make gen-go', then commit the changes to both repositories.\"\n          else\n            echo \"> !!! Please run 'make gen-go' and commit the changes.\"\n          fi\n          exit 1\n        fi\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "complex", "file_path": ".github/workflows/pr-go-workspace-check.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.9025000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: \"K8s Codegen Check\"\n\non:\n  workflow_dispatch:\n  pull_request:\n    branches: [main]\n    paths:\n      - \"pkg/apis/**\"\n      - \"pkg/aggregator/apis/**\"\n      - \"pkg/apimachinery/apis/**\"\n      - \"hack/**\"\n      - \"apps/**\"\n      - \"*.sum\"\n\njobs:\n  check:\n    name: K8s Codegen Check\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v4\n      with:\n        persist-credentials: false\n\n    - name: Set go version\n      uses: actions/setup-go@19bb51245e9c80abacb2e91cc42b33fa478b8639\n      with:\n        go-version-file: go.mod\n\n    - name: Update k8s codegen\n      run: ./hack/update-codegen.sh\n\n    - name: Check for k8s codegen changes\n      run: |\n        if ! git diff --exit-code --quiet; then\n          echo \"Changes detected:\"\n          git diff\n          echo \"Please run './hack/update-codegen.sh' and commit the changes.\"\n          exit 1\n        fi\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/pr-k8s-codegen-check.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.7925, "syntax_valid": true, "completeness_score": 0.5, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Dispatch check for patch conflicts\non:\n  pull_request:\n    types:\n      - opened\n      - reopened\n      - synchronize\n    branches:\n      - \"main\"\n      - \"release-*\"\n\npermissions:\n  id-token: write\n  contents: read\n\n# Since this is run on a pull request, we want to apply the patches intended for the\n# target branch onto the source branch, to verify compatibility before merging.\njobs:\n  dispatch-job:\n    uses: grafana/grafana/.github/workflows/pr-patch-check.yml@main\n    with:\n      head_ref: ${{ github.head_ref }}\n      base_ref: ${{ github.base_ref }}\n      repo: ${{ github.repository }}\n      sender_login: ${{ github.event.sender.login }}\n      sha: ${{ github.sha }}\n      pr_commit_sha: ${{ github.event.pull_request.head.sha }}\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "simple", "file_path": ".github/workflows/pr-patch-check-event.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8825000000000002, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Dispatch check for patch conflicts\non:\n  workflow_call:\n    inputs:\n      head_ref:\n        type: string\n        required: true\n      base_ref:\n        type: string\n        required: true\n      repo:\n        type: string\n        required: true\n      sender_login:\n        type: string\n        required: true\n      sha:\n        type: string\n        required: true\n      pr_commit_sha:\n        type: string\n        required: true\n\npermissions:\n  id-token: write\n  contents: read\n\n# Since this is run on a pull request, we want to apply the patches intended for the\n# target branch onto the source branch, to verify compatibility before merging.\njobs:\n  dispatch-job:\n    env:\n      HEAD_REF: ${{ inputs.head_ref }}\n      BASE_REF: ${{ github.base_ref }}\n      REPO: ${{ inputs.repo }}\n      SENDER: ${{ inputs.sender_login }}\n      SHA: ${{ inputs.sha }}\n      PR_COMMIT_SHA: ${{ inputs.pr_commit_sha }}\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"Get vault secrets\"\n        id: vault-secrets\n        uses: grafana/shared-workflows/actions/get-vault-secrets@main\n        with:\n          # Secrets placed in the ci/data/repo/grafana/grafana/delivery-bot-app path in Vault\n          repo_secrets: |\n            GRAFANA_DELIVERY_BOT_APP_PEM=delivery-bot-app:PRIVATE_KEY\n      - name: \"Generate token\"\n        id: generate_token\n        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a\n        with:\n          # App needs Actions: Read/Write for the grafana/security-patch-actions repo\n          app_id: ${{ vars.DELIVERY_BOT_APP_ID }}\n          private_key: ${{ env.GRAFANA_DELIVERY_BOT_APP_PEM }}\n          permissions: \"{\\\"actions\\\": \\\"write\\\", \\\"workflows\\\": \\\"write\\\"}\"\n          repositories: \"[\\\"security-patch-actions\\\"]\"\n      - name: \"Dispatch job\"\n        uses: actions/github-script@v7\n        with:\n          github-token: ${{ steps.generate_token.outputs.token }}\n          script: |\n            const {HEAD_REF, BASE_REF, REPO, SENDER, SHA, PR_COMMIT_SHA} = process.env;\n\n            await github.rest.actions.createWorkflowDispatch({\n                owner: 'grafana',\n                repo: 'security-patch-actions',\n                workflow_id: 'test-patches-event.yml',\n                ref: 'main',\n                inputs: {\n                  src_repo: REPO,\n                  src_ref: HEAD_REF,\n                  src_merge_sha: SHA,\n                  src_pr_commit_sha: PR_COMMIT_SHA,\n                  patch_repo: REPO + '-security-patches',\n                  patch_ref: BASE_REF,\n                  triggering_github_handle: SENDER\n                }\n            })\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "medium", "file_path": ".github/workflows/pr-patch-check.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.8925000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "cicd_pipelines", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate GitHub Actions workflow for automated deployment and testing\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "name: Integration Tests\n\non:\n  push:\n    branches:\n      - main\n      - release-*.*.*\n  pull_request:\n    types:\n      - opened\n      - synchronize\n      - reopened\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}\n\npermissions: {}\n\njobs:\n  sqlite:\n    strategy:\n      matrix:\n        shard: [\n          1/8, 2/8, 3/8, 4/8,\n          5/8, 6/8, 7/8, 8/8,\n        ]\n      fail-fast: false\n\n    name: Sqlite (${{ matrix.shard }})\n    runs-on: ubuntu-latest-8-cores\n    permissions:\n      contents: read\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n      - name: Setup Go\n        uses: actions/setup-go@v5\n        with:\n          go-version-file: go.mod\n          cache: true\n      - name: Run tests\n        env:\n          SHARD: ${{ matrix.shard }}\n        run: |\n          set -euo pipefail\n          readarray -t PACKAGES <<< \"$(./scripts/ci/backend-tests/pkgs-with-tests-named.sh -b TestIntegration | ./scripts/ci/backend-tests/shard.sh -N\"$SHARD\" -d-)\"\n          go test -tags=sqlite -timeout=5m -run '^TestIntegration' \"${PACKAGES[@]}\"\n  mysql:\n    strategy:\n      matrix:\n        shard: [\n          1/8, 2/8, 3/8, 4/8,\n          5/8, 6/8, 7/8, 8/8,\n        ]\n      fail-fast: false\n\n    name: MySQL (${{ matrix.shard }})\n    runs-on: ubuntu-latest-8-cores\n    permissions:\n      contents: read\n    env:\n      GRAFANA_TEST_DB: mysql\n      MYSQL_HOST: 127.0.0.1\n    services:\n      mysql:\n        image: mysql:8.0.32\n        env:\n          MYSQL_ROOT_PASSWORD: rootpass\n          MYSQL_DATABASE: grafana_tests\n          MYSQL_USER: grafana\n          MYSQL_PASSWORD: password\n        options: --health-cmd=\"mysqladmin ping --silent\" --health-interval=10s --health-timeout=5s --health-retries=3\n        ports:\n          - 3306:3306\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n      - name: Setup Go\n        uses: actions/setup-go@v5\n        with:\n          go-version-file: go.mod\n          cache: true\n      - name: Setup MySQL devenv\n        run: mysql -h 127.0.0.1 -P 3306 -u root -prootpass < devenv/docker/blocks/mysql_tests/setup.sql\n      - name: Run tests\n        env:\n          SHARD: ${{ matrix.shard }}\n        run: |\n          set -euo pipefail\n          readarray -t PACKAGES <<< \"$(./scripts/ci/backend-tests/pkgs-with-tests-named.sh -b TestIntegration | ./scripts/ci/backend-tests/shard.sh -N\"$SHARD\" -d-)\"\n          go test -p=1 -tags=mysql -timeout=5m -run '^TestIntegration' \"${PACKAGES[@]}\"\n  postgres:\n    strategy:\n      matrix:\n        shard: [\n          1/8, 2/8, 3/8, 4/8,\n          5/8, 6/8, 7/8, 8/8,\n        ]\n      fail-fast: false\n\n    name: Postgres (${{ matrix.shard }})\n    runs-on: ubuntu-latest-8-cores\n    permissions:\n      contents: read\n    env:\n      GRAFANA_TEST_DB: postgres\n      PGPASSWORD: grafanatest\n      POSTGRES_HOST: 127.0.0.1\n    services:\n      postgres:\n        image: postgres:12.3-alpine\n        env:\n          POSTGRES_USER: grafanatest\n          POSTGRES_PASSWORD: grafanatest\n          POSTGRES_DB: grafanatest\n        ports:\n          - 5432:5432\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n      - name: Setup Go\n        uses: actions/setup-go@v5\n        with:\n          go-version-file: go.mod\n          cache: true\n      - name: Setup Postgres devenv\n        run: psql -p 5432 -h 127.0.0.1 -U grafanatest -d grafanatest -f devenv/docker/blocks/postgres_tests/setup.sql\n      - name: Run tests\n        env:\n          SHARD: ${{ matrix.shard }}\n        run: |\n          set -euo pipefail\n          readarray -t PACKAGES <<< \"$(./scripts/ci/backend-tests/pkgs-with-tests-named.sh -b TestIntegration | ./scripts/ci/backend-tests/shard.sh -N\"$SHARD\" -d-)\"\n          go test -p=1 -tags=postgres -timeout=5m -run '^TestIntegration' \"${PACKAGES[@]}\"\n\n  # This is the job that is actually required by rulesets.\n  # We want to only require one job instead of all the individual tests and shards.\n  # Future work also allows us to start skipping some tests based on changed files.\n  required-backend-integration-tests:\n    needs:\n      - mysql\n      - postgres\n      - sqlite\n    # always() is the best function here.\n    # success() || failure() will skip this function if any need is also skipped.\n    # That means conditional test suites will fail the entire requirement check.\n    if: always()\n\n    name: All backend integration tests complete\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check test suites\n        env:\n          NEEDS: ${{ toJson(needs) }}\n        run: |\n          FAILURES=\"$(echo \"$NEEDS\" | jq 'with_entries(select(.value.result == \"failure\")) | map_values(.result)')\"\n          echo \"$FAILURES\"\n          if [ \"$(echo \"$FAILURES\" | jq '. | length')\" != \"0\" ]; then\n            exit 1\n          fi\n          echo \"All OK!\"\n", "metadata": {"source": "github.com/grafana/grafana", "language": "yaml", "complexity": "complex", "file_path": ".github/workflows/pr-test-integration.yml", "tool": "unknown", "authentic": true}, "validation": {"overall_quality": 0.88, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "monitoring_observability", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate Fluentd log collection and forwarding configuration for system observability\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "# In v1 configuration, type and id are @ prefix parameters.\n# @type and @id are recommended. type and id are still available for backward compatibility\n\n## built-in TCP input\n## $ echo <json> | fluent-cat <tag>\n<source>\n  @type forward\n  @id forward_input\n</source>\n\n## built-in UNIX socket input\n#<source>\n#  @type unix\n#</source>\n\n# HTTP input\n# http://localhost:8888/<tag>?json=<json>\n<source>\n  @type http\n  @id http_input\n\n  port 8888\n</source>\n\n## File input\n## read apache logs with tag=apache.access\n#<source>\n#  @type tail\n#  format apache\n#  path /var/log/httpd-access.log\n#  tag apache.access\n#</source>\n\n## Mutating event filter\n## Add hostname and tag fields to apache.access tag events\n#<filter apache.access>\n#  @type record_transformer\n#  <record>\n#    hostname ${hostname}\n#    tag ${tag}\n#  </record>\n#</filter>\n\n## Selecting event filter\n## Remove unnecessary events from apache prefixed tag events\n#<filter apache.**>\n#  @type grep\n#  include1 method GET # pass only GET in 'method' field\n#  exclude1 message debug # remove debug event\n#</filter>\n\n# Listen HTTP for monitoring\n# http://localhost:24220/api/plugins\n# http://localhost:24220/api/plugins?type=TYPE\n# http://localhost:24220/api/plugins?tag=MYTAG\n<source>\n  @type monitor_agent\n  @id monitor_agent_input\n\n  port 24220\n</source>\n\n# Listen DRb for debug\n<source>\n  @type debug_agent\n  @id debug_agent_input\n\n  bind 127.0.0.1\n  port 24230\n</source>\n\n## match tag=apache.access and write to file\n#<match apache.access>\n#  @type file\n#  path /var/log/fluent/access\n#</match>\n\n## match tag=debug.** and dump to console\n<match debug.**>\n  @type stdout\n  @id stdout_output\n</match>\n\n## match tag=system.** and forward to another fluent server\n#<match system.**>\n#  @type forward\n#  @id forward_output\n#\n#  <server>\n#    host 192.168.0.11\n#  </server>\n#  <secondary>\n#    <server>\n#      host 192.168.0.12\n#    </server>\n#  </secondary>\n#</match>\n\n## match tag=myapp.** and forward and write to file\n#<match myapp.**>\n#  @type copy\n#  <store>\n#    @type forward\n#    buffer_type file\n#    buffer_path /var/log/fluent/myapp-forward\n#    retry_limit 50\n#    flush_interval 10s\n#    <server>\n#      host 192.168.0.13\n#    </server>\n#  </store>\n#  <store>\n#    @type file\n#    path /var/log/fluent/myapp\n#  </store>\n#</match>\n\n## match fluent's internal events\n#<match fluent.**>\n#  @type null\n#</match>\n\n## match not matched logs and write to file\n#<match **>\n#  @type file\n#  path /var/log/fluent/else\n#  compress gz\n#</match>\n\n## Label: For handling complex event routing\n#<label @STAGING>\n#  <match system.**>\n#    @type forward\n#    @id staging_forward_output\n#    <server>\n#      host 192.168.0.101\n#    </server>\n#  </match>\n#</label>\n", "metadata": {"source": "github.com/fluent/fluentd", "language": "conf", "complexity": "complex", "file_path": "fluent.conf", "tool": "fluentd", "authentic": true}, "validation": {"overall_quality": 0.7799999999999999, "syntax_valid": true, "completeness_score": 0.5, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "security_compliance", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate dependabot configuration for dependency_updates and compliance automation\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "version: 2\nupdates:\n  - package-ecosystem: npm\n    directory: \"/\"\n    schedule:\n      interval: weekly\n    labels:\n      - Update dependencies\n    # Ignore incompatible dependency updates\n    ignore:\n      # There is a type incompatibility issue between v0.0.9 and our other dependencies.\n      - dependency-name: \"@octokit/plugin-retry\"\n        versions: [\"~6.0.0\"]\n      # v7 requires ESM\n      - dependency-name: \"del\"\n        versions: [\"^7.0.0\"]\n      # This is broken due to the way configuration files have changed. \n      # This might be fixed when we move to eslint v9.\n      - dependency-name: \"eslint-plugin-import\"\n        versions: [\">=2.30.0\"]\n    groups:\n      npm:\n        patterns:\n          - \"*\"\n  - package-ecosystem: github-actions\n    directory: \"/\"\n    schedule:\n      interval: weekly\n    groups:\n      actions:\n        patterns:\n          - \"*\"\n  - package-ecosystem: github-actions\n    directory: \"/.github/actions/setup-swift/\" # All subdirectories outside of \"/.github/workflows\" must be explicitly included.\n    schedule:\n      interval: weekly\n    groups:\n      actions-setup-swift:\n        patterns:\n          - \"*\"\n", "metadata": {"source": "github.com/github/codeql-action", "language": "yaml", "complexity": "simple", "file_path": ".github/dependabot.yml", "tool": "dependabot", "authentic": true}, "validation": {"overall_quality": 0.875, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "security_compliance", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate dependabot configuration for dependency_updates and compliance automation\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "version: 2\nupdates:\n\n  - package-ecosystem: \"github-actions\"\n    directory: \"/\"\n    schedule:\n      interval: \"weekly\"\n", "metadata": {"source": "github.com/PyCQA/bandit", "language": "yaml", "complexity": "simple", "file_path": ".github/dependabot.yml", "tool": "dependabot", "authentic": true}, "validation": {"overall_quality": 0.8600000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
{"domain": "devops_automation", "category": "security_compliance", "prompt": "### DevOps Automation Request (CLAUDE.md):\nCreate dependabot configuration for dependency_updates and compliance automation\n\n### PLAN Phase:\nAnalyze requirements and design automation approach.\n\n### CODE Phase:", "completion": "version: 2\nupdates:\n  - package-ecosystem: github-actions\n    directory: /\n    schedule:\n      interval: monthly\n    groups:\n      github-actions:\n        patterns:\n          - \"*\"\n  - package-ecosystem: docker\n    directory: /\n    schedule:\n      interval: monthly\n    groups:\n      docker:\n        patterns:\n          - \"*\"\n  - package-ecosystem: gomod\n    open-pull-requests-limit: 10\n    directory: /\n    schedule:\n      interval: weekly\n    ignore:\n      - dependency-name: \"github.com/aquasecurity/trivy-*\" ## `trivy-*` dependencies are updated manually\n    groups:\n      aws:\n        patterns:\n          - \"github.com/aws/*\"\n      docker:\n        patterns:\n          - \"github.com/docker/*\"\n          - \"github.com/moby/*\"\n      testcontainers:\n        patterns:\n          - \"github.com/testcontainers/*\"\n      common:\n        exclude-patterns:\n          - \"github.com/aquasecurity/trivy-*\"\n        patterns:\n          - \"*\"", "metadata": {"source": "github.com/aquasecurity/trivy", "language": "yaml", "complexity": "simple", "file_path": ".github/dependabot.yml", "tool": "dependabot", "authentic": true}, "validation": {"overall_quality": 0.8650000000000001, "syntax_valid": true, "completeness_score": 1.0, "authenticity_score": 0.8}}
