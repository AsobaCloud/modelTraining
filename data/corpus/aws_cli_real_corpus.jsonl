{"prompt": "Create AWS CLI commands for STS token operations", "completion": "```bash\\n# Configuration\\nREGION=\"us-east-1\"\\nACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)\\nLAMBDA_ROLE_NAME=\"lambda-weather-execution-role\"\\nS3_BUCKET=\"visualcrossing-city-database\"\\nLAMBDA_RUNTIME=\"python3.9\"\\nLAMBDA_MEMORY=256\\nLAMBDA_TIMEOUT=120\\nLAMBDA_DAILY_WEATHER_NAME=\"daily_weather_fetch\"\\n\\n# Check if virtual environment exists, if not create one\\nif [ ! -d \"venv\" ]; then\\n    echo \"Creating virtual environment...\"\\n```", "metadata": {"source": "real_local_repository", "file_path": "/home/shingai/api/core/weather/deploy.sh", "category": "authentication", "authentic": true}}\n{"prompt": "Write AWS CLI commands for S3 management", "completion": "```bash\\n\\necho \"Creating S3 bucket if it doesn't exist...\"\\nif ! aws s3api head-bucket --bucket $S3_BUCKET --region $REGION 2>/dev/null; then\\n    echo \"Creating S3 bucket: $S3_BUCKET\"\\n    aws s3api create-bucket \\\\n```", "metadata": {"source": "real_local_repository", "file_path": "/home/shingai/api/core/weather/deploy.sh", "category": "storage", "authentic": true}}\n{"prompt": "Write AWS CLI commands for IAM operations", "completion": "```bash\\n# Create IAM role for Lambda if it doesn't exist\\necho \"Setting up IAM role for Lambda...\"\\nif ! aws iam get-role --role-name $LAMBDA_ROLE_NAME 2>/dev/null; then\\n    echo \"Creating IAM role: $LAMBDA_ROLE_NAME\"\\n\\n    # Create a trust policy document for Lambda\\n```", "metadata": {"source": "real_local_repository", "file_path": "/home/shingai/api/core/weather/deploy.sh", "category": "security", "authentic": true}}\n{"prompt": "Create AWS CLI commands for IAM role management", "completion": "```bash\\n\\n    # Create the role\\n    aws iam create-role \\\\n```", "metadata": {"source": "real_local_repository", "file_path": "/home/shingai/api/core/weather/deploy.sh", "category": "security", "authentic": true}}\n{"prompt": "Write AWS CLI commands for IAM operations", "completion": "```bash\\n\\n    # Basic execution role for CloudWatch Logs\\n    aws iam attach-role-policy \\\\n```", "metadata": {"source": "real_local_repository", "file_path": "/home/shingai/api/core/weather/deploy.sh", "category": "security", "authentic": true}}\n{"prompt": "Write AWS CLI commands for IAM operations", "completion": "```bash\\n\\n    # S3 access for storing weather data\\n    aws iam attach-role-policy \\\\n```", "metadata": {"source": "real_local_repository", "file_path": "/home/shingai/api/core/weather/deploy.sh", "category": "security", "authentic": true}}\n{"prompt": "Write AWS CLI commands for Lambda management", "completion": "```bash\\n\\n# Check if the Lambda function exists\\nif aws lambda get-function --function-name $LAMBDA_DAILY_WEATHER_NAME --region $REGION 2>/dev/null; then\\n    echo \"Updating existing Lambda function: $LAMBDA_DAILY_WEATHER_NAME\"\\n\\n    # FIRST: Update the Lambda function configuration\\n    echo \"Updating Lambda configuration...\"\\n    aws lambda update-function-configuration \\\\n```", "metadata": {"source": "real_local_repository", "file_path": "/home/shingai/api/core/weather/deploy.sh", "category": "serverless", "authentic": true}}\n{"prompt": "Write AWS CLI commands for Lambda management", "completion": "```bash\\n\\n    # Verify environment variables\\n    CURRENT_ENV=$(aws lambda get-function --function-name $LAMBDA_DAILY_WEATHER_NAME --region $REGION --query 'Configuration.Environment.Variables' --output json)\\n    echo \"Updated environment variables: $CURRENT_ENV\"\\n\\n    # SECOND: Update the Lambda function code\\n    echo \"Updating Lambda code...\"\\n    aws lambda update-function-code \\\\n```", "metadata": {"source": "real_local_repository", "file_path": "/home/shingai/api/core/weather/deploy.sh", "category": "serverless", "authentic": true}}\n{"prompt": "Create AWS CLI commands to deploy Lambda functions", "completion": "```bash\\n\\n    # Create the Lambda function\\n    aws lambda create-function \\\\n```", "metadata": {"source": "real_local_repository", "file_path": "/home/shingai/api/core/weather/deploy.sh", "category": "serverless", "authentic": true}}\n{"prompt": "Write AWS CLI commands for infrastructure management", "completion": "```bash\\necho \"Setting up EventBridge rule: $RULE_NAME\"\\n\\naws events put-rule \\\\n```", "metadata": {"source": "real_local_repository", "file_path": "/home/shingai/api/core/weather/deploy.sh", "category": "aws_operations", "authentic": true}}\n{"prompt": "Write AWS CLI commands for infrastructure management", "completion": "```bash\\n\\n# Add the daily weather Lambda as target\\naws events put-targets \\\\n```", "metadata": {"source": "real_local_repository", "file_path": "/home/shingai/api/core/weather/deploy.sh", "category": "aws_operations", "authentic": true}}\n{"prompt": "Write AWS CLI commands to invoke Lambda functions", "completion": "```bash\\n# Add permission for EventBridge to invoke the Lambda\\necho \"Adding permission for EventBridge to invoke Lambda...\"\\naws lambda add-permission \\\\n```", "metadata": {"source": "real_local_repository", "file_path": "/home/shingai/api/core/weather/deploy.sh", "category": "serverless", "authentic": true}}\n{"prompt": "Write AWS CLI commands to invoke Lambda functions", "completion": "```bash\\n\\necho \"You can test the Lambda function by running:\"\\necho \"aws lambda invoke --function-name $LAMBDA_DAILY_WEATHER_NAME --payload '{}' --region $REGION output.json\"\\n```", "metadata": {"source": "real_local_repository", "file_path": "/home/shingai/api/core/weather/deploy.sh", "category": "serverless", "authentic": true}}\n{"prompt": "Write AWS CLI commands for infrastructure management", "completion": "```bash\\nlocal topic_arn\\n\\n    topic_arn=$(aws sns list-topics --region \"$TARGET_REGION\" \\\\n```", "metadata": {"source": "real_local_repository", "file_path": "/home/shingai/api/deploy/scripts/setup-monitoring.sh", "category": "aws_operations", "authentic": true}}\n{"prompt": "Write AWS CLI commands for infrastructure management", "completion": "```bash\\nlocal email=$2\\n\\n    aws sns list-subscriptions-by-topic --region \"$TARGET_REGION\" \\\\n```", "metadata": {"source": "real_local_repository", "file_path": "/home/shingai/api/deploy/scripts/setup-monitoring.sh", "category": "aws_operations", "authentic": true}}\n{"prompt": "Write AWS CLI commands for infrastructure management", "completion": "```bash\\nSNS_TOPIC_ARN=$(get_sns_topic_arn) || {\\n    echo \"Creating new SNS topic...\"\\n    SNS_TOPIC_ARN=$(aws sns create-topic \\\\n```", "metadata": {"source": "real_local_repository", "file_path": "/home/shingai/api/deploy/scripts/setup-monitoring.sh", "category": "aws_operations", "authentic": true}}\n{"prompt": "Write AWS CLI commands for infrastructure management", "completion": "```bash\\nif ! is_email_subscribed \"$SNS_TOPIC_ARN\" \"$ALARM_EMAIL\"; then\\n    echo \"Subscribing email to SNS topic...\"\\n    aws sns subscribe \\\\n```", "metadata": {"source": "real_local_repository", "file_path": "/home/shingai/api/deploy/scripts/setup-monitoring.sh", "category": "aws_operations", "authentic": true}}\n{"prompt": "Write AWS CLI commands for infrastructure management", "completion": "```bash\\nalarm_exists() {\\n    local alarm_name=$1\\n    aws cloudwatch describe-alarms --region \"$TARGET_REGION\" \\\\n```", "metadata": {"source": "real_local_repository", "file_path": "/home/shingai/api/deploy/scripts/setup-monitoring.sh", "category": "monitoring", "authentic": true}}\n{"prompt": "Write AWS CLI commands for infrastructure management", "completion": "```bash\\nif ! alarm_exists \"$error_alarm_name\"; then\\n        echo \"Creating error rate alarm...\"\\n        aws cloudwatch put-metric-alarm \\\\n```", "metadata": {"source": "real_local_repository", "file_path": "/home/shingai/api/deploy/scripts/setup-monitoring.sh", "category": "monitoring", "authentic": true}}\n{"prompt": "Write AWS CLI commands for infrastructure management", "completion": "```bash\\nif ! alarm_exists \"$duration_alarm_name\"; then\\n        echo \"Creating duration alarm...\"\\n        aws cloudwatch put-metric-alarm \\\\n```", "metadata": {"source": "real_local_repository", "file_path": "/home/shingai/api/deploy/scripts/setup-monitoring.sh", "category": "monitoring", "authentic": true}}\n{"prompt": "Write AWS CLI commands for infrastructure management", "completion": "```bash\\nif ! alarm_exists \"$throttle_alarm_name\"; then\\n        echo \"Creating throttles alarm...\"\\n        aws cloudwatch put-metric-alarm \\\\n```", "metadata": {"source": "real_local_repository", "file_path": "/home/shingai/api/deploy/scripts/setup-monitoring.sh", "category": "monitoring", "authentic": true}}\n{"prompt": "Write AWS CLI commands for infrastructure management", "completion": "```bash\\nif ! alarm_exists \"$error_4xx_alarm_name\"; then\\n        echo \"Creating 4XX errors alarm...\"\\n        aws cloudwatch put-metric-alarm \\\\n```", "metadata": {"source": "real_local_repository", "file_path": "/home/shingai/api/deploy/scripts/setup-monitoring.sh", "category": "monitoring", "authentic": true}}\n{"prompt": "Write AWS CLI commands for infrastructure management", "completion": "```bash\\nif ! alarm_exists \"$error_5xx_alarm_name\"; then\\n        echo \"Creating 5XX errors alarm...\"\\n        aws cloudwatch put-metric-alarm \\\\n```", "metadata": {"source": "real_local_repository", "file_path": "/home/shingai/api/deploy/scripts/setup-monitoring.sh", "category": "monitoring", "authentic": true}}\n{"prompt": "Write AWS CLI commands for infrastructure management", "completion": "```bash\\nif ! alarm_exists \"$latency_alarm_name\"; then\\n        echo \"Creating latency alarm...\"\\n        aws cloudwatch put-metric-alarm \\\\n```", "metadata": {"source": "real_local_repository", "file_path": "/home/shingai/api/deploy/scripts/setup-monitoring.sh", "category": "monitoring", "authentic": true}}\n{"prompt": "Write AWS CLI commands for infrastructure management", "completion": "```bash\\nif ! alarm_exists \"$size_alarm_name\"; then\\n        echo \"Creating bucket size alarm...\"\\n        aws cloudwatch put-metric-alarm \\\\n```", "metadata": {"source": "real_local_repository", "file_path": "/home/shingai/api/deploy/scripts/setup-monitoring.sh", "category": "monitoring", "authentic": true}}\n{"prompt": "Write AWS CLI commands for infrastructure management", "completion": "```bash\\nif ! alarm_exists \"$objects_alarm_name\"; then\\n        echo \"Creating objects count alarm...\"\\n        aws cloudwatch put-metric-alarm \\\\n```", "metadata": {"source": "real_local_repository", "file_path": "/home/shingai/api/deploy/scripts/setup-monitoring.sh", "category": "monitoring", "authentic": true}}\n{"prompt": "Write AWS CLI commands for infrastructure management", "completion": "```bash\\n# Create alarms for all API Gateways\\necho \"Setting up API Gateway alarms...\"\\nAPIS=$(aws apigateway get-rest-apis --region \"$TARGET_REGION\" --query \"items[?contains(name, '${REGION_PREFIX}')].[id,name]\" --output text)\\n```", "metadata": {"source": "real_local_repository", "file_path": "/home/shingai/api/deploy/scripts/setup-monitoring.sh", "category": "aws_operations", "authentic": true}}\n{"prompt": "Write AWS CLI commands for ECR container registry operations", "completion": "```bash\\n\\nTARGET_REGION=\"$1\"\\nACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)\\nSCRIPT_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" &> /dev/null && pwd )\"\\nPROJECT_ROOT=\"$(cd \"$SCRIPT_DIR/../../\" &> /dev/null && pwd)\"\\n\\necho \"Building and pushing Docker images to region: $TARGET_REGION\"\\necho \"Account ID: $ACCOUNT_ID\"\\necho \"Project root: $PROJECT_ROOT\"\\n\\n# Login to ECR\\necho \"Logging in to ECR...\"\\naws ecr get-login-password --region \"$TARGET_REGION\" | docker login --username AWS --password-stdin \"$ACCOUNT_ID.dkr.ecr.$TARGET_REGION.amazonaws.com\"\\n\\n# Components to build\\nCOMPONENTS=(\\n```", "metadata": {"source": "real_local_repository", "file_path": "/home/shingai/api/deploy/scripts/build-and-push-images.sh", "category": "containerization", "authentic": true}}\n{"prompt": "Write AWS CLI commands for infrastructure management", "completion": "```bash\\n\\n# Check if admin client exists\\nADMIN_EXISTS=$(aws dynamodb get-item \\\\n```", "metadata": {"source": "real_local_repository", "file_path": "/home/shingai/api/deploy/scripts/create-api-keys.sh", "category": "aws_operations", "authentic": true}}\n{"prompt": "Write AWS CLI commands for infrastructure management", "completion": "```bash\\nif [ \"$ADMIN_EXISTS\" = \"DOES_NOT_EXIST\" ]; then\\n    echo \"Creating admin (superuser) client...\"\\n    aws dynamodb put-item \\\\n```", "metadata": {"source": "real_local_repository", "file_path": "/home/shingai/api/deploy/scripts/create-api-keys.sh", "category": "aws_operations", "authentic": true}}\n{"prompt": "Write AWS CLI commands for ECR container registry operations", "completion": "```bash\\n\\n    # Check if repository exists\\n    if aws ecr describe-repositories --region \"$TARGET_REGION\" --repository-names \"$REPO_NAME\" >/dev/null 2>&1; then\\n        echo \"Repository $REPO_NAME already exists\"\\n```", "metadata": {"source": "real_local_repository", "file_path": "/home/shingai/api/deploy/scripts/create-ecr-repos.sh", "category": "containerization", "authentic": true}}\n{"prompt": "Write AWS CLI commands for ECR container registry operations", "completion": "```bash\\nelse\\n        echo \"Creating repository: $REPO_NAME\"\\n        aws ecr create-repository \\\\n```", "metadata": {"source": "real_local_repository", "file_path": "/home/shingai/api/deploy/scripts/create-ecr-repos.sh", "category": "containerization", "authentic": true}}\n{"prompt": "Write AWS CLI commands for ECR container registry operations", "completion": "```bash\\n# Set lifecycle policy to keep only the last 5 images\\n        echo \"Setting lifecycle policy for $REPO_NAME\"\\n        aws ecr put-lifecycle-policy \\\\n```", "metadata": {"source": "real_local_repository", "file_path": "/home/shingai/api/deploy/scripts/create-ecr-repos.sh", "category": "containerization", "authentic": true}}\n{"prompt": "Create AWS CLI commands for STS token operations", "completion": "```bash\\nTARGET_REGION=\"$1\"\\nENVIRONMENT=\"${2:-production}\"  # Default to production if not specified\\nACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)\\nSCRIPT_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" &> /dev/null && pwd )\"\\n\\n# Define common tags for all resources\\nTAGS=\"Environment=$ENVIRONMENT \\\\n      Service=OnaAPI \\\\n      Component=Core \\\\n      CostCenter=EnergyForecasting \\\\n      Owner=PlatformTeam \\\\n      UptimeSLA=99.9 \\\\n      DataClassification=Internal \\\\n      Compliance=ISO27001 \\\\n      ManagedBy=CloudFormation \\\\n      Version=1.0\"\\n\\n# Function to check if a CloudFormation stack exists\\n```", "metadata": {"source": "real_local_repository", "file_path": "/home/shingai/api/deploy/deploy-core-api.sh", "category": "authentication", "authentic": true}}\n{"prompt": "Create AWS CLI commands for CloudFormation stack management", "completion": "```bash\\nstack_exists() {\\n    local stack_name=$1\\n    aws cloudformation describe-stacks --region \"$TARGET_REGION\" \\\\n```", "metadata": {"source": "real_local_repository", "file_path": "/home/shingai/api/deploy/deploy-core-api.sh", "category": "infrastructure", "authentic": true}}\n{"prompt": "Write AWS CLI commands for ECR container registry operations", "completion": "```bash\\necr_repo_exists() {\\n    local repo_name=$1\\n    aws ecr describe-repositories --region \"$TARGET_REGION\" \\\\n```", "metadata": {"source": "real_local_repository", "file_path": "/home/shingai/api/deploy/deploy-core-api.sh", "category": "containerization", "authentic": true}}\n{"prompt": "Write AWS CLI commands for infrastructure management", "completion": "```bash\\napi_exists() {\\n    local api_name=$1\\n    aws apigateway get-rest-apis --region \"$TARGET_REGION\" \\\\n        --query \"items[?name=='$api_name'].id\" \\\\n```", "metadata": {"source": "real_local_repository", "file_path": "/home/shingai/api/deploy/deploy-core-api.sh", "category": "aws_operations", "authentic": true}}\n{"prompt": "Write AWS CLI commands for ECR container registry operations", "completion": "```bash\\nif [ \"$(ecr_repo_exists \"$repo/lambda\")\" = \"DOES_NOT_EXIST\" ]; then\\n        echo \"Creating ECR repository: $repo/lambda\"\\n        aws ecr create-repository --region \"$TARGET_REGION\" \\\\n```", "metadata": {"source": "real_local_repository", "file_path": "/home/shingai/api/deploy/deploy-core-api.sh", "category": "containerization", "authentic": true}}\n{"prompt": "Create AWS CLI commands for CloudFormation stack management", "completion": "```bash\\necho \"Deploying S3 buckets...\"\\nS3_STACK_NAME=\"${REGION_PREFIX}-s3-buckets\"\\naws cloudformation deploy \\\\n```", "metadata": {"source": "real_local_repository", "file_path": "/home/shingai/api/deploy/deploy-core-api.sh", "category": "infrastructure", "authentic": true}}\n{"prompt": "Create AWS CLI commands for CloudFormation stack management", "completion": "```bash\\necho \"Deploying IAM roles...\"\\nIAM_STACK_NAME=\"${REGION_PREFIX}-iam-roles\"\\naws cloudformation deploy \\\\n```", "metadata": {"source": "real_local_repository", "file_path": "/home/shingai/api/deploy/deploy-core-api.sh", "category": "infrastructure", "authentic": true}}\n